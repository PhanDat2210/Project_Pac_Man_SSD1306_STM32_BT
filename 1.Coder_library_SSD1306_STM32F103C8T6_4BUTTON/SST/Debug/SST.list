
SST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dd0  080068b0  080068b0  000078b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a680  0800a680  0000c088  2**0
                  CONTENTS
  4 .ARM          00000000  0800a680  0800a680  0000c088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a680  0800a680  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a680  0800a680  0000b680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a684  0800a684  0000b684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800a688  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  20000088  0800a710  0000c088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  0800a710  0000c684  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080a2  00000000  00000000  0000c0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d08  00000000  00000000  00014153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00015e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000703  00000000  00000000  00016798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018232  00000000  00000000  00016e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be57  00000000  00000000  0002f0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084fd2  00000000  00000000  0003af24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfef6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003378  00000000  00000000  000bff3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000c32b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08006898 	.word	0x08006898

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08006898 	.word	0x08006898

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b2e      	ldr	r3, [pc, #184]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a2d      	ldr	r2, [pc, #180]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b28      	ldr	r3, [pc, #160]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a27      	ldr	r2, [pc, #156]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b25      	ldr	r3, [pc, #148]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a96:	4822      	ldr	r0, [pc, #136]	@ (8000b20 <MX_GPIO_Init+0xd4>)
 8000a98:	f002 fb17 	bl	80030ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481a      	ldr	r0, [pc, #104]	@ (8000b20 <MX_GPIO_Init+0xd4>)
 8000ab6:	f002 f96d 	bl	8002d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_3;
 8000aba:	f641 030a 	movw	r3, #6154	@ 0x180a
 8000abe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <MX_GPIO_Init+0xd8>)
 8000ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	4619      	mov	r1, r3
 8000ace:	4816      	ldr	r0, [pc, #88]	@ (8000b28 <MX_GPIO_Init+0xdc>)
 8000ad0:	f002 f960 	bl	8002d94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2006      	movs	r0, #6
 8000ada:	f002 f924 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ade:	2006      	movs	r0, #6
 8000ae0:	f002 f93d 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	2007      	movs	r0, #7
 8000aea:	f002 f91c 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000aee:	2007      	movs	r0, #7
 8000af0:	f002 f935 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2102      	movs	r1, #2
 8000af8:	2008      	movs	r0, #8
 8000afa:	f002 f914 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000afe:	2008      	movs	r0, #8
 8000b00:	f002 f92d 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2103      	movs	r1, #3
 8000b08:	2009      	movs	r0, #9
 8000b0a:	f002 f90c 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b0e:	2009      	movs	r0, #9
 8000b10:	f002 f925 	bl	8002d5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40011000 	.word	0x40011000
 8000b24:	10210000 	.word	0x10210000
 8000b28:	40010800 	.word	0x40010800

08000b2c <DrawPellet>:
int pacman_y = 1;  // Vị trí ban đầu của Pac-Man (y)
int pellets[MAX_PELLETS][1];
char buf_oled[20];

// Hàm tạo các Pellet ngẫu nhiên trong phạm vi bản đồ
void DrawPellet(int pellet_x, int pellet_y) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
    int radius = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	617b      	str	r3, [r7, #20]
    int x = pellet_x * TILE_WIDTH + TILE_WIDTH / 2;
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	3305      	adds	r3, #5
 8000b46:	613b      	str	r3, [r7, #16]
    int y = pellet_y * TILE_HEIGHT + TILE_HEIGHT / 2;
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	3303      	adds	r3, #3
 8000b54:	60fb      	str	r3, [r7, #12]

    if (x >= 0 && x < SCREEN_WIDTH && y >= 0 && y < SCREEN_HEIGHT) {
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db11      	blt.n	8000b80 <DrawPellet+0x54>
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b60:	dc0e      	bgt.n	8000b80 <DrawPellet+0x54>
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0b      	blt.n	8000b80 <DrawPellet+0x54>
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b6c:	dc08      	bgt.n	8000b80 <DrawPellet+0x54>
        SSD1306_DrawFilledCircle(x, y, radius, WHITE);
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	b218      	sxth	r0, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	b219      	sxth	r1, r3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	f001 fa53 	bl	8002026 <SSD1306_DrawFilledCircle>
    }
}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <generate_pellets>:
            if (pellets[i][1] >= MAP_HEIGHT) pellets[i][1] = MAP_HEIGHT - 1;
        }
    }
}

void generate_pellets(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_PELLETS; i++) {
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e04e      	b.n	8000c32 <generate_pellets+0xaa>
        int x, y;
        bool valid = false;
 8000b94:	2300      	movs	r3, #0
 8000b96:	72fb      	strb	r3, [r7, #11]

        while (!valid) {
 8000b98:	e037      	b.n	8000c0a <generate_pellets+0x82>
            x = rand() % MAP_WIDTH;
 8000b9a:	f003 fca3 	bl	80044e4 <rand>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	4b28      	ldr	r3, [pc, #160]	@ (8000c44 <generate_pellets+0xbc>)
 8000ba2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ba6:	1099      	asrs	r1, r3, #2
 8000ba8:	17d3      	asrs	r3, r2, #31
 8000baa:	1ac9      	subs	r1, r1, r3
 8000bac:	460b      	mov	r3, r1
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	613b      	str	r3, [r7, #16]
            y = rand() % MAP_HEIGHT;
 8000bb8:	f003 fc94 	bl	80044e4 <rand>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	425a      	negs	r2, r3
 8000bc0:	f003 031f 	and.w	r3, r3, #31
 8000bc4:	f002 021f 	and.w	r2, r2, #31
 8000bc8:	bf58      	it	pl
 8000bca:	4253      	negpl	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]

            valid = true;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	72fb      	strb	r3, [r7, #11]
            for (int j = 0; j < i; j++) {
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	e014      	b.n	8000c02 <generate_pellets+0x7a>
                if (pellets[j][0] == x && pellets[j][1] == y) {
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c48 <generate_pellets+0xc0>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d10a      	bne.n	8000bfc <generate_pellets+0x74>
 8000be6:	4a18      	ldr	r2, [pc, #96]	@ (8000c48 <generate_pellets+0xc0>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3301      	adds	r3, #1
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d102      	bne.n	8000bfc <generate_pellets+0x74>
                    valid = false;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	72fb      	strb	r3, [r7, #11]
                    break;
 8000bfa:	e006      	b.n	8000c0a <generate_pellets+0x82>
            for (int j = 0; j < i; j++) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	dbe6      	blt.n	8000bd8 <generate_pellets+0x50>
        while (!valid) {
 8000c0a:	7afb      	ldrb	r3, [r7, #11]
 8000c0c:	f083 0301 	eor.w	r3, r3, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1c1      	bne.n	8000b9a <generate_pellets+0x12>
                }
            }
        }

        pellets[i][0] = x;
 8000c16:	490c      	ldr	r1, [pc, #48]	@ (8000c48 <generate_pellets+0xc0>)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        pellets[i][1] = y;
 8000c20:	4909      	ldr	r1, [pc, #36]	@ (8000c48 <generate_pellets+0xc0>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < MAX_PELLETS; i++) {
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	ddad      	ble.n	8000b94 <generate_pellets+0xc>
    }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	38e38e39 	.word	0x38e38e39
 8000c48:	200000a4 	.word	0x200000a4

08000c4c <DrawPellets>:

void DrawPellets() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_PELLETS; i++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	e01e      	b.n	8000c96 <DrawPellets+0x4a>
        if (pellets[i][0] != -1 && pellets[i][1] != -1) {  // Pellet chưa bị xóa
 8000c58:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <DrawPellets+0x5c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d014      	beq.n	8000c90 <DrawPellets+0x44>
 8000c66:	4a10      	ldr	r2, [pc, #64]	@ (8000ca8 <DrawPellets+0x5c>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d00c      	beq.n	8000c90 <DrawPellets+0x44>
            DrawPellet(pellets[i][0], pellets[i][1]);
 8000c76:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca8 <DrawPellets+0x5c>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c7e:	490a      	ldr	r1, [pc, #40]	@ (8000ca8 <DrawPellets+0x5c>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3301      	adds	r3, #1
 8000c84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	f7ff ff4e 	bl	8000b2c <DrawPellet>
    for (int i = 0; i < MAX_PELLETS; i++) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3301      	adds	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	dddd      	ble.n	8000c58 <DrawPellets+0xc>
        }
    }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000a4 	.word	0x200000a4

08000cac <check_collision_with_pellet>:

// Hàm kiểm tra va chạm với Pellet
int check_collision_with_pellet(int pacman_x, int pacman_y) {
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PELLETS; i++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	e013      	b.n	8000ce4 <check_collision_with_pellet+0x38>
        if (pellets[i][0] == pacman_x && pellets[i][1] == pacman_y) {
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <check_collision_with_pellet+0x4c>)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d109      	bne.n	8000cde <check_collision_with_pellet+0x32>
 8000cca:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <check_collision_with_pellet+0x4c>)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d101      	bne.n	8000cde <check_collision_with_pellet+0x32>
            return i;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	e007      	b.n	8000cee <check_collision_with_pellet+0x42>
    for (int i = 0; i < MAX_PELLETS; i++) {
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	dde8      	ble.n	8000cbc <check_collision_with_pellet+0x10>
        }
    }
    return -1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	200000a4 	.word	0x200000a4

08000cfc <remove_pellet>:

void remove_pellet(int index) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    pellets[index][0] = -1; // Đặt giá trị x và y của Pellet thành -1 để ẩn
 8000d04:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <remove_pellet+0x2c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    pellets[index][1] = -1;
 8000d10:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <remove_pellet+0x2c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3301      	adds	r3, #1
 8000d16:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	200000a4 	.word	0x200000a4
 8000d2c:	00000000 	.word	0x00000000

08000d30 <draw_pacman>:


// Hàm vẽ Pellet


void draw_pacman(int x, int y) {
 8000d30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d34:	b08c      	sub	sp, #48	@ 0x30
 8000d36:	af02      	add	r7, sp, #8
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
    int centerX = x * TILE_WIDTH + TILE_WIDTH ;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	623b      	str	r3, [r7, #32]
    int centerY = y * TILE_HEIGHT + TILE_HEIGHT ;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	61fb      	str	r3, [r7, #28]
    int radius = PACMAN_RADIUS;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	61bb      	str	r3, [r7, #24]

    SSD1306_DrawFilledCircle(centerX, centerY, radius, WHITE);
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	b218      	sxth	r0, r3
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	b219      	sxth	r1, r3
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f001 f95c 	bl	8002026 <SSD1306_DrawFilledCircle>

    int start_angle = -45;
 8000d6e:	f06f 032c 	mvn.w	r3, #44	@ 0x2c
 8000d72:	617b      	str	r3, [r7, #20]
    int end_angle = 30;
 8000d74:	231e      	movs	r3, #30
 8000d76:	613b      	str	r3, [r7, #16]
    for (int angle = start_angle; angle <= end_angle; angle++) {
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d7c:	e078      	b.n	8000e70 <draw_pacman+0x140>
        int x1 = centerX + radius * cos(angle * M_PI / 180.0);
 8000d7e:	6a38      	ldr	r0, [r7, #32]
 8000d80:	f7ff fb38 	bl	80003f4 <__aeabi_i2d>
 8000d84:	4604      	mov	r4, r0
 8000d86:	460d      	mov	r5, r1
 8000d88:	69b8      	ldr	r0, [r7, #24]
 8000d8a:	f7ff fb33 	bl	80003f4 <__aeabi_i2d>
 8000d8e:	4680      	mov	r8, r0
 8000d90:	4689      	mov	r9, r1
 8000d92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d94:	f7ff fb2e 	bl	80003f4 <__aeabi_i2d>
 8000d98:	a33b      	add	r3, pc, #236	@ (adr r3, 8000e88 <draw_pacman+0x158>)
 8000d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9e:	f7ff fb93 	bl	80004c8 <__aeabi_dmul>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4610      	mov	r0, r2
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 0200 	mov.w	r2, #0
 8000dae:	4b38      	ldr	r3, [pc, #224]	@ (8000e90 <draw_pacman+0x160>)
 8000db0:	f7ff fcb4 	bl	800071c <__aeabi_ddiv>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f004 fd50 	bl	8005860 <cos>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	f7ff fb7e 	bl	80004c8 <__aeabi_dmul>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	4629      	mov	r1, r5
 8000dd4:	f7ff f9c2 	bl	800015c <__adddf3>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fe0c 	bl	80009fc <__aeabi_d2iz>
 8000de4:	4603      	mov	r3, r0
 8000de6:	60fb      	str	r3, [r7, #12]
        int y1 = centerY + radius * sin(angle * M_PI / 180.0);
 8000de8:	69f8      	ldr	r0, [r7, #28]
 8000dea:	f7ff fb03 	bl	80003f4 <__aeabi_i2d>
 8000dee:	4604      	mov	r4, r0
 8000df0:	460d      	mov	r5, r1
 8000df2:	69b8      	ldr	r0, [r7, #24]
 8000df4:	f7ff fafe 	bl	80003f4 <__aeabi_i2d>
 8000df8:	4680      	mov	r8, r0
 8000dfa:	4689      	mov	r9, r1
 8000dfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000dfe:	f7ff faf9 	bl	80003f4 <__aeabi_i2d>
 8000e02:	a321      	add	r3, pc, #132	@ (adr r3, 8000e88 <draw_pacman+0x158>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	f7ff fb5e 	bl	80004c8 <__aeabi_dmul>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4610      	mov	r0, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <draw_pacman+0x160>)
 8000e1a:	f7ff fc7f 	bl	800071c <__aeabi_ddiv>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	4610      	mov	r0, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	f004 fd61 	bl	80058ec <sin>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4640      	mov	r0, r8
 8000e30:	4649      	mov	r1, r9
 8000e32:	f7ff fb49 	bl	80004c8 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	f7ff f98d 	bl	800015c <__adddf3>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fdd7 	bl	80009fc <__aeabi_d2iz>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60bb      	str	r3, [r7, #8]
        SSD1306_DrawLine(centerX, centerY, x1, y1, BLACK);
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	b298      	uxth	r0, r3
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	b299      	uxth	r1, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	2400      	movs	r4, #0
 8000e64:	9400      	str	r4, [sp, #0]
 8000e66:	f000 fe5c 	bl	8001b22 <SSD1306_DrawLine>
    for (int angle = start_angle; angle <= end_angle; angle++) {
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dd82      	ble.n	8000d7e <draw_pacman+0x4e>
    }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	@ 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000e84:	f3af 8000 	nop.w
 8000e88:	54442d18 	.word	0x54442d18
 8000e8c:	400921fb 	.word	0x400921fb
 8000e90:	40668000 	.word	0x40668000

08000e94 <control_pacman>:

#define DEBOUNCE_DELAY 50  // Thời gian trễ chống rung (ms)
static uint32_t last_button_time = 0;  // Biến lưu trữ thời gian lần nhấn nút cuối cùng
void control_pacman(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000e9a:	f001 fe3f 	bl	8002b1c <HAL_GetTick>
 8000e9e:	6078      	str	r0, [r7, #4]

    if (current_time - last_button_time > DEBOUNCE_DELAY) {
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f60 <control_pacman+0xcc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b32      	cmp	r3, #50	@ 0x32
 8000eaa:	d954      	bls.n	8000f56 <control_pacman+0xc2>
        // Di chuyển Pac-Man theo các nút bấm
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET && pacman_y > 0) { // Lên
 8000eac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eb0:	482c      	ldr	r0, [pc, #176]	@ (8000f64 <control_pacman+0xd0>)
 8000eb2:	f002 f8f3 	bl	800309c <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d108      	bne.n	8000ece <control_pacman+0x3a>
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <control_pacman+0xd4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dd04      	ble.n	8000ece <control_pacman+0x3a>
            pacman_y--;
 8000ec4:	4b28      	ldr	r3, [pc, #160]	@ (8000f68 <control_pacman+0xd4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	4a27      	ldr	r2, [pc, #156]	@ (8000f68 <control_pacman+0xd4>)
 8000ecc:	6013      	str	r3, [r2, #0]
        }
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET && pacman_y < (SCREEN_HEIGHT / TILE_HEIGHT) - 1) { // Xuống
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4824      	ldr	r0, [pc, #144]	@ (8000f64 <control_pacman+0xd0>)
 8000ed2:	f002 f8e3 	bl	800309c <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d108      	bne.n	8000eee <control_pacman+0x5a>
 8000edc:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <control_pacman+0xd4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	dc04      	bgt.n	8000eee <control_pacman+0x5a>
            pacman_y++;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <control_pacman+0xd4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a1f      	ldr	r2, [pc, #124]	@ (8000f68 <control_pacman+0xd4>)
 8000eec:	6013      	str	r3, [r2, #0]
        }
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_RESET && pacman_x > 0) { // Trái
 8000eee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef2:	481c      	ldr	r0, [pc, #112]	@ (8000f64 <control_pacman+0xd0>)
 8000ef4:	f002 f8d2 	bl	800309c <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d108      	bne.n	8000f10 <control_pacman+0x7c>
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <control_pacman+0xd8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	dd04      	ble.n	8000f10 <control_pacman+0x7c>
            pacman_x--;
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <control_pacman+0xd8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	4a17      	ldr	r2, [pc, #92]	@ (8000f6c <control_pacman+0xd8>)
 8000f0e:	6013      	str	r3, [r2, #0]
        }
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET && pacman_x < (SCREEN_WIDTH / TILE_WIDTH) - 1) { // Phải
 8000f10:	2108      	movs	r1, #8
 8000f12:	4814      	ldr	r0, [pc, #80]	@ (8000f64 <control_pacman+0xd0>)
 8000f14:	f002 f8c2 	bl	800309c <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d108      	bne.n	8000f30 <control_pacman+0x9c>
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <control_pacman+0xd8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b0a      	cmp	r3, #10
 8000f24:	dc04      	bgt.n	8000f30 <control_pacman+0x9c>
            pacman_x++;
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <control_pacman+0xd8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f6c <control_pacman+0xd8>)
 8000f2e:	6013      	str	r3, [r2, #0]
        }

        // Kiểm tra va chạm với Pellet và xóa Pellet nếu có va chạm
        int pellet_index = check_collision_with_pellet(pacman_x, pacman_y);
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <control_pacman+0xd8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <control_pacman+0xd4>)
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff feb6 	bl	8000cac <check_collision_with_pellet>
 8000f40:	6038      	str	r0, [r7, #0]
        if (pellet_index != -1) {
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d002      	beq.n	8000f50 <control_pacman+0xbc>
            remove_pellet(pellet_index);  // Pellet sẽ bị xóa ngay lập tức
 8000f4a:	6838      	ldr	r0, [r7, #0]
 8000f4c:	f7ff fed6 	bl	8000cfc <remove_pellet>
        }

        last_button_time = current_time;
 8000f50:	4a03      	ldr	r2, [pc, #12]	@ (8000f60 <control_pacman+0xcc>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
    }
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000c0 	.word	0x200000c0
 8000f64:	40010800 	.word	0x40010800
 8000f68:	2000001c 	.word	0x2000001c
 8000f6c:	20000018 	.word	0x20000018

08000f70 <DrawFullScreenRoundedRectangle>:


void DrawFullScreenRoundedRectangle() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af02      	add	r7, sp, #8
    // Vẽ hình chữ nhật bo góc bao quanh toàn bộ màn hình SSD1306
    int x = 0;       // Tọa độ x của góc trên bên trái
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
    int y = 0;       // Tọa độ y của góc trên bên trái
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
    int width = 128; // Chiều rộng của màn hình SSD1306
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	60fb      	str	r3, [r7, #12]
    int height = 64; // Chiều cao của màn hình SSD1306
 8000f82:	2340      	movs	r3, #64	@ 0x40
 8000f84:	60bb      	str	r3, [r7, #8]
    int radius = 1;  // Bán kính góc bo
 8000f86:	2301      	movs	r3, #1
 8000f88:	607b      	str	r3, [r7, #4]
    SSD1306_COLOR_t color = WHITE; // Màu trắng
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	807b      	strh	r3, [r7, #2]

    // Gọi hàm vẽ hình chữ nhật bo góc
    DrawRoundedRectangle(x, y, width, height, radius, color);
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	6939      	ldr	r1, [r7, #16]
 8000f9c:	6978      	ldr	r0, [r7, #20]
 8000f9e:	f001 fa51 	bl	8002444 <DrawRoundedRectangle>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <DrawMap>:

void DrawMap() {
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b08f      	sub	sp, #60	@ 0x3c
 8000fb0:	af02      	add	r7, sp, #8
    int cellWidth = 4;  // Chiều rộng mỗi ô (theo pixel)
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	61fb      	str	r3, [r7, #28]
    int cellHeight = 3; // Chiều cao mỗi ô (theo pixel)
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	61bb      	str	r3, [r7, #24]
    int color = WHITE;  // Màu sắc cho hình chữ nhật
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]

    // Duyệt qua tất cả các phần tử trong map

    for (int row = 0; row < 18; row++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fc2:	e057      	b.n	8001074 <DrawMap+0xc8>
        for (int col = 0; col < 32; col++) {
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fc8:	e04e      	b.n	8001068 <DrawMap+0xbc>
            // Nếu giá trị trong mảng khác 0, vẽ hình chữ nhật
            if (map[row][col] != 0) {
 8000fca:	492e      	ldr	r1, [pc, #184]	@ (8001084 <DrawMap+0xd8>)
 8000fcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fce:	4613      	mov	r3, r2
 8000fd0:	015b      	lsls	r3, r3, #5
 8000fd2:	4413      	add	r3, r2
 8000fd4:	18ca      	adds	r2, r1, r3
 8000fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d040      	beq.n	8001062 <DrawMap+0xb6>
                int x = col * cellWidth;        // Tọa độ x của ô
 8000fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	fb02 f303 	mul.w	r3, r2, r3
 8000fe8:	613b      	str	r3, [r7, #16]
                int y = row * cellHeight;       // Tọa độ y của ô
 8000fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	60fb      	str	r3, [r7, #12]
                int width = cellWidth;          // Chiều rộng của ô
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	60bb      	str	r3, [r7, #8]
                int height = cellHeight;        // Chiều cao của ô
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	607b      	str	r3, [r7, #4]
                // Vẽ hình chữ nhật (đặt viền)
                SSD1306_DrawRectangle(x, y, width, height, color);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	b298      	uxth	r0, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	b299      	uxth	r1, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	b29a      	uxth	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	b29c      	uxth	r4, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	b29b      	uxth	r3, r3
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	4623      	mov	r3, r4
 8001014:	f000 fe7d 	bl	8001d12 <SSD1306_DrawRectangle>

                // Tô màu bên trong hình chữ nhật
                // Sử dụng hàm FillRectangle nếu có (hoặc vẽ từng điểm nếu cần)
                for (int py = y + 1; py < y + height - 1; py++) {
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
 800101e:	e019      	b.n	8001054 <DrawMap+0xa8>
                    for (int px = x + 1; px < x + width - 1; px++) {
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	3301      	adds	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
 8001026:	e00b      	b.n	8001040 <DrawMap+0x94>
                        SSD1306_DrawPixel(px, py, color);
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	b29b      	uxth	r3, r3
 800102c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800102e:	b291      	uxth	r1, r2
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	b292      	uxth	r2, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fc5d 	bl	80018f4 <SSD1306_DrawPixel>
                    for (int px = x + 1; px < x + width - 1; px++) {
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	3301      	adds	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4413      	add	r3, r2
 8001046:	3b01      	subs	r3, #1
 8001048:	6a3a      	ldr	r2, [r7, #32]
 800104a:	429a      	cmp	r2, r3
 800104c:	dbec      	blt.n	8001028 <DrawMap+0x7c>
                for (int py = y + 1; py < y + height - 1; py++) {
 800104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001050:	3301      	adds	r3, #1
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	3b01      	subs	r3, #1
 800105c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800105e:	429a      	cmp	r2, r3
 8001060:	dbde      	blt.n	8001020 <DrawMap+0x74>
        for (int col = 0; col < 32; col++) {
 8001062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001064:	3301      	adds	r3, #1
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800106a:	2b1f      	cmp	r3, #31
 800106c:	ddad      	ble.n	8000fca <DrawMap+0x1e>
    for (int row = 0; row < 18; row++) {
 800106e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001070:	3301      	adds	r3, #1
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001076:	2b11      	cmp	r3, #17
 8001078:	dda4      	ble.n	8000fc4 <DrawMap+0x18>
                    }
                }
            }
        }
    }
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3734      	adds	r7, #52	@ 0x34
 8001080:	46bd      	mov	sp, r7
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	0800a14c 	.word	0x0800a14c

08001088 <are_pellets_left>:
// Hàm kiểm tra nếu còn Pellet nào
bool are_pellets_left() {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_PELLETS; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	e013      	b.n	80010bc <are_pellets_left+0x34>
        if (pellets[i][0] != -1 && pellets[i][1] != -1) {
 8001094:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <are_pellets_left+0x48>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d009      	beq.n	80010b6 <are_pellets_left+0x2e>
 80010a2:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <are_pellets_left+0x48>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d001      	beq.n	80010b6 <are_pellets_left+0x2e>
            return true;  // Còn Pellet
 80010b2:	2301      	movs	r3, #1
 80010b4:	e006      	b.n	80010c4 <are_pellets_left+0x3c>
    for (int i = 0; i < MAX_PELLETS; i++) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3301      	adds	r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	dde8      	ble.n	8001094 <are_pellets_left+0xc>
        }
    }
    return false;  // Không còn Pellet nào
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200000a4 	.word	0x200000a4

080010d4 <display_win_message>:
void display_win_message(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
    SSD1306_Fill(BLACK);  // Xóa màn hình
 80010d8:	2000      	movs	r0, #0
 80010da:	f000 fbf3 	bl	80018c4 <SSD1306_Fill>
    SSD1306_GotoXY(20, 30);  // Đặt vị trí hiển thị
 80010de:	211e      	movs	r1, #30
 80010e0:	2014      	movs	r0, #20
 80010e2:	f000 fc65 	bl	80019b0 <SSD1306_GotoXY>
    SSD1306_Puts("YOU WIN", &Font_11x18, WHITE);  // Hiển thị thông báo "YOU WIN"
 80010e6:	2201      	movs	r2, #1
 80010e8:	4905      	ldr	r1, [pc, #20]	@ (8001100 <display_win_message+0x2c>)
 80010ea:	4806      	ldr	r0, [pc, #24]	@ (8001104 <display_win_message+0x30>)
 80010ec:	f000 fcf4 	bl	8001ad8 <SSD1306_Puts>
    SSD1306_UpdateScreen();  // Cập nhật màn hình
 80010f0:	f000 fbba 	bl	8001868 <SSD1306_UpdateScreen>
    HAL_Delay(0XFFFFFFFF);
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f001 fd1a 	bl	8002b30 <HAL_Delay>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000008 	.word	0x20000008
 8001104:	080068b0 	.word	0x080068b0

08001108 <draw_game>:

void draw_game(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    // Làm sạch màn hình một lần duy nhất
    SSD1306_Fill(BLACK);
 800110c:	2000      	movs	r0, #0
 800110e:	f000 fbd9 	bl	80018c4 <SSD1306_Fill>

    // Vẽ các Pellet chưa bị ăn
    DrawPellets();
 8001112:	f7ff fd9b 	bl	8000c4c <DrawPellets>

    // Vẽ lại Pac-Man
    draw_pacman(pacman_x, pacman_y);
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <draw_game+0x30>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a08      	ldr	r2, [pc, #32]	@ (800113c <draw_game+0x34>)
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fe05 	bl	8000d30 <draw_pacman>

    // Vẽ lại bản đồ
    DrawMap();
 8001126:	f7ff ff41 	bl	8000fac <DrawMap>

    // Vẽ khung hình bo góc xung quanh màn hình
    DrawFullScreenRoundedRectangle();
 800112a:	f7ff ff21 	bl	8000f70 <DrawFullScreenRoundedRectangle>

    // Cập nhật màn hình chỉ một lần sau khi vẽ xong tất cả
    SSD1306_UpdateScreen();
 800112e:	f000 fb9b 	bl	8001868 <SSD1306_UpdateScreen>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000018 	.word	0x20000018
 800113c:	2000001c 	.word	0x2000001c

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af02      	add	r7, sp, #8
	HAL_Init();
 8001146:	f001 fc91 	bl	8002a6c <HAL_Init>
	    SystemClock_Config();
 800114a:	f000 fa0d 	bl	8001568 <SystemClock_Config>
	    MX_GPIO_Init();
 800114e:	f7ff fc7d 	bl	8000a4c <MX_GPIO_Init>
	    MX_I2C1_Init();
 8001152:	f001 fa83 	bl	800265c <MX_I2C1_Init>

	    SSD1306_Init();
 8001156:	f000 fac3 	bl	80016e0 <SSD1306_Init>
		generate_pellets();
 800115a:	f7ff fd15 	bl	8000b88 <generate_pellets>
		SSD1306_GotoXY(5,10);
 800115e:	210a      	movs	r1, #10
 8001160:	2005      	movs	r0, #5
 8001162:	f000 fc25 	bl	80019b0 <SSD1306_GotoXY>
		SSD1306_Puts("Pac-Man", &Font_11x18, WHITE);
 8001166:	2201      	movs	r2, #1
 8001168:	49b0      	ldr	r1, [pc, #704]	@ (800142c <main+0x2ec>)
 800116a:	48b1      	ldr	r0, [pc, #708]	@ (8001430 <main+0x2f0>)
 800116c:	f000 fcb4 	bl	8001ad8 <SSD1306_Puts>
		SSD1306_GotoXY(10,30);
 8001170:	211e      	movs	r1, #30
 8001172:	200a      	movs	r0, #10
 8001174:	f000 fc1c 	bl	80019b0 <SSD1306_GotoXY>
		SSD1306_Puts("Welcome", &Font_16x26, WHITE);
 8001178:	2201      	movs	r2, #1
 800117a:	49ae      	ldr	r1, [pc, #696]	@ (8001434 <main+0x2f4>)
 800117c:	48ae      	ldr	r0, [pc, #696]	@ (8001438 <main+0x2f8>)
 800117e:	f000 fcab 	bl	8001ad8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001182:	f000 fb71 	bl	8001868 <SSD1306_UpdateScreen>
		HAL_Delay(2000);
 8001186:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800118a:	f001 fcd1 	bl	8002b30 <HAL_Delay>

		SSD1306_Clear();
 800118e:	f001 f825 	bl	80021dc <SSD1306_Clear>
		SSD1306_GotoXY(40,10);
 8001192:	210a      	movs	r1, #10
 8001194:	2028      	movs	r0, #40	@ 0x28
 8001196:	f000 fc0b 	bl	80019b0 <SSD1306_GotoXY>
		SSD1306_Puts("Note!!!\n", &Font_7x10, WHITE);
 800119a:	2201      	movs	r2, #1
 800119c:	49a7      	ldr	r1, [pc, #668]	@ (800143c <main+0x2fc>)
 800119e:	48a8      	ldr	r0, [pc, #672]	@ (8001440 <main+0x300>)
 80011a0:	f000 fc9a 	bl	8001ad8 <SSD1306_Puts>
		SSD1306_GotoXY(25,25);
 80011a4:	2119      	movs	r1, #25
 80011a6:	2019      	movs	r0, #25
 80011a8:	f000 fc02 	bl	80019b0 <SSD1306_GotoXY>
		SSD1306_Puts("Super Pac-Man", &Font_7x10, WHITE);
 80011ac:	2201      	movs	r2, #1
 80011ae:	49a3      	ldr	r1, [pc, #652]	@ (800143c <main+0x2fc>)
 80011b0:	48a4      	ldr	r0, [pc, #656]	@ (8001444 <main+0x304>)
 80011b2:	f000 fc91 	bl	8001ad8 <SSD1306_Puts>
		SSD1306_GotoXY(13,35);
 80011b6:	2123      	movs	r1, #35	@ 0x23
 80011b8:	200d      	movs	r0, #13
 80011ba:	f000 fbf9 	bl	80019b0 <SSD1306_GotoXY>
		SSD1306_Puts("Namco & Midway", &Font_7x10, WHITE);
 80011be:	2201      	movs	r2, #1
 80011c0:	499e      	ldr	r1, [pc, #632]	@ (800143c <main+0x2fc>)
 80011c2:	48a1      	ldr	r0, [pc, #644]	@ (8001448 <main+0x308>)
 80011c4:	f000 fc88 	bl	8001ad8 <SSD1306_Puts>
		SSD1306_GotoXY(33,50);
 80011c8:	2132      	movs	r1, #50	@ 0x32
 80011ca:	2021      	movs	r0, #33	@ 0x21
 80011cc:	f000 fbf0 	bl	80019b0 <SSD1306_GotoXY>
		SSD1306_Puts("12-2-24",&Font_7x10,WHITE);
 80011d0:	2201      	movs	r2, #1
 80011d2:	499a      	ldr	r1, [pc, #616]	@ (800143c <main+0x2fc>)
 80011d4:	489d      	ldr	r0, [pc, #628]	@ (800144c <main+0x30c>)
 80011d6:	f000 fc7f 	bl	8001ad8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80011da:	f000 fb45 	bl	8001868 <SSD1306_UpdateScreen>
		HAL_Delay(4000);
 80011de:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80011e2:	f001 fca5 	bl	8002b30 <HAL_Delay>

		SSD1306_Clear();
 80011e6:	f000 fff9 	bl	80021dc <SSD1306_Clear>
		SSD1306_DrawRectangle(2, 2, 123, 60, WHITE); // Khung bao quanh
 80011ea:	2301      	movs	r3, #1
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	233c      	movs	r3, #60	@ 0x3c
 80011f0:	227b      	movs	r2, #123	@ 0x7b
 80011f2:	2102      	movs	r1, #2
 80011f4:	2002      	movs	r0, #2
 80011f6:	f000 fd8c 	bl	8001d12 <SSD1306_DrawRectangle>
		SSD1306_GotoXY(10, 10);
 80011fa:	210a      	movs	r1, #10
 80011fc:	200a      	movs	r0, #10
 80011fe:	f000 fbd7 	bl	80019b0 <SSD1306_GotoXY>
		SSD1306_Puts("Game Loading ^-^", &Font_7x10, WHITE); // Thay đổi thông báo
 8001202:	2201      	movs	r2, #1
 8001204:	498d      	ldr	r1, [pc, #564]	@ (800143c <main+0x2fc>)
 8001206:	4892      	ldr	r0, [pc, #584]	@ (8001450 <main+0x310>)
 8001208:	f000 fc66 	bl	8001ad8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800120c:	f000 fb2c 	bl	8001868 <SSD1306_UpdateScreen>

		uint8_t progress = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	77fb      	strb	r3, [r7, #31]

			// Vẽ thanh tiến độ (màu trắng) phía dưới
		SSD1306_DrawRectangle(10, 45, 100, 10, WHITE);  // Khung thanh tiến độ
 8001214:	2301      	movs	r3, #1
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	230a      	movs	r3, #10
 800121a:	2264      	movs	r2, #100	@ 0x64
 800121c:	212d      	movs	r1, #45	@ 0x2d
 800121e:	200a      	movs	r0, #10
 8001220:	f000 fd77 	bl	8001d12 <SSD1306_DrawRectangle>
		SSD1306_UpdateScreen();
 8001224:	f000 fb20 	bl	8001868 <SSD1306_UpdateScreen>

			// Thêm hiệu ứng cho thanh tiến độ (sử dụng màu đen làm nền và màu trắng làm thanh tiến độ)
			while (progress <= 100) {
 8001228:	e027      	b.n	800127a <main+0x13a>
				// Xóa thanh tiến độ trước khi vẽ lại
				SSD1306_DrawRectangle(10, 45, 100, 10, BLACK); // Xóa thanh tiến độ cũ (màu nền đen)
 800122a:	2300      	movs	r3, #0
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	230a      	movs	r3, #10
 8001230:	2264      	movs	r2, #100	@ 0x64
 8001232:	212d      	movs	r1, #45	@ 0x2d
 8001234:	200a      	movs	r0, #10
 8001236:	f000 fd6c 	bl	8001d12 <SSD1306_DrawRectangle>
				SSD1306_DrawRectangle(10, 45, progress, 10, WHITE);  // Vẽ thanh tiến độ mới
 800123a:	7ffb      	ldrb	r3, [r7, #31]
 800123c:	b29a      	uxth	r2, r3
 800123e:	2301      	movs	r3, #1
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	230a      	movs	r3, #10
 8001244:	212d      	movs	r1, #45	@ 0x2d
 8001246:	200a      	movs	r0, #10
 8001248:	f000 fd63 	bl	8001d12 <SSD1306_DrawRectangle>
				SSD1306_UpdateScreen();
 800124c:	f000 fb0c 	bl	8001868 <SSD1306_UpdateScreen>

				// Hiển thị phần trăm
				SSD1306_GotoXY(40, 30);
 8001250:	211e      	movs	r1, #30
 8001252:	2028      	movs	r0, #40	@ 0x28
 8001254:	f000 fbac 	bl	80019b0 <SSD1306_GotoXY>
				sprintf(buf_oled, "%u%%", progress);
 8001258:	7ffb      	ldrb	r3, [r7, #31]
 800125a:	461a      	mov	r2, r3
 800125c:	497d      	ldr	r1, [pc, #500]	@ (8001454 <main+0x314>)
 800125e:	487e      	ldr	r0, [pc, #504]	@ (8001458 <main+0x318>)
 8001260:	f003 fa40 	bl	80046e4 <siprintf>
				SSD1306_Puts(buf_oled, &Font_11x18, WHITE);
 8001264:	2201      	movs	r2, #1
 8001266:	4971      	ldr	r1, [pc, #452]	@ (800142c <main+0x2ec>)
 8001268:	487b      	ldr	r0, [pc, #492]	@ (8001458 <main+0x318>)
 800126a:	f000 fc35 	bl	8001ad8 <SSD1306_Puts>

				progress++; // Tăng phần trăm
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	3301      	adds	r3, #1
 8001272:	77fb      	strb	r3, [r7, #31]
				HAL_Delay(100);  // Delay mỗi lần cập nhật (100ms)
 8001274:	2064      	movs	r0, #100	@ 0x64
 8001276:	f001 fc5b 	bl	8002b30 <HAL_Delay>
			while (progress <= 100) {
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	2b64      	cmp	r3, #100	@ 0x64
 800127e:	d9d4      	bls.n	800122a <main+0xea>
			}

			// Hoàn thành thanh loading (100%)
		SSD1306_DrawRectangle(10, 45, 100, 10, WHITE); // Đảm bảo thanh tiến độ đầy
 8001280:	2301      	movs	r3, #1
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	230a      	movs	r3, #10
 8001286:	2264      	movs	r2, #100	@ 0x64
 8001288:	212d      	movs	r1, #45	@ 0x2d
 800128a:	200a      	movs	r0, #10
 800128c:	f000 fd41 	bl	8001d12 <SSD1306_DrawRectangle>
		SSD1306_UpdateScreen();
 8001290:	f000 faea 	bl	8001868 <SSD1306_UpdateScreen>
		HAL_Delay(1000);  // Dừng lại một chút để người dùng thấy kết quả
 8001294:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001298:	f001 fc4a 	bl	8002b30 <HAL_Delay>

		SSD1306_Clear();
 800129c:	f000 ff9e 	bl	80021dc <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, imagen3, 128, 60, WHITE);
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	233c      	movs	r3, #60	@ 0x3c
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	4a6c      	ldr	r2, [pc, #432]	@ (800145c <main+0x31c>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f9ae 	bl	8001610 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80012b4:	f000 fad8 	bl	8001868 <SSD1306_UpdateScreen>
		HAL_Delay(2000);
 80012b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012bc:	f001 fc38 	bl	8002b30 <HAL_Delay>

		SSD1306_Clear();
 80012c0:	f000 ff8c 	bl	80021dc <SSD1306_Clear>
		SSD1306_GotoXY(10,10);
 80012c4:	210a      	movs	r1, #10
 80012c6:	200a      	movs	r0, #10
 80012c8:	f000 fb72 	bl	80019b0 <SSD1306_GotoXY>
		SSD1306_DrawRectangle(2, 2, 123, 60, WHITE);
 80012cc:	2301      	movs	r3, #1
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	233c      	movs	r3, #60	@ 0x3c
 80012d2:	227b      	movs	r2, #123	@ 0x7b
 80012d4:	2102      	movs	r1, #2
 80012d6:	2002      	movs	r0, #2
 80012d8:	f000 fd1b 	bl	8001d12 <SSD1306_DrawRectangle>
		SSD1306_Puts("Click Get Started...", &Font_7x10, WHITE);
 80012dc:	2201      	movs	r2, #1
 80012de:	4957      	ldr	r1, [pc, #348]	@ (800143c <main+0x2fc>)
 80012e0:	485f      	ldr	r0, [pc, #380]	@ (8001460 <main+0x320>)
 80012e2:	f000 fbf9 	bl	8001ad8 <SSD1306_Puts>
		SSD1306_GotoXY(48,38);
 80012e6:	2126      	movs	r1, #38	@ 0x26
 80012e8:	2030      	movs	r0, #48	@ 0x30
 80012ea:	f000 fb61 	bl	80019b0 <SSD1306_GotoXY>
		SSD1306_Puts("^-^",&Font_7x10,WHITE);
 80012ee:	2201      	movs	r2, #1
 80012f0:	4952      	ldr	r1, [pc, #328]	@ (800143c <main+0x2fc>)
 80012f2:	485c      	ldr	r0, [pc, #368]	@ (8001464 <main+0x324>)
 80012f4:	f000 fbf0 	bl	8001ad8 <SSD1306_Puts>
		SSD1306_DrawCircle(60, 38, 16, WHITE);
 80012f8:	2301      	movs	r3, #1
 80012fa:	2210      	movs	r2, #16
 80012fc:	2126      	movs	r1, #38	@ 0x26
 80012fe:	203c      	movs	r0, #60	@ 0x3c
 8001300:	f000 fdbd 	bl	8001e7e <SSD1306_DrawCircle>
		SSD1306_UpdateScreen();
 8001304:	f000 fab0 	bl	8001868 <SSD1306_UpdateScreen>
		HAL_Delay(2000);
 8001308:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800130c:	f001 fc10 	bl	8002b30 <HAL_Delay>

	  SSD1306_Clear();
 8001310:	f000 ff64 	bl	80021dc <SSD1306_Clear>
	  SSD1306_DrawRectangle(2, 2, 123, 60, WHITE);
 8001314:	2301      	movs	r3, #1
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	233c      	movs	r3, #60	@ 0x3c
 800131a:	227b      	movs	r2, #123	@ 0x7b
 800131c:	2102      	movs	r1, #2
 800131e:	2002      	movs	r0, #2
 8001320:	f000 fcf7 	bl	8001d12 <SSD1306_DrawRectangle>

	  SSD1306_GotoXY(10, 10);
 8001324:	210a      	movs	r1, #10
 8001326:	200a      	movs	r0, #10
 8001328:	f000 fb42 	bl	80019b0 <SSD1306_GotoXY>
	  SSD1306_Puts("Getting Started..", &Font_7x10, WHITE);
 800132c:	2201      	movs	r2, #1
 800132e:	4943      	ldr	r1, [pc, #268]	@ (800143c <main+0x2fc>)
 8001330:	484d      	ldr	r0, [pc, #308]	@ (8001468 <main+0x328>)
 8001332:	f000 fbd1 	bl	8001ad8 <SSD1306_Puts>
	  SSD1306_DrawCircle(95, 35, 16, WHITE);
 8001336:	2301      	movs	r3, #1
 8001338:	2210      	movs	r2, #16
 800133a:	2123      	movs	r1, #35	@ 0x23
 800133c:	205f      	movs	r0, #95	@ 0x5f
 800133e:	f000 fd9e 	bl	8001e7e <SSD1306_DrawCircle>
	  SSD1306_UpdateScreen();
 8001342:	f000 fa91 	bl	8001868 <SSD1306_UpdateScreen>

	  HAL_Delay(1000); // Dừng lại để người dùng có thể đọc thông báo ban đầu.
 8001346:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800134a:	f001 fbf1 	bl	8002b30 <HAL_Delay>

	  // Khởi tạo biến để lưu tiến trình.
	  uint8_t progress1 = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	77bb      	strb	r3, [r7, #30]

	    	  	  while (progress1 <= 100) {
 8001352:	e03b      	b.n	80013cc <main+0x28c>
	    	  	      // Vẽ lại giao diện
	    	  	      SSD1306_Clear();
 8001354:	f000 ff42 	bl	80021dc <SSD1306_Clear>
	    	  	      SSD1306_DrawRectangle(2, 2, 123, 60, WHITE);
 8001358:	2301      	movs	r3, #1
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	233c      	movs	r3, #60	@ 0x3c
 800135e:	227b      	movs	r2, #123	@ 0x7b
 8001360:	2102      	movs	r1, #2
 8001362:	2002      	movs	r0, #2
 8001364:	f000 fcd5 	bl	8001d12 <SSD1306_DrawRectangle>
	    	  	      SSD1306_GotoXY(10, 10);
 8001368:	210a      	movs	r1, #10
 800136a:	200a      	movs	r0, #10
 800136c:	f000 fb20 	bl	80019b0 <SSD1306_GotoXY>
	    	  	      SSD1306_Puts("Loading...", &Font_7x10, WHITE);
 8001370:	2201      	movs	r2, #1
 8001372:	4932      	ldr	r1, [pc, #200]	@ (800143c <main+0x2fc>)
 8001374:	483d      	ldr	r0, [pc, #244]	@ (800146c <main+0x32c>)
 8001376:	f000 fbaf 	bl	8001ad8 <SSD1306_Puts>

	    	  	      // Vẽ thanh tiến trình.
	    	  	      SSD1306_DrawRectangle(10, 45, 100, 10, WHITE); // Khung của thanh.
 800137a:	2301      	movs	r3, #1
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	230a      	movs	r3, #10
 8001380:	2264      	movs	r2, #100	@ 0x64
 8001382:	212d      	movs	r1, #45	@ 0x2d
 8001384:	200a      	movs	r0, #10
 8001386:	f000 fcc4 	bl	8001d12 <SSD1306_DrawRectangle>
	    	  	      SSD1306_DrawFilledRectangle(10, 45, progress1, 10, WHITE); // Thanh tiến trình thực tế.
 800138a:	7fbb      	ldrb	r3, [r7, #30]
 800138c:	b29a      	uxth	r2, r3
 800138e:	2301      	movs	r3, #1
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	230a      	movs	r3, #10
 8001394:	212d      	movs	r1, #45	@ 0x2d
 8001396:	200a      	movs	r0, #10
 8001398:	f000 fd25 	bl	8001de6 <SSD1306_DrawFilledRectangle>

	    	  	      // Hiển thị phần trăm.
	    	  	      char progressStr[5];
	    	  	      sprintf(progressStr, "%3d%%", progress1); // Định dạng phần trăm.
 800139c:	7fba      	ldrb	r2, [r7, #30]
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4933      	ldr	r1, [pc, #204]	@ (8001470 <main+0x330>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 f99e 	bl	80046e4 <siprintf>
	    	  	      SSD1306_GotoXY(80, 30);
 80013a8:	211e      	movs	r1, #30
 80013aa:	2050      	movs	r0, #80	@ 0x50
 80013ac:	f000 fb00 	bl	80019b0 <SSD1306_GotoXY>
	    	  	      SSD1306_Puts(progressStr, &Font_7x10, WHITE);
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2201      	movs	r2, #1
 80013b4:	4921      	ldr	r1, [pc, #132]	@ (800143c <main+0x2fc>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fb8e 	bl	8001ad8 <SSD1306_Puts>

	    	  	      // Cập nhật màn hình.
	    	  	      SSD1306_UpdateScreen();
 80013bc:	f000 fa54 	bl	8001868 <SSD1306_UpdateScreen>

	    	  	      // Tăng tiến trình và dừng một khoảng thời gian.
	    	  	      progress1++;
 80013c0:	7fbb      	ldrb	r3, [r7, #30]
 80013c2:	3301      	adds	r3, #1
 80013c4:	77bb      	strb	r3, [r7, #30]
	    	  	      HAL_Delay(50); // Điều chỉnh thời gian để thanh tiến trình chạy chậm hoặc nhanh.
 80013c6:	2032      	movs	r0, #50	@ 0x32
 80013c8:	f001 fbb2 	bl	8002b30 <HAL_Delay>
	    	  	  while (progress1 <= 100) {
 80013cc:	7fbb      	ldrb	r3, [r7, #30]
 80013ce:	2b64      	cmp	r3, #100	@ 0x64
 80013d0:	d9c0      	bls.n	8001354 <main+0x214>
	    	  	  }

	  // Xóa màn hình và hiển thị thông báo "Let's Go".
	  SSD1306_Clear();
 80013d2:	f000 ff03 	bl	80021dc <SSD1306_Clear>
	  SSD1306_GotoXY(30, 25); // Căn giữa dòng chữ trên màn hình (tùy chỉnh vị trí phù hợp với kích thước màn hình).
 80013d6:	2119      	movs	r1, #25
 80013d8:	201e      	movs	r0, #30
 80013da:	f000 fae9 	bl	80019b0 <SSD1306_GotoXY>
	  SSD1306_Puts("Let's Go!", &Font_11x18, WHITE); // Dùng font lớn hơn để hiển thị rõ ràng.
 80013de:	2201      	movs	r2, #1
 80013e0:	4912      	ldr	r1, [pc, #72]	@ (800142c <main+0x2ec>)
 80013e2:	4824      	ldr	r0, [pc, #144]	@ (8001474 <main+0x334>)
 80013e4:	f000 fb78 	bl	8001ad8 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80013e8:	f000 fa3e 	bl	8001868 <SSD1306_UpdateScreen>
	  HAL_Delay(2000); // Giữ thông báo trên màn hình trong 2 giây.
 80013ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013f0:	f001 fb9e 	bl	8002b30 <HAL_Delay>


	 SSD1306_Clear();
 80013f4:	f000 fef2 	bl	80021dc <SSD1306_Clear>
	 SSD1306_DrawBitmap(0, 0, imagen, 128, 60, WHITE);
 80013f8:	2301      	movs	r3, #1
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	233c      	movs	r3, #60	@ 0x3c
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	4a1d      	ldr	r2, [pc, #116]	@ (8001478 <main+0x338>)
 8001404:	2100      	movs	r1, #0
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f902 	bl	8001610 <SSD1306_DrawBitmap>
	 SSD1306_UpdateScreen();
 800140c:	f000 fa2c 	bl	8001868 <SSD1306_UpdateScreen>
	 HAL_Delay(1000);
 8001410:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001414:	f001 fb8c 	bl	8002b30 <HAL_Delay>

	 // Lặp qua từng ảnh để đảm bảo không có vùng đen
	 const uint8_t *images[] = { imagen5, imagen6};
 8001418:	4a18      	ldr	r2, [pc, #96]	@ (800147c <main+0x33c>)
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001422:	e883 0003 	stmia.w	r3, {r0, r1}
	 for (int i = 0; i < 2; i++) {
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	e043      	b.n	80014b4 <main+0x374>
 800142c:	20000008 	.word	0x20000008
 8001430:	080068b8 	.word	0x080068b8
 8001434:	20000010 	.word	0x20000010
 8001438:	080068c0 	.word	0x080068c0
 800143c:	20000000 	.word	0x20000000
 8001440:	080068c8 	.word	0x080068c8
 8001444:	080068d4 	.word	0x080068d4
 8001448:	080068e4 	.word	0x080068e4
 800144c:	080068f4 	.word	0x080068f4
 8001450:	080068fc 	.word	0x080068fc
 8001454:	08006910 	.word	0x08006910
 8001458:	200000ac 	.word	0x200000ac
 800145c:	0800958c 	.word	0x0800958c
 8001460:	08006918 	.word	0x08006918
 8001464:	08006930 	.word	0x08006930
 8001468:	08006934 	.word	0x08006934
 800146c:	08006948 	.word	0x08006948
 8001470:	08006954 	.word	0x08006954
 8001474:	0800695c 	.word	0x0800695c
 8001478:	0800918c 	.word	0x0800918c
 800147c:	08006970 	.word	0x08006970
		// SSD1306_ScrollRight(0, 0x0F);  // Kích hoạt scroll trước khi vẽ
		 SSD1306_Clear();  // Xóa toàn bộ để tránh vùng đen
 8001480:	f000 feac 	bl	80021dc <SSD1306_Clear>
		 SSD1306_DrawBitmap(0, 0, images[i], 128, 60, WHITE);
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	3320      	adds	r3, #32
 800148a:	443b      	add	r3, r7
 800148c:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8001490:	2301      	movs	r3, #1
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	233c      	movs	r3, #60	@ 0x3c
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	2100      	movs	r1, #0
 800149c:	2000      	movs	r0, #0
 800149e:	f000 f8b7 	bl	8001610 <SSD1306_DrawBitmap>
		 SSD1306_UpdateScreen();
 80014a2:	f000 f9e1 	bl	8001868 <SSD1306_UpdateScreen>
		 HAL_Delay(3000);
 80014a6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014aa:	f001 fb41 	bl	8002b30 <HAL_Delay>
	 for (int i = 0; i < 2; i++) {
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	dde2      	ble.n	8001480 <main+0x340>
	 }
	 SSD1306_Clear();
 80014ba:	f000 fe8f 	bl	80021dc <SSD1306_Clear>
	 SSD1306_GotoXY(30, 25);
 80014be:	2119      	movs	r1, #25
 80014c0:	201e      	movs	r0, #30
 80014c2:	f000 fa75 	bl	80019b0 <SSD1306_GotoXY>
	 SSD1306_Puts("Go Go!", &Font_11x18, WHITE); // Dùng font lớn hơn để hiển thị rõ ràng.
 80014c6:	2201      	movs	r2, #1
 80014c8:	4923      	ldr	r1, [pc, #140]	@ (8001558 <main+0x418>)
 80014ca:	4824      	ldr	r0, [pc, #144]	@ (800155c <main+0x41c>)
 80014cc:	f000 fb04 	bl	8001ad8 <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 80014d0:	f000 f9ca 	bl	8001868 <SSD1306_UpdateScreen>
	 HAL_Delay(2000);
 80014d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014d8:	f001 fb2a 	bl	8002b30 <HAL_Delay>
	 SSD1306_Stopscroll();
 80014dc:	f000 f88f 	bl	80015fe <SSD1306_Stopscroll>
	 HAL_Delay(1000);
 80014e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014e4:	f001 fb24 	bl	8002b30 <HAL_Delay>
	 SSD1306_Clear();
 80014e8:	f000 fe78 	bl	80021dc <SSD1306_Clear>
	 srand(HAL_GetTick()); // Tạo seed ngẫu nhiên cho rand()
 80014ec:	f001 fb16 	bl	8002b1c <HAL_GetTick>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 ffc8 	bl	8004488 <srand>
  while (1)
  {
    /* USER CODE END WHILE */
	  control_pacman();
 80014f8:	f7ff fccc 	bl	8000e94 <control_pacman>
	     draw_game();
 80014fc:	f7ff fe04 	bl	8001108 <draw_game>
	     // Kiểm tra va chạm với Pellet và xóa Pellet nếu có va chạm
	         int pellet_index = check_collision_with_pellet(pacman_x, pacman_y);
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <main+0x420>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <main+0x424>)
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fbce 	bl	8000cac <check_collision_with_pellet>
 8001510:	6178      	str	r0, [r7, #20]
	         if (pellet_index != -1) {
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d002      	beq.n	8001520 <main+0x3e0>
	             remove_pellet(pellet_index);  // Pellet sẽ bị xóa ngay lập tức
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff fbee 	bl	8000cfc <remove_pellet>
	         }

	         // Vẽ lại màn hình
	         draw_game();
 8001520:	f7ff fdf2 	bl	8001108 <draw_game>

	         // Kiểm tra nếu không còn Pellet nào
	         if (!are_pellets_left()) {
 8001524:	f7ff fdb0 	bl	8001088 <are_pellets_left>
 8001528:	4603      	mov	r3, r0
 800152a:	f083 0301 	eor.w	r3, r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00d      	beq.n	8001550 <main+0x410>
	             display_win_message();  // Hiển thị thông báo "You Win"
 8001534:	f7ff fdce 	bl	80010d4 <display_win_message>
	             HAL_Delay(3000);  // Delay 3 giây trước khi reset hoặc dừng game
 8001538:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800153c:	f001 faf8 	bl	8002b30 <HAL_Delay>

	             // Reset lại game (hoặc dừng game)
	             generate_pellets(); // Tạo lại các pellet
 8001540:	f7ff fb22 	bl	8000b88 <generate_pellets>
	             pacman_x = 1; // Đặt lại vị trí Pac-Man
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <main+0x420>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]
	             pacman_y = 1;
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <main+0x424>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]
	         }

	         HAL_Delay(100); // Delay để điều chỉnh tốc độ vòng lặp
 8001550:	2064      	movs	r0, #100	@ 0x64
 8001552:	f001 faed 	bl	8002b30 <HAL_Delay>
  {
 8001556:	e7cf      	b.n	80014f8 <main+0x3b8>
 8001558:	20000008 	.word	0x20000008
 800155c:	08006968 	.word	0x08006968
 8001560:	20000018 	.word	0x20000018
 8001564:	2000001c 	.word	0x2000001c

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b090      	sub	sp, #64	@ 0x40
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	2228      	movs	r2, #40	@ 0x28
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f003 f917 	bl	80047aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fb6d 	bl	8003c90 <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015bc:	f000 f819 	bl	80015f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2102      	movs	r1, #2
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fdda 	bl	8004194 <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015e6:	f000 f804 	bl	80015f2 <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	3740      	adds	r7, #64	@ 0x40
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f6:	b672      	cpsid	i
}
 80015f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015fa:	bf00      	nop
 80015fc:	e7fd      	b.n	80015fa <Error_Handler+0x8>

080015fe <SSD1306_Stopscroll>:
	SSD1306_WRITECOMMAND(0x01);
	SSD1306_WRITECOMMAND(SSD1306_ACTIVATE_SCROLL);
}

void SSD1306_Stopscroll(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001602:	222e      	movs	r2, #46	@ 0x2e
 8001604:	2100      	movs	r1, #0
 8001606:	2078      	movs	r0, #120	@ 0x78
 8001608:	f000 fe6c 	bl	80022e4 <SSD1306_I2C_Write>
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}

08001610 <SSD1306_DrawBitmap>:
	if(i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
	else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
}

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60ba      	str	r2, [r7, #8]
 8001618:	461a      	mov	r2, r3
 800161a:	4603      	mov	r3, r0
 800161c:	81fb      	strh	r3, [r7, #14]
 800161e:	460b      	mov	r3, r1
 8001620:	81bb      	strh	r3, [r7, #12]
 8001622:	4613      	mov	r3, r2
 8001624:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8;
 8001626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162a:	3307      	adds	r3, #7
 800162c:	2b00      	cmp	r3, #0
 800162e:	da00      	bge.n	8001632 <SSD1306_DrawBitmap+0x22>
 8001630:	3307      	adds	r3, #7
 8001632:	10db      	asrs	r3, r3, #3
 8001634:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]
    for(int16_t j=0; j<h; j++, y++)
 800163a:	2300      	movs	r3, #0
 800163c:	82bb      	strh	r3, [r7, #20]
 800163e:	e043      	b.n	80016c8 <SSD1306_DrawBitmap+0xb8>
    {
        for(int16_t i=0; i<w; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	827b      	strh	r3, [r7, #18]
 8001644:	e02e      	b.n	80016a4 <SSD1306_DrawBitmap+0x94>
        {
            if(i & 7)
 8001646:	8a7b      	ldrh	r3, [r7, #18]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
 8001656:	e012      	b.n	800167e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001658:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800165c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001660:	fb03 f202 	mul.w	r2, r3, r2
 8001664:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001668:	2b00      	cmp	r3, #0
 800166a:	da00      	bge.n	800166e <SSD1306_DrawBitmap+0x5e>
 800166c:	3307      	adds	r3, #7
 800166e:	10db      	asrs	r3, r3, #3
 8001670:	b21b      	sxth	r3, r3
 8001672:	4413      	add	r3, r2
 8001674:	461a      	mov	r2, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	4413      	add	r3, r2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800167e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001682:	2b00      	cmp	r3, #0
 8001684:	da08      	bge.n	8001698 <SSD1306_DrawBitmap+0x88>
 8001686:	89fa      	ldrh	r2, [r7, #14]
 8001688:	8a7b      	ldrh	r3, [r7, #18]
 800168a:	4413      	add	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	89b9      	ldrh	r1, [r7, #12]
 8001690:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f92e 	bl	80018f4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800169c:	b29b      	uxth	r3, r3
 800169e:	3301      	adds	r3, #1
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	827b      	strh	r3, [r7, #18]
 80016a4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbca      	blt.n	8001646 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80016b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	82bb      	strh	r3, [r7, #20]
 80016bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	81bb      	strh	r3, [r7, #12]
 80016c8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbb5      	blt.n	8001640 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <SSD1306_Init>:

uint8_t SSD1306_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 80016e6:	f000 fd83 	bl	80021f0 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK){
 80016ea:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80016ee:	2201      	movs	r2, #1
 80016f0:	2178      	movs	r1, #120	@ 0x78
 80016f2:	485b      	ldr	r0, [pc, #364]	@ (8001860 <SSD1306_Init+0x180>)
 80016f4:	f001 ff44 	bl	8003580 <HAL_I2C_IsDeviceReady>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SSD1306_Init+0x22>
		return 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	e0a9      	b.n	8001856 <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 8001702:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001706:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001708:	e002      	b.n	8001710 <SSD1306_Init+0x30>
		p--;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3b01      	subs	r3, #1
 800170e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f9      	bne.n	800170a <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 8001716:	22ae      	movs	r2, #174	@ 0xae
 8001718:	2100      	movs	r1, #0
 800171a:	2078      	movs	r0, #120	@ 0x78
 800171c:	f000 fde2 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001720:	2220      	movs	r2, #32
 8001722:	2100      	movs	r1, #0
 8001724:	2078      	movs	r0, #120	@ 0x78
 8001726:	f000 fddd 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 800172a:	2210      	movs	r2, #16
 800172c:	2100      	movs	r1, #0
 800172e:	2078      	movs	r0, #120	@ 0x78
 8001730:	f000 fdd8 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8001734:	22b0      	movs	r2, #176	@ 0xb0
 8001736:	2100      	movs	r1, #0
 8001738:	2078      	movs	r0, #120	@ 0x78
 800173a:	f000 fdd3 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 800173e:	22c8      	movs	r2, #200	@ 0xc8
 8001740:	2100      	movs	r1, #0
 8001742:	2078      	movs	r0, #120	@ 0x78
 8001744:	f000 fdce 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2078      	movs	r0, #120	@ 0x78
 800174e:	f000 fdc9 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001752:	2210      	movs	r2, #16
 8001754:	2100      	movs	r1, #0
 8001756:	2078      	movs	r0, #120	@ 0x78
 8001758:	f000 fdc4 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 800175c:	2240      	movs	r2, #64	@ 0x40
 800175e:	2100      	movs	r1, #0
 8001760:	2078      	movs	r0, #120	@ 0x78
 8001762:	f000 fdbf 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 8001766:	2281      	movs	r2, #129	@ 0x81
 8001768:	2100      	movs	r1, #0
 800176a:	2078      	movs	r0, #120	@ 0x78
 800176c:	f000 fdba 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001770:	22ff      	movs	r2, #255	@ 0xff
 8001772:	2100      	movs	r1, #0
 8001774:	2078      	movs	r0, #120	@ 0x78
 8001776:	f000 fdb5 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 800177a:	22a1      	movs	r2, #161	@ 0xa1
 800177c:	2100      	movs	r1, #0
 800177e:	2078      	movs	r0, #120	@ 0x78
 8001780:	f000 fdb0 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8001784:	22a6      	movs	r2, #166	@ 0xa6
 8001786:	2100      	movs	r1, #0
 8001788:	2078      	movs	r0, #120	@ 0x78
 800178a:	f000 fdab 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 800178e:	22a8      	movs	r2, #168	@ 0xa8
 8001790:	2100      	movs	r1, #0
 8001792:	2078      	movs	r0, #120	@ 0x78
 8001794:	f000 fda6 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8001798:	223f      	movs	r2, #63	@ 0x3f
 800179a:	2100      	movs	r1, #0
 800179c:	2078      	movs	r0, #120	@ 0x78
 800179e:	f000 fda1 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 80017a2:	22a4      	movs	r2, #164	@ 0xa4
 80017a4:	2100      	movs	r1, #0
 80017a6:	2078      	movs	r0, #120	@ 0x78
 80017a8:	f000 fd9c 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 80017ac:	22d3      	movs	r2, #211	@ 0xd3
 80017ae:	2100      	movs	r1, #0
 80017b0:	2078      	movs	r0, #120	@ 0x78
 80017b2:	f000 fd97 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2078      	movs	r0, #120	@ 0x78
 80017bc:	f000 fd92 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 80017c0:	22d5      	movs	r2, #213	@ 0xd5
 80017c2:	2100      	movs	r1, #0
 80017c4:	2078      	movs	r0, #120	@ 0x78
 80017c6:	f000 fd8d 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 80017ca:	22f0      	movs	r2, #240	@ 0xf0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2078      	movs	r0, #120	@ 0x78
 80017d0:	f000 fd88 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 80017d4:	22d9      	movs	r2, #217	@ 0xd9
 80017d6:	2100      	movs	r1, #0
 80017d8:	2078      	movs	r0, #120	@ 0x78
 80017da:	f000 fd83 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 80017de:	2222      	movs	r2, #34	@ 0x22
 80017e0:	2100      	movs	r1, #0
 80017e2:	2078      	movs	r0, #120	@ 0x78
 80017e4:	f000 fd7e 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 80017e8:	22da      	movs	r2, #218	@ 0xda
 80017ea:	2100      	movs	r1, #0
 80017ec:	2078      	movs	r0, #120	@ 0x78
 80017ee:	f000 fd79 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80017f2:	2212      	movs	r2, #18
 80017f4:	2100      	movs	r1, #0
 80017f6:	2078      	movs	r0, #120	@ 0x78
 80017f8:	f000 fd74 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 80017fc:	22db      	movs	r2, #219	@ 0xdb
 80017fe:	2100      	movs	r1, #0
 8001800:	2078      	movs	r0, #120	@ 0x78
 8001802:	f000 fd6f 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001806:	2220      	movs	r2, #32
 8001808:	2100      	movs	r1, #0
 800180a:	2078      	movs	r0, #120	@ 0x78
 800180c:	f000 fd6a 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8001810:	228d      	movs	r2, #141	@ 0x8d
 8001812:	2100      	movs	r1, #0
 8001814:	2078      	movs	r0, #120	@ 0x78
 8001816:	f000 fd65 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 800181a:	2214      	movs	r2, #20
 800181c:	2100      	movs	r1, #0
 800181e:	2078      	movs	r0, #120	@ 0x78
 8001820:	f000 fd60 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8001824:	22af      	movs	r2, #175	@ 0xaf
 8001826:	2100      	movs	r1, #0
 8001828:	2078      	movs	r0, #120	@ 0x78
 800182a:	f000 fd5b 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800182e:	222e      	movs	r2, #46	@ 0x2e
 8001830:	2100      	movs	r1, #0
 8001832:	2078      	movs	r0, #120	@ 0x78
 8001834:	f000 fd56 	bl	80022e4 <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 8001838:	2000      	movs	r0, #0
 800183a:	f000 f843 	bl	80018c4 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800183e:	f000 f813 	bl	8001868 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001842:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <SSD1306_Init+0x184>)
 8001844:	2200      	movs	r2, #0
 8001846:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <SSD1306_Init+0x184>)
 800184a:	2200      	movs	r2, #0
 800184c:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <SSD1306_Init+0x184>)
 8001850:	2201      	movs	r2, #1
 8001852:	715a      	strb	r2, [r3, #5]
	return 1;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200004cc 	.word	0x200004cc
 8001864:	200004c4 	.word	0x200004c4

08001868 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
	uint8_t m;
	for(m=0; m<8; m++)
 800186e:	2300      	movs	r3, #0
 8001870:	71fb      	strb	r3, [r7, #7]
 8001872:	e01d      	b.n	80018b0 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	3b50      	subs	r3, #80	@ 0x50
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	2100      	movs	r1, #0
 800187e:	2078      	movs	r0, #120	@ 0x78
 8001880:	f000 fd30 	bl	80022e4 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	2078      	movs	r0, #120	@ 0x78
 800188a:	f000 fd2b 	bl	80022e4 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800188e:	2210      	movs	r2, #16
 8001890:	2100      	movs	r1, #0
 8001892:	2078      	movs	r0, #120	@ 0x78
 8001894:	f000 fd26 	bl	80022e4 <SSD1306_I2C_Write>
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	01db      	lsls	r3, r3, #7
 800189c:	4a08      	ldr	r2, [pc, #32]	@ (80018c0 <SSD1306_UpdateScreen+0x58>)
 800189e:	441a      	add	r2, r3
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	2140      	movs	r1, #64	@ 0x40
 80018a4:	2078      	movs	r0, #120	@ 0x78
 80018a6:	f000 fcb7 	bl	8002218 <SSD1306_I2C_WriteMulti>
	for(m=0; m<8; m++)
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	3301      	adds	r3, #1
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2b07      	cmp	r3, #7
 80018b4:	d9de      	bls.n	8001874 <SSD1306_UpdateScreen+0xc>
	}
}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200000c4 	.word	0x200000c4

080018c4 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <SSD1306_Fill+0x14>
 80018d4:	2300      	movs	r3, #0
 80018d6:	e000      	b.n	80018da <SSD1306_Fill+0x16>
 80018d8:	23ff      	movs	r3, #255	@ 0xff
 80018da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018de:	4619      	mov	r1, r3
 80018e0:	4803      	ldr	r0, [pc, #12]	@ (80018f0 <SSD1306_Fill+0x2c>)
 80018e2:	f002 ff62 	bl	80047aa <memset>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200000c4 	.word	0x200000c4

080018f4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
 80018fe:	460b      	mov	r3, r1
 8001900:	80bb      	strh	r3, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	807b      	strh	r3, [r7, #2]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	2b7f      	cmp	r3, #127	@ 0x7f
 800190a:	d848      	bhi.n	800199e <SSD1306_DrawPixel+0xaa>
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001910:	d845      	bhi.n	800199e <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8001912:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <SSD1306_DrawPixel+0xb4>)
 8001914:	791b      	ldrb	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	807b      	strh	r3, [r7, #2]
	}

	if(color == WHITE){
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d11a      	bne.n	8001964 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800192e:	88fa      	ldrh	r2, [r7, #6]
 8001930:	88bb      	ldrh	r3, [r7, #4]
 8001932:	08db      	lsrs	r3, r3, #3
 8001934:	b298      	uxth	r0, r3
 8001936:	4603      	mov	r3, r0
 8001938:	01db      	lsls	r3, r3, #7
 800193a:	4413      	add	r3, r2
 800193c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <SSD1306_DrawPixel+0xb8>)
 800193e:	5cd3      	ldrb	r3, [r2, r3]
 8001940:	b25a      	sxtb	r2, r3
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	b25b      	sxtb	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b259      	sxtb	r1, r3
 8001954:	88fa      	ldrh	r2, [r7, #6]
 8001956:	4603      	mov	r3, r0
 8001958:	01db      	lsls	r3, r3, #7
 800195a:	4413      	add	r3, r2
 800195c:	b2c9      	uxtb	r1, r1
 800195e:	4a13      	ldr	r2, [pc, #76]	@ (80019ac <SSD1306_DrawPixel+0xb8>)
 8001960:	54d1      	strb	r1, [r2, r3]
 8001962:	e01d      	b.n	80019a0 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001964:	88fa      	ldrh	r2, [r7, #6]
 8001966:	88bb      	ldrh	r3, [r7, #4]
 8001968:	08db      	lsrs	r3, r3, #3
 800196a:	b298      	uxth	r0, r3
 800196c:	4603      	mov	r3, r0
 800196e:	01db      	lsls	r3, r3, #7
 8001970:	4413      	add	r3, r2
 8001972:	4a0e      	ldr	r2, [pc, #56]	@ (80019ac <SSD1306_DrawPixel+0xb8>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	b25a      	sxtb	r2, r3
 8001978:	88bb      	ldrh	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	2101      	movs	r1, #1
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	b25b      	sxtb	r3, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	b25b      	sxtb	r3, r3
 800198a:	4013      	ands	r3, r2
 800198c:	b259      	sxtb	r1, r3
 800198e:	88fa      	ldrh	r2, [r7, #6]
 8001990:	4603      	mov	r3, r0
 8001992:	01db      	lsls	r3, r3, #7
 8001994:	4413      	add	r3, r2
 8001996:	b2c9      	uxtb	r1, r1
 8001998:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <SSD1306_DrawPixel+0xb8>)
 800199a:	54d1      	strb	r1, [r2, r3]
 800199c:	e000      	b.n	80019a0 <SSD1306_DrawPixel+0xac>
		return;
 800199e:	bf00      	nop
	}
}
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	200004c4 	.word	0x200004c4
 80019ac:	200000c4 	.word	0x200000c4

080019b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	80fb      	strh	r3, [r7, #6]
 80019bc:	4613      	mov	r3, r2
 80019be:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 80019c0:	4a05      	ldr	r2, [pc, #20]	@ (80019d8 <SSD1306_GotoXY+0x28>)
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80019c6:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <SSD1306_GotoXY+0x28>)
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	8053      	strh	r3, [r2, #2]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	200004c4 	.word	0x200004c4

080019dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	80bb      	strh	r3, [r7, #4]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 80019ec:	4b39      	ldr	r3, [pc, #228]	@ (8001ad4 <SSD1306_Putc+0xf8>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80019fa:	dc07      	bgt.n	8001a0c <SSD1306_Putc+0x30>
 80019fc:	4b35      	ldr	r3, [pc, #212]	@ (8001ad4 <SSD1306_Putc+0xf8>)
 80019fe:	885b      	ldrh	r3, [r3, #2]
 8001a00:	461a      	mov	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	785b      	ldrb	r3, [r3, #1]
 8001a06:	4413      	add	r3, r2
 8001a08:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a0a:	dd01      	ble.n	8001a10 <SSD1306_Putc+0x34>
		return 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e05d      	b.n	8001acc <SSD1306_Putc+0xf0>
	}

	for(i=0; i<Font->FontHeight; i++){
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e04b      	b.n	8001aae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	3b20      	subs	r3, #32
 8001a1e:	6839      	ldr	r1, [r7, #0]
 8001a20:	7849      	ldrb	r1, [r1, #1]
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4619      	mov	r1, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	440b      	add	r3, r1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e030      	b.n	8001a9c <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d010      	beq.n	8001a6c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <SSD1306_Putc+0xf8>)
 8001a4c:	881a      	ldrh	r2, [r3, #0]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	b298      	uxth	r0, r3
 8001a56:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <SSD1306_Putc+0xf8>)
 8001a58:	885a      	ldrh	r2, [r3, #2]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	88ba      	ldrh	r2, [r7, #4]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff ff45 	bl	80018f4 <SSD1306_DrawPixel>
 8001a6a:	e014      	b.n	8001a96 <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <SSD1306_Putc+0xf8>)
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b298      	uxth	r0, r3
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <SSD1306_Putc+0xf8>)
 8001a7a:	885a      	ldrh	r2, [r3, #2]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	b299      	uxth	r1, r3
 8001a84:	88bb      	ldrh	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf0c      	ite	eq
 8001a8a:	2301      	moveq	r3, #1
 8001a8c:	2300      	movne	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	f7ff ff2f 	bl	80018f4 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d3c8      	bcc.n	8001a3a <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	785b      	ldrb	r3, [r3, #1]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d3ad      	bcc.n	8001a16 <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <SSD1306_Putc+0xf8>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <SSD1306_Putc+0xf8>)
 8001ac8:	801a      	strh	r2, [r3, #0]
	return ch;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200004c4 	.word	0x200004c4

08001ad8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80fb      	strh	r3, [r7, #6]
	while(*str)
 8001ae6:	e012      	b.n	8001b0e <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	88fa      	ldrh	r2, [r7, #6]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff73 	bl	80019dc <SSD1306_Putc>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461a      	mov	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d002      	beq.n	8001b08 <SSD1306_Puts+0x30>
			return *str;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	e008      	b.n	8001b1a <SSD1306_Puts+0x42>
		}
		str++;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
	while(*str)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1e8      	bne.n	8001ae8 <SSD1306_Puts+0x10>
	}
	return *str;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	781b      	ldrb	r3, [r3, #0]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c)
{
 8001b22:	b590      	push	{r4, r7, lr}
 8001b24:	b087      	sub	sp, #28
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4604      	mov	r4, r0
 8001b2a:	4608      	mov	r0, r1
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4623      	mov	r3, r4
 8001b32:	80fb      	strh	r3, [r7, #6]
 8001b34:	4603      	mov	r3, r0
 8001b36:	80bb      	strh	r3, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	if(x0 >= SSD1306_WIDTH){
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b44:	d901      	bls.n	8001b4a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001b46:	237f      	movs	r3, #127	@ 0x7f
 8001b48:	80fb      	strh	r3, [r7, #6]
	}
	if(x1 >= SSD1306_WIDTH){
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b4e:	d901      	bls.n	8001b54 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001b50:	237f      	movs	r3, #127	@ 0x7f
 8001b52:	807b      	strh	r3, [r7, #2]
	}
	if(y0 >= SSD1306_HEIGHT){
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b58:	d901      	bls.n	8001b5e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001b5a:	233f      	movs	r3, #63	@ 0x3f
 8001b5c:	80bb      	strh	r3, [r7, #4]
	}
	if(y1 >= SSD1306_HEIGHT){
 8001b5e:	883b      	ldrh	r3, [r7, #0]
 8001b60:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b62:	d901      	bls.n	8001b68 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001b64:	233f      	movs	r3, #63	@ 0x3f
 8001b66:	803b      	strh	r3, [r7, #0]
	}
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	887b      	ldrh	r3, [r7, #2]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d205      	bcs.n	8001b7c <SSD1306_DrawLine+0x5a>
 8001b70:	887a      	ldrh	r2, [r7, #2]
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	e004      	b.n	8001b86 <SSD1306_DrawLine+0x64>
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001b88:	88ba      	ldrh	r2, [r7, #4]
 8001b8a:	883b      	ldrh	r3, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d205      	bcs.n	8001b9c <SSD1306_DrawLine+0x7a>
 8001b90:	883a      	ldrh	r2, [r7, #0]
 8001b92:	88bb      	ldrh	r3, [r7, #4]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	e004      	b.n	8001ba6 <SSD1306_DrawLine+0x84>
 8001b9c:	88ba      	ldrh	r2, [r7, #4]
 8001b9e:	883b      	ldrh	r3, [r7, #0]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001ba8:	88fa      	ldrh	r2, [r7, #6]
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d201      	bcs.n	8001bb4 <SSD1306_DrawLine+0x92>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e001      	b.n	8001bb8 <SSD1306_DrawLine+0x96>
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb8:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001bba:	88ba      	ldrh	r2, [r7, #4]
 8001bbc:	883b      	ldrh	r3, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d201      	bcs.n	8001bc6 <SSD1306_DrawLine+0xa4>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e001      	b.n	8001bca <SSD1306_DrawLine+0xa8>
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001bcc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dd06      	ble.n	8001be6 <SSD1306_DrawLine+0xc4>
 8001bd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bdc:	0fda      	lsrs	r2, r3, #31
 8001bde:	4413      	add	r3, r2
 8001be0:	105b      	asrs	r3, r3, #1
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	e006      	b.n	8001bf4 <SSD1306_DrawLine+0xd2>
 8001be6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bea:	0fda      	lsrs	r2, r3, #31
 8001bec:	4413      	add	r3, r2
 8001bee:	105b      	asrs	r3, r3, #1
 8001bf0:	425b      	negs	r3, r3
 8001bf2:	b21b      	sxth	r3, r3
 8001bf4:	82fb      	strh	r3, [r7, #22]

	if(dx == 0){
 8001bf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d128      	bne.n	8001c50 <SSD1306_DrawLine+0x12e>
		if(y1 < y0){
 8001bfe:	883a      	ldrh	r2, [r7, #0]
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d205      	bcs.n	8001c12 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001c06:	883b      	ldrh	r3, [r7, #0]
 8001c08:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c0a:	88bb      	ldrh	r3, [r7, #4]
 8001c0c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c0e:	893b      	ldrh	r3, [r7, #8]
 8001c10:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d205      	bcs.n	8001c26 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c22:	893b      	ldrh	r3, [r7, #8]
 8001c24:	80fb      	strh	r3, [r7, #6]
		}
		for(i=y0; i<=y1; i++){
 8001c26:	88bb      	ldrh	r3, [r7, #4]
 8001c28:	82bb      	strh	r3, [r7, #20]
 8001c2a:	e00b      	b.n	8001c44 <SSD1306_DrawLine+0x122>
			SSD1306_DrawPixel(x0, i, c);
 8001c2c:	8ab9      	ldrh	r1, [r7, #20]
 8001c2e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fe5e 	bl	80018f4 <SSD1306_DrawPixel>
		for(i=y0; i<=y1; i++){
 8001c38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	82bb      	strh	r3, [r7, #20]
 8001c44:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c48:	883b      	ldrh	r3, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	ddee      	ble.n	8001c2c <SSD1306_DrawLine+0x10a>
		}
		return;
 8001c4e:	e05d      	b.n	8001d0c <SSD1306_DrawLine+0x1ea>
	}

	if(dy == 0){
 8001c50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d128      	bne.n	8001caa <SSD1306_DrawLine+0x188>
		if(y1 < y0){
 8001c58:	883a      	ldrh	r2, [r7, #0]
 8001c5a:	88bb      	ldrh	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d205      	bcs.n	8001c6c <SSD1306_DrawLine+0x14a>
			tmp = y1;
 8001c60:	883b      	ldrh	r3, [r7, #0]
 8001c62:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c64:	88bb      	ldrh	r3, [r7, #4]
 8001c66:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c68:	893b      	ldrh	r3, [r7, #8]
 8001c6a:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d205      	bcs.n	8001c80 <SSD1306_DrawLine+0x15e>
			tmp = x1;
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c7c:	893b      	ldrh	r3, [r7, #8]
 8001c7e:	80fb      	strh	r3, [r7, #6]
		}
		for(i = x0; i <= x1; i++){
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	82bb      	strh	r3, [r7, #20]
 8001c84:	e00b      	b.n	8001c9e <SSD1306_DrawLine+0x17c>
			SSD1306_DrawPixel(i, y0, c);
 8001c86:	8abb      	ldrh	r3, [r7, #20]
 8001c88:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c8a:	88b9      	ldrh	r1, [r7, #4]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fe31 	bl	80018f4 <SSD1306_DrawPixel>
		for(i = x0; i <= x1; i++){
 8001c92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	82bb      	strh	r3, [r7, #20]
 8001c9e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	ddee      	ble.n	8001c86 <SSD1306_DrawLine+0x164>
		}
		return;
 8001ca8:	e030      	b.n	8001d0c <SSD1306_DrawLine+0x1ea>
	}

	while(1)
	{
		SSD1306_DrawPixel(x0, y0, c);
 8001caa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001cac:	88b9      	ldrh	r1, [r7, #4]
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fe1f 	bl	80018f4 <SSD1306_DrawPixel>
		if(x0 == x1 && y0 == y1){
 8001cb6:	88fa      	ldrh	r2, [r7, #6]
 8001cb8:	887b      	ldrh	r3, [r7, #2]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d103      	bne.n	8001cc6 <SSD1306_DrawLine+0x1a4>
 8001cbe:	88ba      	ldrh	r2, [r7, #4]
 8001cc0:	883b      	ldrh	r3, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d021      	beq.n	8001d0a <SSD1306_DrawLine+0x1e8>
			break;
		}
		e2 = err;
 8001cc6:	8afb      	ldrh	r3, [r7, #22]
 8001cc8:	817b      	strh	r3, [r7, #10]
		if(e2 > -dx){
 8001cca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cd2:	425b      	negs	r3, r3
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dd08      	ble.n	8001cea <SSD1306_DrawLine+0x1c8>
			err -= dy;
 8001cd8:	8afa      	ldrh	r2, [r7, #22]
 8001cda:	8a3b      	ldrh	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001ce2:	89fa      	ldrh	r2, [r7, #14]
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	80fb      	strh	r3, [r7, #6]
		}
		if(e2 < dy){
 8001cea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dad9      	bge.n	8001caa <SSD1306_DrawLine+0x188>
			err += dx;
 8001cf6:	8afa      	ldrh	r2, [r7, #22]
 8001cf8:	8a7b      	ldrh	r3, [r7, #18]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001d00:	89ba      	ldrh	r2, [r7, #12]
 8001d02:	88bb      	ldrh	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001d08:	e7cf      	b.n	8001caa <SSD1306_DrawLine+0x188>
			break;
 8001d0a:	bf00      	nop
		}
	}
}
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd90      	pop	{r4, r7, pc}

08001d12 <SSD1306_DrawRectangle>:
        }
    }
}

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c)
{
 8001d12:	b590      	push	{r4, r7, lr}
 8001d14:	b085      	sub	sp, #20
 8001d16:	af02      	add	r7, sp, #8
 8001d18:	4604      	mov	r4, r0
 8001d1a:	4608      	mov	r0, r1
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4623      	mov	r3, r4
 8001d22:	80fb      	strh	r3, [r7, #6]
 8001d24:	4603      	mov	r3, r0
 8001d26:	80bb      	strh	r3, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	803b      	strh	r3, [r7, #0]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d34:	d853      	bhi.n	8001dde <SSD1306_DrawRectangle+0xcc>
 8001d36:	88bb      	ldrh	r3, [r7, #4]
 8001d38:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d3a:	d850      	bhi.n	8001dde <SSD1306_DrawRectangle+0xcc>
		return;
	}
	if((x + w) >= SSD1306_WIDTH){
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	4413      	add	r3, r2
 8001d42:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d44:	dd03      	ble.n	8001d4e <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001d4c:	807b      	strh	r3, [r7, #2]
	}
	if((y + h) >= SSD1306_HEIGHT){
 8001d4e:	88ba      	ldrh	r2, [r7, #4]
 8001d50:	883b      	ldrh	r3, [r7, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d56:	dd03      	ble.n	8001d60 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001d58:	88bb      	ldrh	r3, [r7, #4]
 8001d5a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001d5e:	803b      	strh	r3, [r7, #0]
	}
	SSD1306_DrawLine(x, y, x + w, y, c);
 8001d60:	88fa      	ldrh	r2, [r7, #6]
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	4413      	add	r3, r2
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	88bc      	ldrh	r4, [r7, #4]
 8001d6a:	88b9      	ldrh	r1, [r7, #4]
 8001d6c:	88f8      	ldrh	r0, [r7, #6]
 8001d6e:	8b3b      	ldrh	r3, [r7, #24]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4623      	mov	r3, r4
 8001d74:	f7ff fed5 	bl	8001b22 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c);
 8001d78:	88ba      	ldrh	r2, [r7, #4]
 8001d7a:	883b      	ldrh	r3, [r7, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	b299      	uxth	r1, r3
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	4413      	add	r3, r2
 8001d86:	b29c      	uxth	r4, r3
 8001d88:	88ba      	ldrh	r2, [r7, #4]
 8001d8a:	883b      	ldrh	r3, [r7, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	88f8      	ldrh	r0, [r7, #6]
 8001d92:	8b3b      	ldrh	r3, [r7, #24]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	4613      	mov	r3, r2
 8001d98:	4622      	mov	r2, r4
 8001d9a:	f7ff fec2 	bl	8001b22 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);
 8001d9e:	88ba      	ldrh	r2, [r7, #4]
 8001da0:	883b      	ldrh	r3, [r7, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	b29c      	uxth	r4, r3
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	88b9      	ldrh	r1, [r7, #4]
 8001daa:	88f8      	ldrh	r0, [r7, #6]
 8001dac:	8b3b      	ldrh	r3, [r7, #24]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4623      	mov	r3, r4
 8001db2:	f7ff feb6 	bl	8001b22 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c);
 8001db6:	88fa      	ldrh	r2, [r7, #6]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4413      	add	r3, r2
 8001dbc:	b298      	uxth	r0, r3
 8001dbe:	88fa      	ldrh	r2, [r7, #6]
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b29c      	uxth	r4, r3
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	88b9      	ldrh	r1, [r7, #4]
 8001dd0:	8b3b      	ldrh	r3, [r7, #24]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	f7ff fea3 	bl	8001b22 <SSD1306_DrawLine>
 8001ddc:	e000      	b.n	8001de0 <SSD1306_DrawRectangle+0xce>
		return;
 8001dde:	bf00      	nop
}
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}

08001de6 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001de6:	b590      	push	{r4, r7, lr}
 8001de8:	b087      	sub	sp, #28
 8001dea:	af02      	add	r7, sp, #8
 8001dec:	4604      	mov	r4, r0
 8001dee:	4608      	mov	r0, r1
 8001df0:	4611      	mov	r1, r2
 8001df2:	461a      	mov	r2, r3
 8001df4:	4623      	mov	r3, r4
 8001df6:	80fb      	strh	r3, [r7, #6]
 8001df8:	4603      	mov	r3, r0
 8001dfa:	80bb      	strh	r3, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e08:	d835      	bhi.n	8001e76 <SSD1306_DrawFilledRectangle+0x90>
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e0e:	d832      	bhi.n	8001e76 <SSD1306_DrawFilledRectangle+0x90>
		return;
	}
	if((x + w) >= SSD1306_WIDTH){
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	4413      	add	r3, r2
 8001e16:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e18:	dd03      	ble.n	8001e22 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001e20:	807b      	strh	r3, [r7, #2]
	}
	if((y + h) >= SSD1306_HEIGHT){
 8001e22:	88ba      	ldrh	r2, [r7, #4]
 8001e24:	883b      	ldrh	r3, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e2a:	dd03      	ble.n	8001e34 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001e2c:	88bb      	ldrh	r3, [r7, #4]
 8001e2e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001e32:	803b      	strh	r3, [r7, #0]
	}
	for(i=0; i<=h; i++){
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e017      	b.n	8001e6a <SSD1306_DrawFilledRectangle+0x84>
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	88bb      	ldrh	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	b299      	uxth	r1, r3
 8001e44:	88fa      	ldrh	r2, [r7, #6]
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b29c      	uxth	r4, r3
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	88bb      	ldrh	r3, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	88f8      	ldrh	r0, [r7, #6]
 8001e58:	8c3b      	ldrh	r3, [r7, #32]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	4622      	mov	r2, r4
 8001e60:	f7ff fe5f 	bl	8001b22 <SSD1306_DrawLine>
	for(i=0; i<=h; i++){
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	3301      	adds	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	883a      	ldrh	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d2e2      	bcs.n	8001e3a <SSD1306_DrawFilledRectangle+0x54>
 8001e74:	e000      	b.n	8001e78 <SSD1306_DrawFilledRectangle+0x92>
		return;
 8001e76:	bf00      	nop
	}
}
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}

08001e7e <SSD1306_DrawCircle>:
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c)
{
 8001e7e:	b590      	push	{r4, r7, lr}
 8001e80:	b087      	sub	sp, #28
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4604      	mov	r4, r0
 8001e86:	4608      	mov	r0, r1
 8001e88:	4611      	mov	r1, r2
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4623      	mov	r3, r4
 8001e8e:	80fb      	strh	r3, [r7, #6]
 8001e90:	4603      	mov	r3, r0
 8001e92:	80bb      	strh	r3, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	f1c3 0301 	rsb	r3, r3, #1
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	461a      	mov	r2, r3
 8001eae:	03d2      	lsls	r2, r2, #15
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001ec0:	88f8      	ldrh	r0, [r7, #6]
 8001ec2:	88ba      	ldrh	r2, [r7, #4]
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	883a      	ldrh	r2, [r7, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7ff fd11 	bl	80018f4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001ed2:	88f8      	ldrh	r0, [r7, #6]
 8001ed4:	88ba      	ldrh	r2, [r7, #4]
 8001ed6:	887b      	ldrh	r3, [r7, #2]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	883a      	ldrh	r2, [r7, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7ff fd08 	bl	80018f4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001ee4:	88fa      	ldrh	r2, [r7, #6]
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	4413      	add	r3, r2
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	88b9      	ldrh	r1, [r7, #4]
 8001eee:	883a      	ldrh	r2, [r7, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fcff 	bl	80018f4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001ef6:	88fa      	ldrh	r2, [r7, #6]
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	88b9      	ldrh	r1, [r7, #4]
 8001f00:	883a      	ldrh	r2, [r7, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fcf6 	bl	80018f4 <SSD1306_DrawPixel>

    while(x < y){
 8001f08:	e081      	b.n	800200e <SSD1306_DrawCircle+0x190>
        if(f >= 0){
 8001f0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0e      	blt.n	8001f30 <SSD1306_DrawCircle+0xb2>
            y--;
 8001f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001f1e:	8a7b      	ldrh	r3, [r7, #18]
 8001f20:	3302      	adds	r3, #2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001f26:	8afa      	ldrh	r2, [r7, #22]
 8001f28:	8a7b      	ldrh	r3, [r7, #18]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001f30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001f3c:	8abb      	ldrh	r3, [r7, #20]
 8001f3e:	3302      	adds	r3, #2
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001f44:	8afa      	ldrh	r2, [r7, #22]
 8001f46:	8abb      	ldrh	r3, [r7, #20]
 8001f48:	4413      	add	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8001f4e:	88fa      	ldrh	r2, [r7, #6]
 8001f50:	8a3b      	ldrh	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	b298      	uxth	r0, r3
 8001f56:	88ba      	ldrh	r2, [r7, #4]
 8001f58:	89fb      	ldrh	r3, [r7, #14]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	883a      	ldrh	r2, [r7, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7ff fcc7 	bl	80018f4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8001f66:	88fa      	ldrh	r2, [r7, #6]
 8001f68:	8a3b      	ldrh	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	b298      	uxth	r0, r3
 8001f6e:	88ba      	ldrh	r2, [r7, #4]
 8001f70:	89fb      	ldrh	r3, [r7, #14]
 8001f72:	4413      	add	r3, r2
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	883a      	ldrh	r2, [r7, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7ff fcbb 	bl	80018f4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8001f7e:	88fa      	ldrh	r2, [r7, #6]
 8001f80:	8a3b      	ldrh	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	b298      	uxth	r0, r3
 8001f86:	88ba      	ldrh	r2, [r7, #4]
 8001f88:	89fb      	ldrh	r3, [r7, #14]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	883a      	ldrh	r2, [r7, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7ff fcaf 	bl	80018f4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8001f96:	88fa      	ldrh	r2, [r7, #6]
 8001f98:	8a3b      	ldrh	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	b298      	uxth	r0, r3
 8001f9e:	88ba      	ldrh	r2, [r7, #4]
 8001fa0:	89fb      	ldrh	r3, [r7, #14]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	883a      	ldrh	r2, [r7, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7ff fca3 	bl	80018f4 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8001fae:	88fa      	ldrh	r2, [r7, #6]
 8001fb0:	89fb      	ldrh	r3, [r7, #14]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b298      	uxth	r0, r3
 8001fb6:	88ba      	ldrh	r2, [r7, #4]
 8001fb8:	8a3b      	ldrh	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	883a      	ldrh	r2, [r7, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7ff fc97 	bl	80018f4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	89fb      	ldrh	r3, [r7, #14]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	b298      	uxth	r0, r3
 8001fce:	88ba      	ldrh	r2, [r7, #4]
 8001fd0:	8a3b      	ldrh	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	883a      	ldrh	r2, [r7, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7ff fc8b 	bl	80018f4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001fde:	88fa      	ldrh	r2, [r7, #6]
 8001fe0:	89fb      	ldrh	r3, [r7, #14]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b298      	uxth	r0, r3
 8001fe6:	88ba      	ldrh	r2, [r7, #4]
 8001fe8:	8a3b      	ldrh	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	883a      	ldrh	r2, [r7, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7ff fc7f 	bl	80018f4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001ff6:	88fa      	ldrh	r2, [r7, #6]
 8001ff8:	89fb      	ldrh	r3, [r7, #14]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	b298      	uxth	r0, r3
 8001ffe:	88ba      	ldrh	r2, [r7, #4]
 8002000:	8a3b      	ldrh	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	b29b      	uxth	r3, r3
 8002006:	883a      	ldrh	r2, [r7, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	f7ff fc73 	bl	80018f4 <SSD1306_DrawPixel>
    while(x < y){
 800200e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002012:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002016:	429a      	cmp	r2, r3
 8002018:	f6ff af77 	blt.w	8001f0a <SSD1306_DrawCircle+0x8c>
    }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}

08002026 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c)
{
 8002026:	b590      	push	{r4, r7, lr}
 8002028:	b089      	sub	sp, #36	@ 0x24
 800202a:	af02      	add	r7, sp, #8
 800202c:	4604      	mov	r4, r0
 800202e:	4608      	mov	r0, r1
 8002030:	4611      	mov	r1, r2
 8002032:	461a      	mov	r2, r3
 8002034:	4623      	mov	r3, r4
 8002036:	80fb      	strh	r3, [r7, #6]
 8002038:	4603      	mov	r3, r0
 800203a:	80bb      	strh	r3, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	f1c3 0301 	rsb	r3, r3, #1
 800204a:	b29b      	uxth	r3, r3
 800204c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800204e:	2301      	movs	r3, #1
 8002050:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	461a      	mov	r2, r3
 8002056:	03d2      	lsls	r2, r2, #15
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	b29b      	uxth	r3, r3
 800205e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002068:	88f8      	ldrh	r0, [r7, #6]
 800206a:	88ba      	ldrh	r2, [r7, #4]
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	4413      	add	r3, r2
 8002070:	b29b      	uxth	r3, r3
 8002072:	883a      	ldrh	r2, [r7, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f7ff fc3d 	bl	80018f4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 800207a:	88f8      	ldrh	r0, [r7, #6]
 800207c:	88ba      	ldrh	r2, [r7, #4]
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	b29b      	uxth	r3, r3
 8002084:	883a      	ldrh	r2, [r7, #0]
 8002086:	4619      	mov	r1, r3
 8002088:	f7ff fc34 	bl	80018f4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800208c:	88fa      	ldrh	r2, [r7, #6]
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	4413      	add	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	88b9      	ldrh	r1, [r7, #4]
 8002096:	883a      	ldrh	r2, [r7, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fc2b 	bl	80018f4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	88b9      	ldrh	r1, [r7, #4]
 80020a8:	883a      	ldrh	r2, [r7, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fc22 	bl	80018f4 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 80020b0:	88fa      	ldrh	r2, [r7, #6]
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	b298      	uxth	r0, r3
 80020b8:	88b9      	ldrh	r1, [r7, #4]
 80020ba:	88fa      	ldrh	r2, [r7, #6]
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	4413      	add	r3, r2
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	88bc      	ldrh	r4, [r7, #4]
 80020c4:	883b      	ldrh	r3, [r7, #0]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4623      	mov	r3, r4
 80020ca:	f7ff fd2a 	bl	8001b22 <SSD1306_DrawLine>

    while(x < y){
 80020ce:	e079      	b.n	80021c4 <SSD1306_DrawFilledCircle+0x19e>
        if(f >= 0){
 80020d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0e      	blt.n	80020f6 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 80020d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80020e4:	8a7b      	ldrh	r3, [r7, #18]
 80020e6:	3302      	adds	r3, #2
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80020ec:	8afa      	ldrh	r2, [r7, #22]
 80020ee:	8a7b      	ldrh	r3, [r7, #18]
 80020f0:	4413      	add	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80020f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3301      	adds	r3, #1
 80020fe:	b29b      	uxth	r3, r3
 8002100:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002102:	8abb      	ldrh	r3, [r7, #20]
 8002104:	3302      	adds	r3, #2
 8002106:	b29b      	uxth	r3, r3
 8002108:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800210a:	8afa      	ldrh	r2, [r7, #22]
 800210c:	8abb      	ldrh	r3, [r7, #20]
 800210e:	4413      	add	r3, r2
 8002110:	b29b      	uxth	r3, r3
 8002112:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	8a3b      	ldrh	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	b298      	uxth	r0, r3
 800211c:	88ba      	ldrh	r2, [r7, #4]
 800211e:	89fb      	ldrh	r3, [r7, #14]
 8002120:	4413      	add	r3, r2
 8002122:	b299      	uxth	r1, r3
 8002124:	88fa      	ldrh	r2, [r7, #6]
 8002126:	8a3b      	ldrh	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	b29c      	uxth	r4, r3
 800212c:	88ba      	ldrh	r2, [r7, #4]
 800212e:	89fb      	ldrh	r3, [r7, #14]
 8002130:	4413      	add	r3, r2
 8002132:	b29a      	uxth	r2, r3
 8002134:	883b      	ldrh	r3, [r7, #0]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	4622      	mov	r2, r4
 800213c:	f7ff fcf1 	bl	8001b22 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8002140:	88fa      	ldrh	r2, [r7, #6]
 8002142:	8a3b      	ldrh	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	b298      	uxth	r0, r3
 8002148:	88ba      	ldrh	r2, [r7, #4]
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	b299      	uxth	r1, r3
 8002150:	88fa      	ldrh	r2, [r7, #6]
 8002152:	8a3b      	ldrh	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	b29c      	uxth	r4, r3
 8002158:	88ba      	ldrh	r2, [r7, #4]
 800215a:	89fb      	ldrh	r3, [r7, #14]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	b29a      	uxth	r2, r3
 8002160:	883b      	ldrh	r3, [r7, #0]
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	4622      	mov	r2, r4
 8002168:	f7ff fcdb 	bl	8001b22 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 800216c:	88fa      	ldrh	r2, [r7, #6]
 800216e:	89fb      	ldrh	r3, [r7, #14]
 8002170:	4413      	add	r3, r2
 8002172:	b298      	uxth	r0, r3
 8002174:	88ba      	ldrh	r2, [r7, #4]
 8002176:	8a3b      	ldrh	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	b299      	uxth	r1, r3
 800217c:	88fa      	ldrh	r2, [r7, #6]
 800217e:	89fb      	ldrh	r3, [r7, #14]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	b29c      	uxth	r4, r3
 8002184:	88ba      	ldrh	r2, [r7, #4]
 8002186:	8a3b      	ldrh	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	b29a      	uxth	r2, r3
 800218c:	883b      	ldrh	r3, [r7, #0]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	4622      	mov	r2, r4
 8002194:	f7ff fcc5 	bl	8001b22 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8002198:	88fa      	ldrh	r2, [r7, #6]
 800219a:	89fb      	ldrh	r3, [r7, #14]
 800219c:	4413      	add	r3, r2
 800219e:	b298      	uxth	r0, r3
 80021a0:	88ba      	ldrh	r2, [r7, #4]
 80021a2:	8a3b      	ldrh	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	b299      	uxth	r1, r3
 80021a8:	88fa      	ldrh	r2, [r7, #6]
 80021aa:	89fb      	ldrh	r3, [r7, #14]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b29c      	uxth	r4, r3
 80021b0:	88ba      	ldrh	r2, [r7, #4]
 80021b2:	8a3b      	ldrh	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	883b      	ldrh	r3, [r7, #0]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	4622      	mov	r2, r4
 80021c0:	f7ff fcaf 	bl	8001b22 <SSD1306_DrawLine>
    while(x < y){
 80021c4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80021c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	f6ff af7f 	blt.w	80020d0 <SSD1306_DrawFilledCircle+0xaa>
    }
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd90      	pop	{r4, r7, pc}

080021dc <SSD1306_Clear>:

void SSD1306_Clear(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7ff fb6f 	bl	80018c4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80021e6:	f7ff fb3f 	bl	8001868 <SSD1306_UpdateScreen>
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <SSD1306_I2C_Init+0x24>)
 80021f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021fa:	e002      	b.n	8002202 <SSD1306_I2C_Init+0x12>
		p--;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f9      	bne.n	80021fc <SSD1306_I2C_Init+0xc>
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	0003d090 	.word	0x0003d090

08002218 <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b0c7      	sub	sp, #284	@ 0x11c
 800221c:	af02      	add	r7, sp, #8
 800221e:	4604      	mov	r4, r0
 8002220:	4608      	mov	r0, r1
 8002222:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002226:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800222a:	600a      	str	r2, [r1, #0]
 800222c:	4619      	mov	r1, r3
 800222e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002232:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002236:	4622      	mov	r2, r4
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800223e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002242:	4602      	mov	r2, r0
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800224a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800224e:	460a      	mov	r2, r1
 8002250:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002252:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002256:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800225a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800225e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002262:	7812      	ldrb	r2, [r2, #0]
 8002264:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8002266:	2300      	movs	r3, #0
 8002268:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800226c:	e015      	b.n	800229a <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 800226e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002272:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002276:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	441a      	add	r2, r3
 800227e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002282:	3301      	adds	r3, #1
 8002284:	7811      	ldrb	r1, [r2, #0]
 8002286:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800228a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800228e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8002290:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002294:	3301      	adds	r3, #1
 8002296:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800229a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80022a4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80022a8:	8812      	ldrh	r2, [r2, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d8df      	bhi.n	800226e <SSD1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80022ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022b2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b299      	uxth	r1, r3
 80022ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f107 020c 	add.w	r2, r7, #12
 80022cc:	200a      	movs	r0, #10
 80022ce:	9000      	str	r0, [sp, #0]
 80022d0:	4803      	ldr	r0, [pc, #12]	@ (80022e0 <SSD1306_I2C_WriteMulti+0xc8>)
 80022d2:	f001 f857 	bl	8003384 <HAL_I2C_Master_Transmit>
}
 80022d6:	bf00      	nop
 80022d8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd90      	pop	{r4, r7, pc}
 80022e0:	200004cc 	.word	0x200004cc

080022e4 <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
 80022ee:	460b      	mov	r3, r1
 80022f0:	71bb      	strb	r3, [r7, #6]
 80022f2:	4613      	mov	r3, r2
 80022f4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80022f6:	79bb      	ldrb	r3, [r7, #6]
 80022f8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80022fa:	797b      	ldrb	r3, [r7, #5]
 80022fc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	b299      	uxth	r1, r3
 8002302:	f107 020c 	add.w	r2, r7, #12
 8002306:	230a      	movs	r3, #10
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2302      	movs	r3, #2
 800230c:	4803      	ldr	r0, [pc, #12]	@ (800231c <SSD1306_I2C_Write+0x38>)
 800230e:	f001 f839 	bl	8003384 <HAL_I2C_Master_Transmit>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200004cc 	.word	0x200004cc

08002320 <SSD1306_DrawCirclePart>:
            err += 2 * (y - x) + 1;
        }
    }
}
// Vẽ phần của hình tròn (từ góc bắt đầu đến góc kết thúc)
void SSD1306_DrawCirclePart(int x0, int y0, int radius, int start_angle, int end_angle, SSD1306_COLOR_t color) {
 8002320:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002324:	b088      	sub	sp, #32
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	603b      	str	r3, [r7, #0]
    int i;
    for (i = start_angle; i < end_angle; i++) {
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	e074      	b.n	8002420 <SSD1306_DrawCirclePart+0x100>
        int x = x0 + radius * cos(i * M_PI / 180);  // Chuyển đổi góc từ độ sang radian
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7fe f85c 	bl	80003f4 <__aeabi_i2d>
 800233c:	4604      	mov	r4, r0
 800233e:	460d      	mov	r5, r1
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe f857 	bl	80003f4 <__aeabi_i2d>
 8002346:	4680      	mov	r8, r0
 8002348:	4689      	mov	r9, r1
 800234a:	69f8      	ldr	r0, [r7, #28]
 800234c:	f7fe f852 	bl	80003f4 <__aeabi_i2d>
 8002350:	a339      	add	r3, pc, #228	@ (adr r3, 8002438 <SSD1306_DrawCirclePart+0x118>)
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	f7fe f8b7 	bl	80004c8 <__aeabi_dmul>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	4b36      	ldr	r3, [pc, #216]	@ (8002440 <SSD1306_DrawCirclePart+0x120>)
 8002368:	f7fe f9d8 	bl	800071c <__aeabi_ddiv>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f003 fa74 	bl	8005860 <cos>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4640      	mov	r0, r8
 800237e:	4649      	mov	r1, r9
 8002380:	f7fe f8a2 	bl	80004c8 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4620      	mov	r0, r4
 800238a:	4629      	mov	r1, r5
 800238c:	f7fd fee6 	bl	800015c <__adddf3>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fb30 	bl	80009fc <__aeabi_d2iz>
 800239c:	4603      	mov	r3, r0
 800239e:	61bb      	str	r3, [r7, #24]
        int y = y0 + radius * sin(i * M_PI / 180);  // Chuyển đổi góc từ độ sang radian
 80023a0:	68b8      	ldr	r0, [r7, #8]
 80023a2:	f7fe f827 	bl	80003f4 <__aeabi_i2d>
 80023a6:	4604      	mov	r4, r0
 80023a8:	460d      	mov	r5, r1
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe f822 	bl	80003f4 <__aeabi_i2d>
 80023b0:	4680      	mov	r8, r0
 80023b2:	4689      	mov	r9, r1
 80023b4:	69f8      	ldr	r0, [r7, #28]
 80023b6:	f7fe f81d 	bl	80003f4 <__aeabi_i2d>
 80023ba:	a31f      	add	r3, pc, #124	@ (adr r3, 8002438 <SSD1306_DrawCirclePart+0x118>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe f882 	bl	80004c8 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <SSD1306_DrawCirclePart+0x120>)
 80023d2:	f7fe f9a3 	bl	800071c <__aeabi_ddiv>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f003 fa85 	bl	80058ec <sin>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4640      	mov	r0, r8
 80023e8:	4649      	mov	r1, r9
 80023ea:	f7fe f86d 	bl	80004c8 <__aeabi_dmul>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4620      	mov	r0, r4
 80023f4:	4629      	mov	r1, r5
 80023f6:	f7fd feb1 	bl	800015c <__adddf3>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f7fe fafb 	bl	80009fc <__aeabi_d2iz>
 8002406:	4603      	mov	r3, r0
 8002408:	617b      	str	r3, [r7, #20]
        SSD1306_DrawPixel(x, y, color);  // Vẽ pixel tại vị trí (x, y)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	b29b      	uxth	r3, r3
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	b291      	uxth	r1, r2
 8002412:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fa6d 	bl	80018f4 <SSD1306_DrawPixel>
    for (i = start_angle; i < end_angle; i++) {
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3301      	adds	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002424:	429a      	cmp	r2, r3
 8002426:	db86      	blt.n	8002336 <SSD1306_DrawCirclePart+0x16>
    }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002434:	f3af 8000 	nop.w
 8002438:	54442d18 	.word	0x54442d18
 800243c:	400921fb 	.word	0x400921fb
 8002440:	40668000 	.word	0x40668000

08002444 <DrawRoundedRectangle>:

void DrawRoundedRectangle(int x, int y, int width, int height, int radius, SSD1306_COLOR_t color) {
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b087      	sub	sp, #28
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
    // Vẽ các cạnh thẳng của hình chữ nhật (trừ các góc)
    SSD1306_DrawLine(x + radius, y, x + width - radius * 2, y, color);  // Đoạn trên
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	b29a      	uxth	r2, r3
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	b29b      	uxth	r3, r3
 800245a:	4413      	add	r3, r2
 800245c:	b298      	uxth	r0, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	b299      	uxth	r1, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	b29a      	uxth	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	b29b      	uxth	r3, r3
 800246a:	4413      	add	r3, r2
 800246c:	b29a      	uxth	r2, r3
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	b29b      	uxth	r3, r3
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	b29b      	uxth	r3, r3
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	b29a      	uxth	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	b29c      	uxth	r4, r3
 800247e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	4623      	mov	r3, r4
 8002484:	f7ff fb4d 	bl	8001b22 <SSD1306_DrawLine>
    SSD1306_DrawLine(x + radius, y + height - 1, x + width - radius * 2, y + height - 1, color);  // Đoạn dưới
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	b29a      	uxth	r2, r3
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	b29b      	uxth	r3, r3
 8002490:	4413      	add	r3, r2
 8002492:	b298      	uxth	r0, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	b29a      	uxth	r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	4413      	add	r3, r2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b299      	uxth	r1, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	b29c      	uxth	r4, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	4622      	mov	r2, r4
 80024d4:	f7ff fb25 	bl	8001b22 <SSD1306_DrawLine>
    SSD1306_DrawLine(x, y + radius, x, y + height - radius * 2, color);  // Đoạn trái
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	b298      	uxth	r0, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	b299      	uxth	r1, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	b29c      	uxth	r4, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	b29b      	uxth	r3, r3
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	b29a      	uxth	r2, r3
 8002504:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	4622      	mov	r2, r4
 800250c:	f7ff fb09 	bl	8001b22 <SSD1306_DrawLine>
    SSD1306_DrawLine(x + width - 1, y + radius, x + width - 1, y + height - radius * 2, color);  // Đoạn phải
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4413      	add	r3, r2
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b298      	uxth	r0, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	b29a      	uxth	r2, r3
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	b29b      	uxth	r3, r3
 8002528:	4413      	add	r3, r2
 800252a:	b299      	uxth	r1, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	b29b      	uxth	r3, r3
 8002534:	4413      	add	r3, r2
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29c      	uxth	r4, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	b29a      	uxth	r2, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	4413      	add	r3, r2
 8002546:	b29a      	uxth	r2, r3
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	b29b      	uxth	r3, r3
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	b29b      	uxth	r3, r3
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	b29a      	uxth	r2, r3
 8002554:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	4622      	mov	r2, r4
 800255c:	f7ff fae1 	bl	8001b22 <SSD1306_DrawLine>

    // Vẽ các góc bo tròn
    SSD1306_DrawCirclePart(x + radius, y + radius, radius, 180, 270, color);  // Góc trên-trái
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	18d0      	adds	r0, r2, r3
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	18d1      	adds	r1, r2, r3
 800256c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	23b4      	movs	r3, #180	@ 0xb4
 8002578:	6a3a      	ldr	r2, [r7, #32]
 800257a:	f7ff fed1 	bl	8002320 <SSD1306_DrawCirclePart>
    SSD1306_DrawCirclePart(x + width - radius - 1, y + radius, radius, 270, 360, color);  // Góc trên-phải
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	441a      	add	r2, r3
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	1e58      	subs	r0, r3, #1
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	18d1      	adds	r1, r2, r3
 8002590:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 800259e:	6a3a      	ldr	r2, [r7, #32]
 80025a0:	f7ff febe 	bl	8002320 <SSD1306_DrawCirclePart>
    SSD1306_DrawCirclePart(x + radius, y + height - radius - 1, radius, 90, 180, color);  // Góc dưới-trái
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	18d0      	adds	r0, r2, r3
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	441a      	add	r2, r3
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	1e59      	subs	r1, r3, #1
 80025b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	23b4      	movs	r3, #180	@ 0xb4
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	235a      	movs	r3, #90	@ 0x5a
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	f7ff fead 	bl	8002320 <SSD1306_DrawCirclePart>
    SSD1306_DrawCirclePart(x + width - radius - 1, y + height - radius - 1, radius, 0, 90, color);  // Góc dưới-phải
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	441a      	add	r2, r3
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	1e58      	subs	r0, r3, #1
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	441a      	add	r2, r3
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	1e59      	subs	r1, r3, #1
 80025de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	235a      	movs	r3, #90	@ 0x5a
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2300      	movs	r3, #0
 80025e8:	6a3a      	ldr	r2, [r7, #32]
 80025ea:	f7ff fe99 	bl	8002320 <SSD1306_DrawCirclePart>
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
	...

080025f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025fe:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <HAL_MspInit+0x5c>)
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	4a14      	ldr	r2, [pc, #80]	@ (8002654 <HAL_MspInit+0x5c>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6193      	str	r3, [r2, #24]
 800260a:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <HAL_MspInit+0x5c>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	4b0f      	ldr	r3, [pc, #60]	@ (8002654 <HAL_MspInit+0x5c>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4a0e      	ldr	r2, [pc, #56]	@ (8002654 <HAL_MspInit+0x5c>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002620:	61d3      	str	r3, [r2, #28]
 8002622:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <HAL_MspInit+0x5c>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_MspInit+0x60>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	4a04      	ldr	r2, [pc, #16]	@ (8002658 <HAL_MspInit+0x60>)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	40021000 	.word	0x40021000
 8002658:	40010000 	.word	0x40010000

0800265c <MX_I2C1_Init>:
void MX_I2C1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002660:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002662:	4a13      	ldr	r2, [pc, #76]	@ (80026b0 <MX_I2C1_Init+0x54>)
 8002664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002666:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002668:	4a12      	ldr	r2, [pc, #72]	@ (80026b4 <MX_I2C1_Init+0x58>)
 800266a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800266c:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <MX_I2C1_Init+0x50>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002674:	2200      	movs	r2, #0
 8002676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <MX_I2C1_Init+0x50>)
 800267a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800267e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002680:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002682:	2200      	movs	r2, #0
 8002684:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800268c:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <MX_I2C1_Init+0x50>)
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002692:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002694:	2200      	movs	r2, #0
 8002696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002698:	4804      	ldr	r0, [pc, #16]	@ (80026ac <MX_I2C1_Init+0x50>)
 800269a:	f000 fd2f 	bl	80030fc <HAL_I2C_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026a4:	f7fe ffa5 	bl	80015f2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200004cc 	.word	0x200004cc
 80026b0:	40005400 	.word	0x40005400
 80026b4:	00061a80 	.word	0x00061a80

080026b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a15      	ldr	r2, [pc, #84]	@ (8002728 <HAL_I2C_MspInit+0x70>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d123      	bne.n	8002720 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <HAL_I2C_MspInit+0x74>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a13      	ldr	r2, [pc, #76]	@ (800272c <HAL_I2C_MspInit+0x74>)
 80026de:	f043 0308 	orr.w	r3, r3, #8
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_I2C_MspInit+0x74>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026f0:	23c0      	movs	r3, #192	@ 0xc0
 80026f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f4:	2312      	movs	r3, #18
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	4619      	mov	r1, r3
 8002702:	480b      	ldr	r0, [pc, #44]	@ (8002730 <HAL_I2C_MspInit+0x78>)
 8002704:	f000 fb46 	bl	8002d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002708:	4b08      	ldr	r3, [pc, #32]	@ (800272c <HAL_I2C_MspInit+0x74>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	4a07      	ldr	r2, [pc, #28]	@ (800272c <HAL_I2C_MspInit+0x74>)
 800270e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002712:	61d3      	str	r3, [r2, #28]
 8002714:	4b05      	ldr	r3, [pc, #20]	@ (800272c <HAL_I2C_MspInit+0x74>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002720:	bf00      	nop
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40005400 	.word	0x40005400
 800272c:	40021000 	.word	0x40021000
 8002730:	40010c00 	.word	0x40010c00

08002734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <NMI_Handler+0x4>

0800273c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <HardFault_Handler+0x4>

08002744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <MemManage_Handler+0x4>

0800274c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <BusFault_Handler+0x4>

08002754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <UsageFault_Handler+0x4>

0800275c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002784:	f000 f9b8 	bl	8002af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}

0800278c <handle_pacman_interrupt>:
#define DEBOUNCE_DELAY 200  // Thời gian debounce (200 ms)

uint32_t last_interrupt_time_buttons[4] = {0}; // Dùng cho 4 nút điều hướng (GPIOA: PA0, PA1, PA2, PA3)

void handle_pacman_interrupt(uint8_t button_index, uint16_t pin, int dx, int dy)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	60ba      	str	r2, [r7, #8]
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	4603      	mov	r3, r0
 8002798:	73fb      	strb	r3, [r7, #15]
 800279a:	460b      	mov	r3, r1
 800279c:	81bb      	strh	r3, [r7, #12]
    uint32_t current_time = HAL_GetTick();
 800279e:	f000 f9bd 	bl	8002b1c <HAL_GetTick>
 80027a2:	61f8      	str	r0, [r7, #28]

    if (__HAL_GPIO_EXTI_GET_IT(pin) != RESET) {
 80027a4:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <handle_pacman_interrupt+0x9c>)
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	89bb      	ldrh	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d037      	beq.n	8002820 <handle_pacman_interrupt+0x94>
        __HAL_GPIO_EXTI_CLEAR_IT(pin);  // Xóa cờ ngắt
 80027b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002828 <handle_pacman_interrupt+0x9c>)
 80027b2:	89bb      	ldrh	r3, [r7, #12]
 80027b4:	6153      	str	r3, [r2, #20]

        // Kiểm tra debounce (phải đủ thời gian trễ)
        if (current_time - last_interrupt_time_buttons[button_index] > DEBOUNCE_DELAY) {
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <handle_pacman_interrupt+0xa0>)
 80027ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2bc8      	cmp	r3, #200	@ 0xc8
 80027c4:	d92c      	bls.n	8002820 <handle_pacman_interrupt+0x94>
        	last_interrupt_time_buttons[button_index] = current_time;  // Cập nhật thời gian ngắt cuối cùng
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	4918      	ldr	r1, [pc, #96]	@ (800282c <handle_pacman_interrupt+0xa0>)
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            // Tính vị trí mới của pacman
            int new_x = pacman_x + dx;
 80027d0:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <handle_pacman_interrupt+0xa4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	4413      	add	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
            int new_y = pacman_y + dy;
 80027da:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <handle_pacman_interrupt+0xa8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

            // Kiểm tra nếu vị trí mới không nằm ngoài biên và không phải khối cản
            if (new_x >= 0 && new_x < MAP_WIDTH &&
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	db1a      	blt.n	8002820 <handle_pacman_interrupt+0x94>
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b11      	cmp	r3, #17
 80027ee:	dc17      	bgt.n	8002820 <handle_pacman_interrupt+0x94>
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	db14      	blt.n	8002820 <handle_pacman_interrupt+0x94>
                new_y >= 0 && new_y < MAP_HEIGHT &&
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b1f      	cmp	r3, #31
 80027fa:	dc11      	bgt.n	8002820 <handle_pacman_interrupt+0x94>
                map[new_y][new_x] == 0)
 80027fc:	490e      	ldr	r1, [pc, #56]	@ (8002838 <handle_pacman_interrupt+0xac>)
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4413      	add	r3, r2
 800280c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                new_y >= 0 && new_y < MAP_HEIGHT &&
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <handle_pacman_interrupt+0x94>
            {
                pacman_x = new_x;
 8002814:	4a06      	ldr	r2, [pc, #24]	@ (8002830 <handle_pacman_interrupt+0xa4>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6013      	str	r3, [r2, #0]
                pacman_y = new_y;
 800281a:	4a06      	ldr	r2, [pc, #24]	@ (8002834 <handle_pacman_interrupt+0xa8>)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	6013      	str	r3, [r2, #0]
            }
        }
    }
}
 8002820:	bf00      	nop
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40010400 	.word	0x40010400
 800282c:	20000520 	.word	0x20000520
 8002830:	20000018 	.word	0x20000018
 8002834:	2000001c 	.word	0x2000001c
 8002838:	0800a14c 	.word	0x0800a14c

0800283c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
    handle_pacman_interrupt(0, GPIO_PIN_0, 0, -1); // Di chuyển lên (dx = 0, dy = -1)
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
 8002844:	2200      	movs	r2, #0
 8002846:	2101      	movs	r1, #1
 8002848:	2000      	movs	r0, #0
 800284a:	f7ff ff9f 	bl	800278c <handle_pacman_interrupt>
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}

08002852 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	af00      	add	r7, sp, #0
    handle_pacman_interrupt(1, GPIO_PIN_1, 0, 1); // Di chuyển xuống (dx = 0, dy = +1)
 8002856:	2301      	movs	r3, #1
 8002858:	2200      	movs	r2, #0
 800285a:	2102      	movs	r1, #2
 800285c:	2001      	movs	r0, #1
 800285e:	f7ff ff95 	bl	800278c <handle_pacman_interrupt>
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}

08002866 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	af00      	add	r7, sp, #0
    handle_pacman_interrupt(2, GPIO_PIN_2, -1, 0); // Di chuyển trái (dx = -1, dy = 0)
 800286a:	2300      	movs	r3, #0
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	2104      	movs	r1, #4
 8002872:	2002      	movs	r0, #2
 8002874:	f7ff ff8a 	bl	800278c <handle_pacman_interrupt>
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}

0800287c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
    handle_pacman_interrupt(3, GPIO_PIN_3, 1, 0); // Di chuyển phải (dx = +1, dy = 0)
 8002880:	2300      	movs	r3, #0
 8002882:	2201      	movs	r2, #1
 8002884:	2108      	movs	r1, #8
 8002886:	2003      	movs	r0, #3
 8002888:	f7ff ff80 	bl	800278c <handle_pacman_interrupt>
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}

08002890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return 1;
 8002894:	2301      	movs	r3, #1
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <_kill>:

int _kill(int pid, int sig)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028a8:	f001 ffce 	bl	8004848 <__errno>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2216      	movs	r2, #22
 80028b0:	601a      	str	r2, [r3, #0]
  return -1;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <_exit>:

void _exit (int status)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028c6:	f04f 31ff 	mov.w	r1, #4294967295
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ffe7 	bl	800289e <_kill>
  while (1) {}    /* Make sure we hang here */
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <_exit+0x12>

080028d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	e00a      	b.n	80028fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028e6:	f3af 8000 	nop.w
 80028ea:	4601      	mov	r1, r0
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	60ba      	str	r2, [r7, #8]
 80028f2:	b2ca      	uxtb	r2, r1
 80028f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	dbf0      	blt.n	80028e6 <_read+0x12>
  }

  return len;
 8002904:	687b      	ldr	r3, [r7, #4]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e009      	b.n	8002934 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	dbf1      	blt.n	8002920 <_write+0x12>
  }
  return len;
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_close>:

int _close(int file)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800296c:	605a      	str	r2, [r3, #4]
  return 0;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <_isatty>:

int _isatty(int file)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
	...

080029a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b0:	4a14      	ldr	r2, [pc, #80]	@ (8002a04 <_sbrk+0x5c>)
 80029b2:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <_sbrk+0x60>)
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029bc:	4b13      	ldr	r3, [pc, #76]	@ (8002a0c <_sbrk+0x64>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029c4:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <_sbrk+0x64>)
 80029c6:	4a12      	ldr	r2, [pc, #72]	@ (8002a10 <_sbrk+0x68>)
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ca:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <_sbrk+0x64>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d207      	bcs.n	80029e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d8:	f001 ff36 	bl	8004848 <__errno>
 80029dc:	4603      	mov	r3, r0
 80029de:	220c      	movs	r2, #12
 80029e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295
 80029e6:	e009      	b.n	80029fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e8:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <_sbrk+0x64>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ee:	4b07      	ldr	r3, [pc, #28]	@ (8002a0c <_sbrk+0x64>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <_sbrk+0x64>)
 80029f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029fa:	68fb      	ldr	r3, [r7, #12]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20005000 	.word	0x20005000
 8002a08:	00000400 	.word	0x00000400
 8002a0c:	20000530 	.word	0x20000530
 8002a10:	20000688 	.word	0x20000688

08002a14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a20:	f7ff fff8 	bl	8002a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a24:	480b      	ldr	r0, [pc, #44]	@ (8002a54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a26:	490c      	ldr	r1, [pc, #48]	@ (8002a58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a28:	4a0c      	ldr	r2, [pc, #48]	@ (8002a5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a3c:	4c09      	ldr	r4, [pc, #36]	@ (8002a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a4a:	f001 ff03 	bl	8004854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a4e:	f7fe fb77 	bl	8001140 <main>
  bx lr
 8002a52:	4770      	bx	lr
  ldr r0, =_sdata
 8002a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a58:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002a5c:	0800a688 	.word	0x0800a688
  ldr r2, =_sbss
 8002a60:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002a64:	20000684 	.word	0x20000684

08002a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a68:	e7fe      	b.n	8002a68 <ADC1_2_IRQHandler>
	...

08002a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <HAL_Init+0x28>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a07      	ldr	r2, [pc, #28]	@ (8002a94 <HAL_Init+0x28>)
 8002a76:	f043 0310 	orr.w	r3, r3, #16
 8002a7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	f000 f947 	bl	8002d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a82:	200f      	movs	r0, #15
 8002a84:	f000 f808 	bl	8002a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a88:	f7ff fdb6 	bl	80025f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40022000 	.word	0x40022000

08002a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_InitTick+0x54>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_InitTick+0x58>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f95f 	bl	8002d7a <HAL_SYSTICK_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00e      	b.n	8002ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	d80a      	bhi.n	8002ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002acc:	2200      	movs	r2, #0
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f000 f927 	bl	8002d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad8:	4a06      	ldr	r2, [pc, #24]	@ (8002af4 <HAL_InitTick+0x5c>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000020 	.word	0x20000020
 8002af0:	20000028 	.word	0x20000028
 8002af4:	20000024 	.word	0x20000024

08002af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002afc:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_IncTick+0x1c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_IncTick+0x20>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	4a03      	ldr	r2, [pc, #12]	@ (8002b18 <HAL_IncTick+0x20>)
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	20000028 	.word	0x20000028
 8002b18:	20000534 	.word	0x20000534

08002b1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b02      	ldr	r3, [pc, #8]	@ (8002b2c <HAL_GetTick+0x10>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	20000534 	.word	0x20000534

08002b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_GetTick>
 8002b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d005      	beq.n	8002b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <HAL_Delay+0x44>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b56:	bf00      	nop
 8002b58:	f7ff ffe0 	bl	8002b1c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d8f7      	bhi.n	8002b58 <HAL_Delay+0x28>
  {
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000028 	.word	0x20000028

08002b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002baa:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc4:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	f003 0307 	and.w	r3, r3, #7
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db0b      	blt.n	8002c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4906      	ldr	r1, [pc, #24]	@ (8002c10 <__NVIC_EnableIRQ+0x34>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	@ (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	@ (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	@ 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	@ 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cdc:	d301      	bcc.n	8002ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00f      	b.n	8002d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <SysTick_Config+0x40>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cea:	210f      	movs	r1, #15
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	f7ff ff90 	bl	8002c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf4:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <SysTick_Config+0x40>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfa:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <SysTick_Config+0x40>)
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	e000e010 	.word	0xe000e010

08002d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff2d 	bl	8002b78 <__NVIC_SetPriorityGrouping>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d38:	f7ff ff42 	bl	8002bc0 <__NVIC_GetPriorityGrouping>
 8002d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f7ff ff90 	bl	8002c68 <NVIC_EncodePriority>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff5f 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4603      	mov	r3, r0
 8002d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff35 	bl	8002bdc <__NVIC_EnableIRQ>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ffa2 	bl	8002ccc <SysTick_Config>
 8002d88:	4603      	mov	r3, r0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b08b      	sub	sp, #44	@ 0x2c
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da6:	e169      	b.n	800307c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002da8:	2201      	movs	r2, #1
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	f040 8158 	bne.w	8003076 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4a9a      	ldr	r2, [pc, #616]	@ (8003034 <HAL_GPIO_Init+0x2a0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d05e      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002dd0:	4a98      	ldr	r2, [pc, #608]	@ (8003034 <HAL_GPIO_Init+0x2a0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d875      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dd6:	4a98      	ldr	r2, [pc, #608]	@ (8003038 <HAL_GPIO_Init+0x2a4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d058      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002ddc:	4a96      	ldr	r2, [pc, #600]	@ (8003038 <HAL_GPIO_Init+0x2a4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d86f      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002de2:	4a96      	ldr	r2, [pc, #600]	@ (800303c <HAL_GPIO_Init+0x2a8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d052      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002de8:	4a94      	ldr	r2, [pc, #592]	@ (800303c <HAL_GPIO_Init+0x2a8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d869      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dee:	4a94      	ldr	r2, [pc, #592]	@ (8003040 <HAL_GPIO_Init+0x2ac>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d04c      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002df4:	4a92      	ldr	r2, [pc, #584]	@ (8003040 <HAL_GPIO_Init+0x2ac>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d863      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dfa:	4a92      	ldr	r2, [pc, #584]	@ (8003044 <HAL_GPIO_Init+0x2b0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d046      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002e00:	4a90      	ldr	r2, [pc, #576]	@ (8003044 <HAL_GPIO_Init+0x2b0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d85d      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002e06:	2b12      	cmp	r3, #18
 8002e08:	d82a      	bhi.n	8002e60 <HAL_GPIO_Init+0xcc>
 8002e0a:	2b12      	cmp	r3, #18
 8002e0c:	d859      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <HAL_GPIO_Init+0x80>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e8f 	.word	0x08002e8f
 8002e18:	08002e69 	.word	0x08002e69
 8002e1c:	08002e7b 	.word	0x08002e7b
 8002e20:	08002ebd 	.word	0x08002ebd
 8002e24:	08002ec3 	.word	0x08002ec3
 8002e28:	08002ec3 	.word	0x08002ec3
 8002e2c:	08002ec3 	.word	0x08002ec3
 8002e30:	08002ec3 	.word	0x08002ec3
 8002e34:	08002ec3 	.word	0x08002ec3
 8002e38:	08002ec3 	.word	0x08002ec3
 8002e3c:	08002ec3 	.word	0x08002ec3
 8002e40:	08002ec3 	.word	0x08002ec3
 8002e44:	08002ec3 	.word	0x08002ec3
 8002e48:	08002ec3 	.word	0x08002ec3
 8002e4c:	08002ec3 	.word	0x08002ec3
 8002e50:	08002ec3 	.word	0x08002ec3
 8002e54:	08002ec3 	.word	0x08002ec3
 8002e58:	08002e71 	.word	0x08002e71
 8002e5c:	08002e85 	.word	0x08002e85
 8002e60:	4a79      	ldr	r2, [pc, #484]	@ (8003048 <HAL_GPIO_Init+0x2b4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e66:	e02c      	b.n	8002ec2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	623b      	str	r3, [r7, #32]
          break;
 8002e6e:	e029      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	3304      	adds	r3, #4
 8002e76:	623b      	str	r3, [r7, #32]
          break;
 8002e78:	e024      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	623b      	str	r3, [r7, #32]
          break;
 8002e82:	e01f      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	623b      	str	r3, [r7, #32]
          break;
 8002e8c:	e01a      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e96:	2304      	movs	r3, #4
 8002e98:	623b      	str	r3, [r7, #32]
          break;
 8002e9a:	e013      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	611a      	str	r2, [r3, #16]
          break;
 8002eae:	e009      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	615a      	str	r2, [r3, #20]
          break;
 8002eba:	e003      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]
          break;
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          break;
 8002ec2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2bff      	cmp	r3, #255	@ 0xff
 8002ec8:	d801      	bhi.n	8002ece <HAL_GPIO_Init+0x13a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	e001      	b.n	8002ed2 <HAL_GPIO_Init+0x13e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2bff      	cmp	r3, #255	@ 0xff
 8002ed8:	d802      	bhi.n	8002ee0 <HAL_GPIO_Init+0x14c>
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	e002      	b.n	8002ee6 <HAL_GPIO_Init+0x152>
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	3b08      	subs	r3, #8
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	210f      	movs	r1, #15
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	6a39      	ldr	r1, [r7, #32]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	431a      	orrs	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80b1 	beq.w	8003076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f14:	4b4d      	ldr	r3, [pc, #308]	@ (800304c <HAL_GPIO_Init+0x2b8>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4a4c      	ldr	r2, [pc, #304]	@ (800304c <HAL_GPIO_Init+0x2b8>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6193      	str	r3, [r2, #24]
 8002f20:	4b4a      	ldr	r3, [pc, #296]	@ (800304c <HAL_GPIO_Init+0x2b8>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f2c:	4a48      	ldr	r2, [pc, #288]	@ (8003050 <HAL_GPIO_Init+0x2bc>)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	3302      	adds	r3, #2
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	220f      	movs	r2, #15
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a40      	ldr	r2, [pc, #256]	@ (8003054 <HAL_GPIO_Init+0x2c0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <HAL_GPIO_Init+0x1ec>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003058 <HAL_GPIO_Init+0x2c4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00d      	beq.n	8002f7c <HAL_GPIO_Init+0x1e8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3e      	ldr	r2, [pc, #248]	@ (800305c <HAL_GPIO_Init+0x2c8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <HAL_GPIO_Init+0x1e4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3d      	ldr	r2, [pc, #244]	@ (8003060 <HAL_GPIO_Init+0x2cc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <HAL_GPIO_Init+0x1e0>
 8002f70:	2303      	movs	r3, #3
 8002f72:	e006      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f74:	2304      	movs	r3, #4
 8002f76:	e004      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e002      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f80:	2300      	movs	r3, #0
 8002f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f84:	f002 0203 	and.w	r2, r2, #3
 8002f88:	0092      	lsls	r2, r2, #2
 8002f8a:	4093      	lsls	r3, r2
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f92:	492f      	ldr	r1, [pc, #188]	@ (8003050 <HAL_GPIO_Init+0x2bc>)
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	3302      	adds	r3, #2
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fac:	4b2d      	ldr	r3, [pc, #180]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	492c      	ldr	r1, [pc, #176]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fba:	4b2a      	ldr	r3, [pc, #168]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	4928      	ldr	r1, [pc, #160]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fd4:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	4922      	ldr	r1, [pc, #136]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60cb      	str	r3, [r1, #12]
 8002fe0:	e006      	b.n	8002ff0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fe2:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	491e      	ldr	r1, [pc, #120]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d006      	beq.n	800300a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	4918      	ldr	r1, [pc, #96]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
 8003008:	e006      	b.n	8003018 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800300a:	4b16      	ldr	r3, [pc, #88]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	43db      	mvns	r3, r3
 8003012:	4914      	ldr	r1, [pc, #80]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8003014:	4013      	ands	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d021      	beq.n	8003068 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003024:	4b0f      	ldr	r3, [pc, #60]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	490e      	ldr	r1, [pc, #56]	@ (8003064 <HAL_GPIO_Init+0x2d0>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	e021      	b.n	8003076 <HAL_GPIO_Init+0x2e2>
 8003032:	bf00      	nop
 8003034:	10320000 	.word	0x10320000
 8003038:	10310000 	.word	0x10310000
 800303c:	10220000 	.word	0x10220000
 8003040:	10210000 	.word	0x10210000
 8003044:	10120000 	.word	0x10120000
 8003048:	10110000 	.word	0x10110000
 800304c:	40021000 	.word	0x40021000
 8003050:	40010000 	.word	0x40010000
 8003054:	40010800 	.word	0x40010800
 8003058:	40010c00 	.word	0x40010c00
 800305c:	40011000 	.word	0x40011000
 8003060:	40011400 	.word	0x40011400
 8003064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <HAL_GPIO_Init+0x304>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	43db      	mvns	r3, r3
 8003070:	4909      	ldr	r1, [pc, #36]	@ (8003098 <HAL_GPIO_Init+0x304>)
 8003072:	4013      	ands	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	3301      	adds	r3, #1
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	f47f ae8e 	bne.w	8002da8 <HAL_GPIO_Init+0x14>
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	372c      	adds	r7, #44	@ 0x2c
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40010400 	.word	0x40010400

0800309c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	887b      	ldrh	r3, [r7, #2]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	e001      	b.n	80030be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	807b      	strh	r3, [r7, #2]
 80030d6:	4613      	mov	r3, r2
 80030d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030da:	787b      	ldrb	r3, [r7, #1]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e0:	887a      	ldrh	r2, [r7, #2]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030e6:	e003      	b.n	80030f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	041a      	lsls	r2, r3, #16
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	611a      	str	r2, [r3, #16]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e12b      	b.n	8003366 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff fac8 	bl	80026b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2224      	movs	r2, #36	@ 0x24
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800314e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800315e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003160:	f001 f960 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8003164:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4a81      	ldr	r2, [pc, #516]	@ (8003370 <HAL_I2C_Init+0x274>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d807      	bhi.n	8003180 <HAL_I2C_Init+0x84>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4a80      	ldr	r2, [pc, #512]	@ (8003374 <HAL_I2C_Init+0x278>)
 8003174:	4293      	cmp	r3, r2
 8003176:	bf94      	ite	ls
 8003178:	2301      	movls	r3, #1
 800317a:	2300      	movhi	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e006      	b.n	800318e <HAL_I2C_Init+0x92>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a7d      	ldr	r2, [pc, #500]	@ (8003378 <HAL_I2C_Init+0x27c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	bf94      	ite	ls
 8003188:	2301      	movls	r3, #1
 800318a:	2300      	movhi	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0e7      	b.n	8003366 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a78      	ldr	r2, [pc, #480]	@ (800337c <HAL_I2C_Init+0x280>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	0c9b      	lsrs	r3, r3, #18
 80031a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003370 <HAL_I2C_Init+0x274>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d802      	bhi.n	80031d0 <HAL_I2C_Init+0xd4>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3301      	adds	r3, #1
 80031ce:	e009      	b.n	80031e4 <HAL_I2C_Init+0xe8>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	4a69      	ldr	r2, [pc, #420]	@ (8003380 <HAL_I2C_Init+0x284>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	3301      	adds	r3, #1
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	495c      	ldr	r1, [pc, #368]	@ (8003370 <HAL_I2C_Init+0x274>)
 8003200:	428b      	cmp	r3, r1
 8003202:	d819      	bhi.n	8003238 <HAL_I2C_Init+0x13c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1e59      	subs	r1, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003212:	1c59      	adds	r1, r3, #1
 8003214:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003218:	400b      	ands	r3, r1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_I2C_Init+0x138>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1e59      	subs	r1, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fbb1 f3f3 	udiv	r3, r1, r3
 800322c:	3301      	adds	r3, #1
 800322e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003232:	e051      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003234:	2304      	movs	r3, #4
 8003236:	e04f      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d111      	bne.n	8003264 <HAL_I2C_Init+0x168>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e58      	subs	r0, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	e012      	b.n	800328a <HAL_I2C_Init+0x18e>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1e58      	subs	r0, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	0099      	lsls	r1, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	fbb0 f3f3 	udiv	r3, r0, r3
 800327a:	3301      	adds	r3, #1
 800327c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Init+0x196>
 800328e:	2301      	movs	r3, #1
 8003290:	e022      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10e      	bne.n	80032b8 <HAL_I2C_Init+0x1bc>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1e58      	subs	r0, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6859      	ldr	r1, [r3, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	440b      	add	r3, r1
 80032a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032b6:	e00f      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e58      	subs	r0, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	0099      	lsls	r1, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ce:	3301      	adds	r3, #1
 80032d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	6809      	ldr	r1, [r1, #0]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003306:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6911      	ldr	r1, [r2, #16]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	430b      	orrs	r3, r1
 800331a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	000186a0 	.word	0x000186a0
 8003374:	001e847f 	.word	0x001e847f
 8003378:	003d08ff 	.word	0x003d08ff
 800337c:	431bde83 	.word	0x431bde83
 8003380:	10624dd3 	.word	0x10624dd3

08003384 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	460b      	mov	r3, r1
 8003392:	817b      	strh	r3, [r7, #10]
 8003394:	4613      	mov	r3, r2
 8003396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003398:	f7ff fbc0 	bl	8002b1c <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	f040 80e0 	bne.w	800356c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2319      	movs	r3, #25
 80033b2:	2201      	movs	r2, #1
 80033b4:	4970      	ldr	r1, [pc, #448]	@ (8003578 <HAL_I2C_Master_Transmit+0x1f4>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fa92 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
 80033c4:	e0d3      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2C_Master_Transmit+0x50>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0cc      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d007      	beq.n	80033fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2221      	movs	r2, #33	@ 0x21
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2210      	movs	r2, #16
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	893a      	ldrh	r2, [r7, #8]
 800342a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a50      	ldr	r2, [pc, #320]	@ (800357c <HAL_I2C_Master_Transmit+0x1f8>)
 800343a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800343c:	8979      	ldrh	r1, [r7, #10]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f9ca 	bl	80037dc <I2C_MasterRequestWrite>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e08d      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003468:	e066      	b.n	8003538 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fb50 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	2b04      	cmp	r3, #4
 8003480:	d107      	bne.n	8003492 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e06b      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	781a      	ldrb	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d11b      	bne.n	800350c <HAL_I2C_Master_Transmit+0x188>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d017      	beq.n	800350c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	6a39      	ldr	r1, [r7, #32]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fb47 	bl	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	2b04      	cmp	r3, #4
 8003522:	d107      	bne.n	8003534 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003532:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e01a      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d194      	bne.n	800346a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	00100002 	.word	0x00100002
 800357c:	ffff0000 	.word	0xffff0000

08003580 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	@ 0x28
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	460b      	mov	r3, r1
 800358e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003590:	f7ff fac4 	bl	8002b1c <HAL_GetTick>
 8003594:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	f040 8111 	bne.w	80037ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	2319      	movs	r3, #25
 80035ae:	2201      	movs	r2, #1
 80035b0:	4988      	ldr	r1, [pc, #544]	@ (80037d4 <HAL_I2C_IsDeviceReady+0x254>)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f994 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
 80035c0:	e104      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_I2C_IsDeviceReady+0x50>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e0fd      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d007      	beq.n	80035f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003604:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2224      	movs	r2, #36	@ 0x24
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a70      	ldr	r2, [pc, #448]	@ (80037d8 <HAL_I2C_IsDeviceReady+0x258>)
 8003618:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003628:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f952 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00d      	beq.n	800365e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003650:	d103      	bne.n	800365a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003658:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e0b6      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800365e:	897b      	ldrh	r3, [r7, #10]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800366c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800366e:	f7ff fa55 	bl	8002b1c <HAL_GetTick>
 8003672:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b02      	cmp	r3, #2
 8003680:	bf0c      	ite	eq
 8003682:	2301      	moveq	r3, #1
 8003684:	2300      	movne	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003698:	bf0c      	ite	eq
 800369a:	2301      	moveq	r3, #1
 800369c:	2300      	movne	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036a2:	e025      	b.n	80036f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	f7ff fa3a 	bl	8002b1c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <HAL_I2C_IsDeviceReady+0x13a>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	22a0      	movs	r2, #160	@ 0xa0
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80036fa:	d005      	beq.n	8003708 <HAL_I2C_IsDeviceReady+0x188>
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_I2C_IsDeviceReady+0x188>
 8003702:	7dbb      	ldrb	r3, [r7, #22]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0cd      	beq.n	80036a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d129      	bne.n	8003772 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800372c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2319      	movs	r3, #25
 800374a:	2201      	movs	r2, #1
 800374c:	4921      	ldr	r1, [pc, #132]	@ (80037d4 <HAL_I2C_IsDeviceReady+0x254>)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f8c6 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e036      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e02c      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003780:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800378a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	2319      	movs	r3, #25
 8003792:	2201      	movs	r2, #1
 8003794:	490f      	ldr	r1, [pc, #60]	@ (80037d4 <HAL_I2C_IsDeviceReady+0x254>)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f8a2 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e012      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	f4ff af32 	bcc.w	800361a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	00100002 	.word	0x00100002
 80037d8:	ffff0000 	.word	0xffff0000

080037dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	460b      	mov	r3, r1
 80037ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d006      	beq.n	8003806 <I2C_MasterRequestWrite+0x2a>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d003      	beq.n	8003806 <I2C_MasterRequestWrite+0x2a>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003804:	d108      	bne.n	8003818 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e00b      	b.n	8003830 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381c:	2b12      	cmp	r3, #18
 800381e:	d107      	bne.n	8003830 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800382e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f84f 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003856:	d103      	bne.n	8003860 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800385e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e035      	b.n	80038d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800386c:	d108      	bne.n	8003880 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800386e:	897b      	ldrh	r3, [r7, #10]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	461a      	mov	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800387c:	611a      	str	r2, [r3, #16]
 800387e:	e01b      	b.n	80038b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003880:	897b      	ldrh	r3, [r7, #10]
 8003882:	11db      	asrs	r3, r3, #7
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f003 0306 	and.w	r3, r3, #6
 800388a:	b2db      	uxtb	r3, r3
 800388c:	f063 030f 	orn	r3, r3, #15
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	490e      	ldr	r1, [pc, #56]	@ (80038d8 <I2C_MasterRequestWrite+0xfc>)
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f898 	bl	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e010      	b.n	80038d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4907      	ldr	r1, [pc, #28]	@ (80038dc <I2C_MasterRequestWrite+0x100>)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f888 	bl	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	00010008 	.word	0x00010008
 80038dc:	00010002 	.word	0x00010002

080038e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f0:	e048      	b.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d044      	beq.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7ff f90f 	bl	8002b1c <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d139      	bne.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	0c1b      	lsrs	r3, r3, #16
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d10d      	bne.n	8003936 <I2C_WaitOnFlagUntilTimeout+0x56>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	43da      	mvns	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	e00c      	b.n	8003950 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	43da      	mvns	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	429a      	cmp	r2, r3
 8003954:	d116      	bne.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e023      	b.n	80039cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d10d      	bne.n	80039aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	43da      	mvns	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	e00c      	b.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	43da      	mvns	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4013      	ands	r3, r2
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d093      	beq.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e2:	e071      	b.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f2:	d123      	bne.n	8003a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e067      	b.n	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d041      	beq.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7ff f86a 	bl	8002b1c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d136      	bne.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10c      	bne.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	e00b      	b.n	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	43da      	mvns	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e021      	b.n	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d10c      	bne.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e00b      	b.n	8003b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	43da      	mvns	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4013      	ands	r3, r2
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f af6d 	bne.w	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b20:	e034      	b.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f886 	bl	8003c34 <I2C_IsAcknowledgeFailed>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e034      	b.n	8003b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d028      	beq.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe ffef 	bl	8002b1c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11d      	bne.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5a:	2b80      	cmp	r3, #128	@ 0x80
 8003b5c:	d016      	beq.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	f043 0220 	orr.w	r2, r3, #32
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e007      	b.n	8003b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b96:	2b80      	cmp	r3, #128	@ 0x80
 8003b98:	d1c3      	bne.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb0:	e034      	b.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f83e 	bl	8003c34 <I2C_IsAcknowledgeFailed>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e034      	b.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d028      	beq.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fe ffa7 	bl	8002b1c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11d      	bne.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d016      	beq.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e007      	b.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d1c3      	bne.n	8003bb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4a:	d11b      	bne.n	8003c84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	f043 0204 	orr.w	r2, r3, #4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e272      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 8087 	beq.w	8003dbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cb0:	4b92      	ldr	r3, [pc, #584]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d00c      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cbc:	4b8f      	ldr	r3, [pc, #572]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d112      	bne.n	8003cee <HAL_RCC_OscConfig+0x5e>
 8003cc8:	4b8c      	ldr	r3, [pc, #560]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd4:	d10b      	bne.n	8003cee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd6:	4b89      	ldr	r3, [pc, #548]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d06c      	beq.n	8003dbc <HAL_RCC_OscConfig+0x12c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d168      	bne.n	8003dbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e24c      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x76>
 8003cf8:	4b80      	ldr	r3, [pc, #512]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a7f      	ldr	r2, [pc, #508]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	e02e      	b.n	8003d64 <HAL_RCC_OscConfig+0xd4>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x98>
 8003d0e:	4b7b      	ldr	r3, [pc, #492]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a7a      	ldr	r2, [pc, #488]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b78      	ldr	r3, [pc, #480]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a77      	ldr	r2, [pc, #476]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e01d      	b.n	8003d64 <HAL_RCC_OscConfig+0xd4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0xbc>
 8003d32:	4b72      	ldr	r3, [pc, #456]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a71      	ldr	r2, [pc, #452]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b6f      	ldr	r3, [pc, #444]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6e      	ldr	r2, [pc, #440]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e00b      	b.n	8003d64 <HAL_RCC_OscConfig+0xd4>
 8003d4c:	4b6b      	ldr	r3, [pc, #428]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a6a      	ldr	r2, [pc, #424]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b68      	ldr	r3, [pc, #416]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a67      	ldr	r2, [pc, #412]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fed6 	bl	8002b1c <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d74:	f7fe fed2 	bl	8002b1c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	@ 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e200      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	4b5d      	ldr	r3, [pc, #372]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0xe4>
 8003d92:	e014      	b.n	8003dbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe fec2 	bl	8002b1c <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe febe 	bl	8002b1c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	@ 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e1ec      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dae:	4b53      	ldr	r3, [pc, #332]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x10c>
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d063      	beq.n	8003e92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dca:	4b4c      	ldr	r3, [pc, #304]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003dd6:	4b49      	ldr	r3, [pc, #292]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d11c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x18c>
 8003de2:	4b46      	ldr	r3, [pc, #280]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d116      	bne.n	8003e1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	4b43      	ldr	r3, [pc, #268]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_RCC_OscConfig+0x176>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e1c0      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e06:	4b3d      	ldr	r3, [pc, #244]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4939      	ldr	r1, [pc, #228]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1a:	e03a      	b.n	8003e92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e24:	4b36      	ldr	r3, [pc, #216]	@ (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2a:	f7fe fe77 	bl	8002b1c <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e32:	f7fe fe73 	bl	8002b1c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e1a1      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e44:	4b2d      	ldr	r3, [pc, #180]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	4b2a      	ldr	r3, [pc, #168]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4927      	ldr	r1, [pc, #156]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
 8003e64:	e015      	b.n	8003e92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e66:	4b26      	ldr	r3, [pc, #152]	@ (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fe fe56 	bl	8002b1c <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e74:	f7fe fe52 	bl	8002b1c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e180      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	4b1d      	ldr	r3, [pc, #116]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d03a      	beq.n	8003f14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d019      	beq.n	8003eda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea6:	4b17      	ldr	r3, [pc, #92]	@ (8003f04 <HAL_RCC_OscConfig+0x274>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eac:	f7fe fe36 	bl	8002b1c <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb4:	f7fe fe32 	bl	8002b1c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e160      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <HAL_RCC_OscConfig+0x26c>)
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	f000 faba 	bl	800444c <RCC_Delay>
 8003ed8:	e01c      	b.n	8003f14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eda:	4b0a      	ldr	r3, [pc, #40]	@ (8003f04 <HAL_RCC_OscConfig+0x274>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee0:	f7fe fe1c 	bl	8002b1c <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee6:	e00f      	b.n	8003f08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee8:	f7fe fe18 	bl	8002b1c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d908      	bls.n	8003f08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e146      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
 8003efa:	bf00      	nop
 8003efc:	40021000 	.word	0x40021000
 8003f00:	42420000 	.word	0x42420000
 8003f04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f08:	4b92      	ldr	r3, [pc, #584]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e9      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80a6 	beq.w	800406e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f26:	4b8b      	ldr	r3, [pc, #556]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10d      	bne.n	8003f4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	4b88      	ldr	r3, [pc, #544]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	4a87      	ldr	r2, [pc, #540]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3c:	61d3      	str	r3, [r2, #28]
 8003f3e:	4b85      	ldr	r3, [pc, #532]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4e:	4b82      	ldr	r3, [pc, #520]	@ (8004158 <HAL_RCC_OscConfig+0x4c8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d118      	bne.n	8003f8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8004158 <HAL_RCC_OscConfig+0x4c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a7e      	ldr	r2, [pc, #504]	@ (8004158 <HAL_RCC_OscConfig+0x4c8>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f66:	f7fe fdd9 	bl	8002b1c <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6e:	f7fe fdd5 	bl	8002b1c <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b64      	cmp	r3, #100	@ 0x64
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e103      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f80:	4b75      	ldr	r3, [pc, #468]	@ (8004158 <HAL_RCC_OscConfig+0x4c8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x312>
 8003f94:	4b6f      	ldr	r3, [pc, #444]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	4a6e      	ldr	r2, [pc, #440]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6213      	str	r3, [r2, #32]
 8003fa0:	e02d      	b.n	8003ffe <HAL_RCC_OscConfig+0x36e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x334>
 8003faa:	4b6a      	ldr	r3, [pc, #424]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	4a69      	ldr	r2, [pc, #420]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	6213      	str	r3, [r2, #32]
 8003fb6:	4b67      	ldr	r3, [pc, #412]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4a66      	ldr	r2, [pc, #408]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	f023 0304 	bic.w	r3, r3, #4
 8003fc0:	6213      	str	r3, [r2, #32]
 8003fc2:	e01c      	b.n	8003ffe <HAL_RCC_OscConfig+0x36e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x356>
 8003fcc:	4b61      	ldr	r3, [pc, #388]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	4a60      	ldr	r2, [pc, #384]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003fd2:	f043 0304 	orr.w	r3, r3, #4
 8003fd6:	6213      	str	r3, [r2, #32]
 8003fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	4a5d      	ldr	r2, [pc, #372]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6213      	str	r3, [r2, #32]
 8003fe4:	e00b      	b.n	8003ffe <HAL_RCC_OscConfig+0x36e>
 8003fe6:	4b5b      	ldr	r3, [pc, #364]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4a5a      	ldr	r2, [pc, #360]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	6213      	str	r3, [r2, #32]
 8003ff2:	4b58      	ldr	r3, [pc, #352]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4a57      	ldr	r2, [pc, #348]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	f023 0304 	bic.w	r3, r3, #4
 8003ffc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d015      	beq.n	8004032 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7fe fd89 	bl	8002b1c <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400c:	e00a      	b.n	8004024 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fe fd85 	bl	8002b1c <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e0b1      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004024:	4b4b      	ldr	r3, [pc, #300]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ee      	beq.n	800400e <HAL_RCC_OscConfig+0x37e>
 8004030:	e014      	b.n	800405c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004032:	f7fe fd73 	bl	8002b1c <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004038:	e00a      	b.n	8004050 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fe fd6f 	bl	8002b1c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e09b      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004050:	4b40      	ldr	r3, [pc, #256]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1ee      	bne.n	800403a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d105      	bne.n	800406e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004062:	4b3c      	ldr	r3, [pc, #240]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	4a3b      	ldr	r2, [pc, #236]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 8004068:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8087 	beq.w	8004186 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004078:	4b36      	ldr	r3, [pc, #216]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b08      	cmp	r3, #8
 8004082:	d061      	beq.n	8004148 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d146      	bne.n	800411a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408c:	4b33      	ldr	r3, [pc, #204]	@ (800415c <HAL_RCC_OscConfig+0x4cc>)
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fe fd43 	bl	8002b1c <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe fd3f 	bl	8002b1c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e06d      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ac:	4b29      	ldr	r3, [pc, #164]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f0      	bne.n	800409a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040c0:	d108      	bne.n	80040d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040c2:	4b24      	ldr	r3, [pc, #144]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	4921      	ldr	r1, [pc, #132]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a19      	ldr	r1, [r3, #32]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	430b      	orrs	r3, r1
 80040e6:	491b      	ldr	r1, [pc, #108]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ec:	4b1b      	ldr	r3, [pc, #108]	@ (800415c <HAL_RCC_OscConfig+0x4cc>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f2:	f7fe fd13 	bl	8002b1c <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fa:	f7fe fd0f 	bl	8002b1c <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e03d      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800410c:	4b11      	ldr	r3, [pc, #68]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x46a>
 8004118:	e035      	b.n	8004186 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411a:	4b10      	ldr	r3, [pc, #64]	@ (800415c <HAL_RCC_OscConfig+0x4cc>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fe fcfc 	bl	8002b1c <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe fcf8 	bl	8002b1c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e026      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800413a:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <HAL_RCC_OscConfig+0x4c4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x498>
 8004146:	e01e      	b.n	8004186 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d107      	bne.n	8004160 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e019      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
 8004154:	40021000 	.word	0x40021000
 8004158:	40007000 	.word	0x40007000
 800415c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004160:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <HAL_RCC_OscConfig+0x500>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	429a      	cmp	r2, r3
 8004172:	d106      	bne.n	8004182 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d001      	beq.n	8004186 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40021000 	.word	0x40021000

08004194 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0d0      	b.n	800434a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d910      	bls.n	80041d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b67      	ldr	r3, [pc, #412]	@ (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f023 0207 	bic.w	r2, r3, #7
 80041be:	4965      	ldr	r1, [pc, #404]	@ (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c6:	4b63      	ldr	r3, [pc, #396]	@ (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0b8      	b.n	800434a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d020      	beq.n	8004226 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f0:	4b59      	ldr	r3, [pc, #356]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4a58      	ldr	r2, [pc, #352]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004208:	4b53      	ldr	r3, [pc, #332]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a52      	ldr	r2, [pc, #328]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 800420e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004212:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004214:	4b50      	ldr	r3, [pc, #320]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	494d      	ldr	r1, [pc, #308]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d040      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d107      	bne.n	800424a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423a:	4b47      	ldr	r3, [pc, #284]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d115      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e07f      	b.n	800434a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004252:	4b41      	ldr	r3, [pc, #260]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e073      	b.n	800434a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004262:	4b3d      	ldr	r3, [pc, #244]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e06b      	b.n	800434a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004272:	4b39      	ldr	r3, [pc, #228]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f023 0203 	bic.w	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4936      	ldr	r1, [pc, #216]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004284:	f7fe fc4a 	bl	8002b1c <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428c:	f7fe fc46 	bl	8002b1c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e053      	b.n	800434a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 020c 	and.w	r2, r3, #12
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d1eb      	bne.n	800428c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042b4:	4b27      	ldr	r3, [pc, #156]	@ (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d210      	bcs.n	80042e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b24      	ldr	r3, [pc, #144]	@ (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 0207 	bic.w	r2, r3, #7
 80042ca:	4922      	ldr	r1, [pc, #136]	@ (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d2:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e032      	b.n	800434a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f0:	4b19      	ldr	r3, [pc, #100]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4916      	ldr	r1, [pc, #88]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800430e:	4b12      	ldr	r3, [pc, #72]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	490e      	ldr	r1, [pc, #56]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004322:	f000 f821 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8004326:	4602      	mov	r2, r0
 8004328:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	490a      	ldr	r1, [pc, #40]	@ (800435c <HAL_RCC_ClockConfig+0x1c8>)
 8004334:	5ccb      	ldrb	r3, [r1, r3]
 8004336:	fa22 f303 	lsr.w	r3, r2, r3
 800433a:	4a09      	ldr	r2, [pc, #36]	@ (8004360 <HAL_RCC_ClockConfig+0x1cc>)
 800433c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800433e:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <HAL_RCC_ClockConfig+0x1d0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fba8 	bl	8002a98 <HAL_InitTick>

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40022000 	.word	0x40022000
 8004358:	40021000 	.word	0x40021000
 800435c:	0800a3a0 	.word	0x0800a3a0
 8004360:	20000020 	.word	0x20000020
 8004364:	20000024 	.word	0x20000024

08004368 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004382:	4b1e      	ldr	r3, [pc, #120]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x94>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b04      	cmp	r3, #4
 8004390:	d002      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x30>
 8004392:	2b08      	cmp	r3, #8
 8004394:	d003      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0x36>
 8004396:	e027      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004398:	4b19      	ldr	r3, [pc, #100]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x98>)
 800439a:	613b      	str	r3, [r7, #16]
      break;
 800439c:	e027      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	0c9b      	lsrs	r3, r3, #18
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043a8:	5cd3      	ldrb	r3, [r2, r3]
 80043aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d010      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043b6:	4b11      	ldr	r3, [pc, #68]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x94>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	0c5b      	lsrs	r3, r3, #17
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	4a11      	ldr	r2, [pc, #68]	@ (8004408 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043c2:	5cd3      	ldrb	r3, [r2, r3]
 80043c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x98>)
 80043ca:	fb03 f202 	mul.w	r2, r3, r2
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e004      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a0c      	ldr	r2, [pc, #48]	@ (800440c <HAL_RCC_GetSysClockFreq+0xa4>)
 80043dc:	fb02 f303 	mul.w	r3, r2, r3
 80043e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	613b      	str	r3, [r7, #16]
      break;
 80043e6:	e002      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043e8:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x98>)
 80043ea:	613b      	str	r3, [r7, #16]
      break;
 80043ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ee:	693b      	ldr	r3, [r7, #16]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
 8004400:	007a1200 	.word	0x007a1200
 8004404:	0800a3b8 	.word	0x0800a3b8
 8004408:	0800a3c8 	.word	0x0800a3c8
 800440c:	003d0900 	.word	0x003d0900

08004410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004414:	4b02      	ldr	r3, [pc, #8]	@ (8004420 <HAL_RCC_GetHCLKFreq+0x10>)
 8004416:	681b      	ldr	r3, [r3, #0]
}
 8004418:	4618      	mov	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr
 8004420:	20000020 	.word	0x20000020

08004424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004428:	f7ff fff2 	bl	8004410 <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4903      	ldr	r1, [pc, #12]	@ (8004448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	0800a3b0 	.word	0x0800a3b0

0800444c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004454:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <RCC_Delay+0x34>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a0a      	ldr	r2, [pc, #40]	@ (8004484 <RCC_Delay+0x38>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	0a5b      	lsrs	r3, r3, #9
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004468:	bf00      	nop
  }
  while (Delay --);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1e5a      	subs	r2, r3, #1
 800446e:	60fa      	str	r2, [r7, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f9      	bne.n	8004468 <RCC_Delay+0x1c>
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr
 8004480:	20000020 	.word	0x20000020
 8004484:	10624dd3 	.word	0x10624dd3

08004488 <srand>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4b10      	ldr	r3, [pc, #64]	@ (80044cc <srand+0x44>)
 800448c:	4604      	mov	r4, r0
 800448e:	681d      	ldr	r5, [r3, #0]
 8004490:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004492:	b9b3      	cbnz	r3, 80044c2 <srand+0x3a>
 8004494:	2018      	movs	r0, #24
 8004496:	f000 fa6b 	bl	8004970 <malloc>
 800449a:	4602      	mov	r2, r0
 800449c:	6328      	str	r0, [r5, #48]	@ 0x30
 800449e:	b920      	cbnz	r0, 80044aa <srand+0x22>
 80044a0:	2146      	movs	r1, #70	@ 0x46
 80044a2:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <srand+0x48>)
 80044a4:	480b      	ldr	r0, [pc, #44]	@ (80044d4 <srand+0x4c>)
 80044a6:	f000 f9fd 	bl	80048a4 <__assert_func>
 80044aa:	490b      	ldr	r1, [pc, #44]	@ (80044d8 <srand+0x50>)
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <srand+0x54>)
 80044ae:	e9c0 1300 	strd	r1, r3, [r0]
 80044b2:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <srand+0x58>)
 80044b4:	2100      	movs	r1, #0
 80044b6:	6083      	str	r3, [r0, #8]
 80044b8:	230b      	movs	r3, #11
 80044ba:	8183      	strh	r3, [r0, #12]
 80044bc:	2001      	movs	r0, #1
 80044be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80044c2:	2200      	movs	r2, #0
 80044c4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80044c6:	611c      	str	r4, [r3, #16]
 80044c8:	615a      	str	r2, [r3, #20]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	20000038 	.word	0x20000038
 80044d0:	0800a3ca 	.word	0x0800a3ca
 80044d4:	0800a3e1 	.word	0x0800a3e1
 80044d8:	abcd330e 	.word	0xabcd330e
 80044dc:	e66d1234 	.word	0xe66d1234
 80044e0:	0005deec 	.word	0x0005deec

080044e4 <rand>:
 80044e4:	4b16      	ldr	r3, [pc, #88]	@ (8004540 <rand+0x5c>)
 80044e6:	b510      	push	{r4, lr}
 80044e8:	681c      	ldr	r4, [r3, #0]
 80044ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80044ec:	b9b3      	cbnz	r3, 800451c <rand+0x38>
 80044ee:	2018      	movs	r0, #24
 80044f0:	f000 fa3e 	bl	8004970 <malloc>
 80044f4:	4602      	mov	r2, r0
 80044f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80044f8:	b920      	cbnz	r0, 8004504 <rand+0x20>
 80044fa:	2152      	movs	r1, #82	@ 0x52
 80044fc:	4b11      	ldr	r3, [pc, #68]	@ (8004544 <rand+0x60>)
 80044fe:	4812      	ldr	r0, [pc, #72]	@ (8004548 <rand+0x64>)
 8004500:	f000 f9d0 	bl	80048a4 <__assert_func>
 8004504:	4911      	ldr	r1, [pc, #68]	@ (800454c <rand+0x68>)
 8004506:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <rand+0x6c>)
 8004508:	e9c0 1300 	strd	r1, r3, [r0]
 800450c:	4b11      	ldr	r3, [pc, #68]	@ (8004554 <rand+0x70>)
 800450e:	2100      	movs	r1, #0
 8004510:	6083      	str	r3, [r0, #8]
 8004512:	230b      	movs	r3, #11
 8004514:	8183      	strh	r3, [r0, #12]
 8004516:	2001      	movs	r0, #1
 8004518:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800451c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800451e:	480e      	ldr	r0, [pc, #56]	@ (8004558 <rand+0x74>)
 8004520:	690b      	ldr	r3, [r1, #16]
 8004522:	694c      	ldr	r4, [r1, #20]
 8004524:	4358      	muls	r0, r3
 8004526:	4a0d      	ldr	r2, [pc, #52]	@ (800455c <rand+0x78>)
 8004528:	fb02 0004 	mla	r0, r2, r4, r0
 800452c:	fba3 3202 	umull	r3, r2, r3, r2
 8004530:	3301      	adds	r3, #1
 8004532:	eb40 0002 	adc.w	r0, r0, r2
 8004536:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800453a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800453e:	bd10      	pop	{r4, pc}
 8004540:	20000038 	.word	0x20000038
 8004544:	0800a3ca 	.word	0x0800a3ca
 8004548:	0800a3e1 	.word	0x0800a3e1
 800454c:	abcd330e 	.word	0xabcd330e
 8004550:	e66d1234 	.word	0xe66d1234
 8004554:	0005deec 	.word	0x0005deec
 8004558:	5851f42d 	.word	0x5851f42d
 800455c:	4c957f2d 	.word	0x4c957f2d

08004560 <std>:
 8004560:	2300      	movs	r3, #0
 8004562:	b510      	push	{r4, lr}
 8004564:	4604      	mov	r4, r0
 8004566:	e9c0 3300 	strd	r3, r3, [r0]
 800456a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800456e:	6083      	str	r3, [r0, #8]
 8004570:	8181      	strh	r1, [r0, #12]
 8004572:	6643      	str	r3, [r0, #100]	@ 0x64
 8004574:	81c2      	strh	r2, [r0, #14]
 8004576:	6183      	str	r3, [r0, #24]
 8004578:	4619      	mov	r1, r3
 800457a:	2208      	movs	r2, #8
 800457c:	305c      	adds	r0, #92	@ 0x5c
 800457e:	f000 f914 	bl	80047aa <memset>
 8004582:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <std+0x58>)
 8004584:	6224      	str	r4, [r4, #32]
 8004586:	6263      	str	r3, [r4, #36]	@ 0x24
 8004588:	4b0c      	ldr	r3, [pc, #48]	@ (80045bc <std+0x5c>)
 800458a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800458c:	4b0c      	ldr	r3, [pc, #48]	@ (80045c0 <std+0x60>)
 800458e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004590:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <std+0x64>)
 8004592:	6323      	str	r3, [r4, #48]	@ 0x30
 8004594:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <std+0x68>)
 8004596:	429c      	cmp	r4, r3
 8004598:	d006      	beq.n	80045a8 <std+0x48>
 800459a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800459e:	4294      	cmp	r4, r2
 80045a0:	d002      	beq.n	80045a8 <std+0x48>
 80045a2:	33d0      	adds	r3, #208	@ 0xd0
 80045a4:	429c      	cmp	r4, r3
 80045a6:	d105      	bne.n	80045b4 <std+0x54>
 80045a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045b0:	f000 b974 	b.w	800489c <__retarget_lock_init_recursive>
 80045b4:	bd10      	pop	{r4, pc}
 80045b6:	bf00      	nop
 80045b8:	08004725 	.word	0x08004725
 80045bc:	08004747 	.word	0x08004747
 80045c0:	0800477f 	.word	0x0800477f
 80045c4:	080047a3 	.word	0x080047a3
 80045c8:	20000538 	.word	0x20000538

080045cc <stdio_exit_handler>:
 80045cc:	4a02      	ldr	r2, [pc, #8]	@ (80045d8 <stdio_exit_handler+0xc>)
 80045ce:	4903      	ldr	r1, [pc, #12]	@ (80045dc <stdio_exit_handler+0x10>)
 80045d0:	4803      	ldr	r0, [pc, #12]	@ (80045e0 <stdio_exit_handler+0x14>)
 80045d2:	f000 b869 	b.w	80046a8 <_fwalk_sglue>
 80045d6:	bf00      	nop
 80045d8:	2000002c 	.word	0x2000002c
 80045dc:	080051b1 	.word	0x080051b1
 80045e0:	2000003c 	.word	0x2000003c

080045e4 <cleanup_stdio>:
 80045e4:	6841      	ldr	r1, [r0, #4]
 80045e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004618 <cleanup_stdio+0x34>)
 80045e8:	b510      	push	{r4, lr}
 80045ea:	4299      	cmp	r1, r3
 80045ec:	4604      	mov	r4, r0
 80045ee:	d001      	beq.n	80045f4 <cleanup_stdio+0x10>
 80045f0:	f000 fdde 	bl	80051b0 <_fflush_r>
 80045f4:	68a1      	ldr	r1, [r4, #8]
 80045f6:	4b09      	ldr	r3, [pc, #36]	@ (800461c <cleanup_stdio+0x38>)
 80045f8:	4299      	cmp	r1, r3
 80045fa:	d002      	beq.n	8004602 <cleanup_stdio+0x1e>
 80045fc:	4620      	mov	r0, r4
 80045fe:	f000 fdd7 	bl	80051b0 <_fflush_r>
 8004602:	68e1      	ldr	r1, [r4, #12]
 8004604:	4b06      	ldr	r3, [pc, #24]	@ (8004620 <cleanup_stdio+0x3c>)
 8004606:	4299      	cmp	r1, r3
 8004608:	d004      	beq.n	8004614 <cleanup_stdio+0x30>
 800460a:	4620      	mov	r0, r4
 800460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004610:	f000 bdce 	b.w	80051b0 <_fflush_r>
 8004614:	bd10      	pop	{r4, pc}
 8004616:	bf00      	nop
 8004618:	20000538 	.word	0x20000538
 800461c:	200005a0 	.word	0x200005a0
 8004620:	20000608 	.word	0x20000608

08004624 <global_stdio_init.part.0>:
 8004624:	b510      	push	{r4, lr}
 8004626:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <global_stdio_init.part.0+0x30>)
 8004628:	4c0b      	ldr	r4, [pc, #44]	@ (8004658 <global_stdio_init.part.0+0x34>)
 800462a:	4a0c      	ldr	r2, [pc, #48]	@ (800465c <global_stdio_init.part.0+0x38>)
 800462c:	4620      	mov	r0, r4
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	2104      	movs	r1, #4
 8004632:	2200      	movs	r2, #0
 8004634:	f7ff ff94 	bl	8004560 <std>
 8004638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800463c:	2201      	movs	r2, #1
 800463e:	2109      	movs	r1, #9
 8004640:	f7ff ff8e 	bl	8004560 <std>
 8004644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004648:	2202      	movs	r2, #2
 800464a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800464e:	2112      	movs	r1, #18
 8004650:	f7ff bf86 	b.w	8004560 <std>
 8004654:	20000670 	.word	0x20000670
 8004658:	20000538 	.word	0x20000538
 800465c:	080045cd 	.word	0x080045cd

08004660 <__sfp_lock_acquire>:
 8004660:	4801      	ldr	r0, [pc, #4]	@ (8004668 <__sfp_lock_acquire+0x8>)
 8004662:	f000 b91c 	b.w	800489e <__retarget_lock_acquire_recursive>
 8004666:	bf00      	nop
 8004668:	20000679 	.word	0x20000679

0800466c <__sfp_lock_release>:
 800466c:	4801      	ldr	r0, [pc, #4]	@ (8004674 <__sfp_lock_release+0x8>)
 800466e:	f000 b917 	b.w	80048a0 <__retarget_lock_release_recursive>
 8004672:	bf00      	nop
 8004674:	20000679 	.word	0x20000679

08004678 <__sinit>:
 8004678:	b510      	push	{r4, lr}
 800467a:	4604      	mov	r4, r0
 800467c:	f7ff fff0 	bl	8004660 <__sfp_lock_acquire>
 8004680:	6a23      	ldr	r3, [r4, #32]
 8004682:	b11b      	cbz	r3, 800468c <__sinit+0x14>
 8004684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004688:	f7ff bff0 	b.w	800466c <__sfp_lock_release>
 800468c:	4b04      	ldr	r3, [pc, #16]	@ (80046a0 <__sinit+0x28>)
 800468e:	6223      	str	r3, [r4, #32]
 8004690:	4b04      	ldr	r3, [pc, #16]	@ (80046a4 <__sinit+0x2c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f5      	bne.n	8004684 <__sinit+0xc>
 8004698:	f7ff ffc4 	bl	8004624 <global_stdio_init.part.0>
 800469c:	e7f2      	b.n	8004684 <__sinit+0xc>
 800469e:	bf00      	nop
 80046a0:	080045e5 	.word	0x080045e5
 80046a4:	20000670 	.word	0x20000670

080046a8 <_fwalk_sglue>:
 80046a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ac:	4607      	mov	r7, r0
 80046ae:	4688      	mov	r8, r1
 80046b0:	4614      	mov	r4, r2
 80046b2:	2600      	movs	r6, #0
 80046b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046b8:	f1b9 0901 	subs.w	r9, r9, #1
 80046bc:	d505      	bpl.n	80046ca <_fwalk_sglue+0x22>
 80046be:	6824      	ldr	r4, [r4, #0]
 80046c0:	2c00      	cmp	r4, #0
 80046c2:	d1f7      	bne.n	80046b4 <_fwalk_sglue+0xc>
 80046c4:	4630      	mov	r0, r6
 80046c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ca:	89ab      	ldrh	r3, [r5, #12]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d907      	bls.n	80046e0 <_fwalk_sglue+0x38>
 80046d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046d4:	3301      	adds	r3, #1
 80046d6:	d003      	beq.n	80046e0 <_fwalk_sglue+0x38>
 80046d8:	4629      	mov	r1, r5
 80046da:	4638      	mov	r0, r7
 80046dc:	47c0      	blx	r8
 80046de:	4306      	orrs	r6, r0
 80046e0:	3568      	adds	r5, #104	@ 0x68
 80046e2:	e7e9      	b.n	80046b8 <_fwalk_sglue+0x10>

080046e4 <siprintf>:
 80046e4:	b40e      	push	{r1, r2, r3}
 80046e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046ea:	b500      	push	{lr}
 80046ec:	b09c      	sub	sp, #112	@ 0x70
 80046ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80046f0:	9002      	str	r0, [sp, #8]
 80046f2:	9006      	str	r0, [sp, #24]
 80046f4:	9107      	str	r1, [sp, #28]
 80046f6:	9104      	str	r1, [sp, #16]
 80046f8:	4808      	ldr	r0, [pc, #32]	@ (800471c <siprintf+0x38>)
 80046fa:	4909      	ldr	r1, [pc, #36]	@ (8004720 <siprintf+0x3c>)
 80046fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004700:	9105      	str	r1, [sp, #20]
 8004702:	6800      	ldr	r0, [r0, #0]
 8004704:	a902      	add	r1, sp, #8
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	f000 fa44 	bl	8004b94 <_svfiprintf_r>
 800470c:	2200      	movs	r2, #0
 800470e:	9b02      	ldr	r3, [sp, #8]
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	b01c      	add	sp, #112	@ 0x70
 8004714:	f85d eb04 	ldr.w	lr, [sp], #4
 8004718:	b003      	add	sp, #12
 800471a:	4770      	bx	lr
 800471c:	20000038 	.word	0x20000038
 8004720:	ffff0208 	.word	0xffff0208

08004724 <__sread>:
 8004724:	b510      	push	{r4, lr}
 8004726:	460c      	mov	r4, r1
 8004728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800472c:	f000 f868 	bl	8004800 <_read_r>
 8004730:	2800      	cmp	r0, #0
 8004732:	bfab      	itete	ge
 8004734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004736:	89a3      	ldrhlt	r3, [r4, #12]
 8004738:	181b      	addge	r3, r3, r0
 800473a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800473e:	bfac      	ite	ge
 8004740:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004742:	81a3      	strhlt	r3, [r4, #12]
 8004744:	bd10      	pop	{r4, pc}

08004746 <__swrite>:
 8004746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800474a:	461f      	mov	r7, r3
 800474c:	898b      	ldrh	r3, [r1, #12]
 800474e:	4605      	mov	r5, r0
 8004750:	05db      	lsls	r3, r3, #23
 8004752:	460c      	mov	r4, r1
 8004754:	4616      	mov	r6, r2
 8004756:	d505      	bpl.n	8004764 <__swrite+0x1e>
 8004758:	2302      	movs	r3, #2
 800475a:	2200      	movs	r2, #0
 800475c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004760:	f000 f83c 	bl	80047dc <_lseek_r>
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	4632      	mov	r2, r6
 8004768:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800476c:	81a3      	strh	r3, [r4, #12]
 800476e:	4628      	mov	r0, r5
 8004770:	463b      	mov	r3, r7
 8004772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800477a:	f000 b853 	b.w	8004824 <_write_r>

0800477e <__sseek>:
 800477e:	b510      	push	{r4, lr}
 8004780:	460c      	mov	r4, r1
 8004782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004786:	f000 f829 	bl	80047dc <_lseek_r>
 800478a:	1c43      	adds	r3, r0, #1
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	bf15      	itete	ne
 8004790:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800479a:	81a3      	strheq	r3, [r4, #12]
 800479c:	bf18      	it	ne
 800479e:	81a3      	strhne	r3, [r4, #12]
 80047a0:	bd10      	pop	{r4, pc}

080047a2 <__sclose>:
 80047a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a6:	f000 b809 	b.w	80047bc <_close_r>

080047aa <memset>:
 80047aa:	4603      	mov	r3, r0
 80047ac:	4402      	add	r2, r0
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d100      	bne.n	80047b4 <memset+0xa>
 80047b2:	4770      	bx	lr
 80047b4:	f803 1b01 	strb.w	r1, [r3], #1
 80047b8:	e7f9      	b.n	80047ae <memset+0x4>
	...

080047bc <_close_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	2300      	movs	r3, #0
 80047c0:	4d05      	ldr	r5, [pc, #20]	@ (80047d8 <_close_r+0x1c>)
 80047c2:	4604      	mov	r4, r0
 80047c4:	4608      	mov	r0, r1
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	f7fe f8bd 	bl	8002946 <_close>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_close_r+0x1a>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_close_r+0x1a>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	20000674 	.word	0x20000674

080047dc <_lseek_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4604      	mov	r4, r0
 80047e0:	4608      	mov	r0, r1
 80047e2:	4611      	mov	r1, r2
 80047e4:	2200      	movs	r2, #0
 80047e6:	4d05      	ldr	r5, [pc, #20]	@ (80047fc <_lseek_r+0x20>)
 80047e8:	602a      	str	r2, [r5, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f7fe f8cf 	bl	800298e <_lseek>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_lseek_r+0x1e>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_lseek_r+0x1e>
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	20000674 	.word	0x20000674

08004800 <_read_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4604      	mov	r4, r0
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	2200      	movs	r2, #0
 800480a:	4d05      	ldr	r5, [pc, #20]	@ (8004820 <_read_r+0x20>)
 800480c:	602a      	str	r2, [r5, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f7fe f860 	bl	80028d4 <_read>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_read_r+0x1e>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_read_r+0x1e>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	20000674 	.word	0x20000674

08004824 <_write_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4604      	mov	r4, r0
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	2200      	movs	r2, #0
 800482e:	4d05      	ldr	r5, [pc, #20]	@ (8004844 <_write_r+0x20>)
 8004830:	602a      	str	r2, [r5, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	f7fe f86b 	bl	800290e <_write>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_write_r+0x1e>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b103      	cbz	r3, 8004842 <_write_r+0x1e>
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	20000674 	.word	0x20000674

08004848 <__errno>:
 8004848:	4b01      	ldr	r3, [pc, #4]	@ (8004850 <__errno+0x8>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000038 	.word	0x20000038

08004854 <__libc_init_array>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	2600      	movs	r6, #0
 8004858:	4d0c      	ldr	r5, [pc, #48]	@ (800488c <__libc_init_array+0x38>)
 800485a:	4c0d      	ldr	r4, [pc, #52]	@ (8004890 <__libc_init_array+0x3c>)
 800485c:	1b64      	subs	r4, r4, r5
 800485e:	10a4      	asrs	r4, r4, #2
 8004860:	42a6      	cmp	r6, r4
 8004862:	d109      	bne.n	8004878 <__libc_init_array+0x24>
 8004864:	f002 f818 	bl	8006898 <_init>
 8004868:	2600      	movs	r6, #0
 800486a:	4d0a      	ldr	r5, [pc, #40]	@ (8004894 <__libc_init_array+0x40>)
 800486c:	4c0a      	ldr	r4, [pc, #40]	@ (8004898 <__libc_init_array+0x44>)
 800486e:	1b64      	subs	r4, r4, r5
 8004870:	10a4      	asrs	r4, r4, #2
 8004872:	42a6      	cmp	r6, r4
 8004874:	d105      	bne.n	8004882 <__libc_init_array+0x2e>
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	f855 3b04 	ldr.w	r3, [r5], #4
 800487c:	4798      	blx	r3
 800487e:	3601      	adds	r6, #1
 8004880:	e7ee      	b.n	8004860 <__libc_init_array+0xc>
 8004882:	f855 3b04 	ldr.w	r3, [r5], #4
 8004886:	4798      	blx	r3
 8004888:	3601      	adds	r6, #1
 800488a:	e7f2      	b.n	8004872 <__libc_init_array+0x1e>
 800488c:	0800a680 	.word	0x0800a680
 8004890:	0800a680 	.word	0x0800a680
 8004894:	0800a680 	.word	0x0800a680
 8004898:	0800a684 	.word	0x0800a684

0800489c <__retarget_lock_init_recursive>:
 800489c:	4770      	bx	lr

0800489e <__retarget_lock_acquire_recursive>:
 800489e:	4770      	bx	lr

080048a0 <__retarget_lock_release_recursive>:
 80048a0:	4770      	bx	lr
	...

080048a4 <__assert_func>:
 80048a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048a6:	4614      	mov	r4, r2
 80048a8:	461a      	mov	r2, r3
 80048aa:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <__assert_func+0x2c>)
 80048ac:	4605      	mov	r5, r0
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68d8      	ldr	r0, [r3, #12]
 80048b2:	b954      	cbnz	r4, 80048ca <__assert_func+0x26>
 80048b4:	4b07      	ldr	r3, [pc, #28]	@ (80048d4 <__assert_func+0x30>)
 80048b6:	461c      	mov	r4, r3
 80048b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80048bc:	9100      	str	r1, [sp, #0]
 80048be:	462b      	mov	r3, r5
 80048c0:	4905      	ldr	r1, [pc, #20]	@ (80048d8 <__assert_func+0x34>)
 80048c2:	f000 fc9d 	bl	8005200 <fiprintf>
 80048c6:	f000 fcf3 	bl	80052b0 <abort>
 80048ca:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <__assert_func+0x38>)
 80048cc:	e7f4      	b.n	80048b8 <__assert_func+0x14>
 80048ce:	bf00      	nop
 80048d0:	20000038 	.word	0x20000038
 80048d4:	0800a474 	.word	0x0800a474
 80048d8:	0800a446 	.word	0x0800a446
 80048dc:	0800a439 	.word	0x0800a439

080048e0 <_free_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4605      	mov	r5, r0
 80048e4:	2900      	cmp	r1, #0
 80048e6:	d040      	beq.n	800496a <_free_r+0x8a>
 80048e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ec:	1f0c      	subs	r4, r1, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bfb8      	it	lt
 80048f2:	18e4      	addlt	r4, r4, r3
 80048f4:	f000 f8e6 	bl	8004ac4 <__malloc_lock>
 80048f8:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <_free_r+0x8c>)
 80048fa:	6813      	ldr	r3, [r2, #0]
 80048fc:	b933      	cbnz	r3, 800490c <_free_r+0x2c>
 80048fe:	6063      	str	r3, [r4, #4]
 8004900:	6014      	str	r4, [r2, #0]
 8004902:	4628      	mov	r0, r5
 8004904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004908:	f000 b8e2 	b.w	8004ad0 <__malloc_unlock>
 800490c:	42a3      	cmp	r3, r4
 800490e:	d908      	bls.n	8004922 <_free_r+0x42>
 8004910:	6820      	ldr	r0, [r4, #0]
 8004912:	1821      	adds	r1, r4, r0
 8004914:	428b      	cmp	r3, r1
 8004916:	bf01      	itttt	eq
 8004918:	6819      	ldreq	r1, [r3, #0]
 800491a:	685b      	ldreq	r3, [r3, #4]
 800491c:	1809      	addeq	r1, r1, r0
 800491e:	6021      	streq	r1, [r4, #0]
 8004920:	e7ed      	b.n	80048fe <_free_r+0x1e>
 8004922:	461a      	mov	r2, r3
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	b10b      	cbz	r3, 800492c <_free_r+0x4c>
 8004928:	42a3      	cmp	r3, r4
 800492a:	d9fa      	bls.n	8004922 <_free_r+0x42>
 800492c:	6811      	ldr	r1, [r2, #0]
 800492e:	1850      	adds	r0, r2, r1
 8004930:	42a0      	cmp	r0, r4
 8004932:	d10b      	bne.n	800494c <_free_r+0x6c>
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	4401      	add	r1, r0
 8004938:	1850      	adds	r0, r2, r1
 800493a:	4283      	cmp	r3, r0
 800493c:	6011      	str	r1, [r2, #0]
 800493e:	d1e0      	bne.n	8004902 <_free_r+0x22>
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4408      	add	r0, r1
 8004946:	6010      	str	r0, [r2, #0]
 8004948:	6053      	str	r3, [r2, #4]
 800494a:	e7da      	b.n	8004902 <_free_r+0x22>
 800494c:	d902      	bls.n	8004954 <_free_r+0x74>
 800494e:	230c      	movs	r3, #12
 8004950:	602b      	str	r3, [r5, #0]
 8004952:	e7d6      	b.n	8004902 <_free_r+0x22>
 8004954:	6820      	ldr	r0, [r4, #0]
 8004956:	1821      	adds	r1, r4, r0
 8004958:	428b      	cmp	r3, r1
 800495a:	bf01      	itttt	eq
 800495c:	6819      	ldreq	r1, [r3, #0]
 800495e:	685b      	ldreq	r3, [r3, #4]
 8004960:	1809      	addeq	r1, r1, r0
 8004962:	6021      	streq	r1, [r4, #0]
 8004964:	6063      	str	r3, [r4, #4]
 8004966:	6054      	str	r4, [r2, #4]
 8004968:	e7cb      	b.n	8004902 <_free_r+0x22>
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	20000680 	.word	0x20000680

08004970 <malloc>:
 8004970:	4b02      	ldr	r3, [pc, #8]	@ (800497c <malloc+0xc>)
 8004972:	4601      	mov	r1, r0
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	f000 b825 	b.w	80049c4 <_malloc_r>
 800497a:	bf00      	nop
 800497c:	20000038 	.word	0x20000038

08004980 <sbrk_aligned>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	4e0f      	ldr	r6, [pc, #60]	@ (80049c0 <sbrk_aligned+0x40>)
 8004984:	460c      	mov	r4, r1
 8004986:	6831      	ldr	r1, [r6, #0]
 8004988:	4605      	mov	r5, r0
 800498a:	b911      	cbnz	r1, 8004992 <sbrk_aligned+0x12>
 800498c:	f000 fc64 	bl	8005258 <_sbrk_r>
 8004990:	6030      	str	r0, [r6, #0]
 8004992:	4621      	mov	r1, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 fc5f 	bl	8005258 <_sbrk_r>
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	d103      	bne.n	80049a6 <sbrk_aligned+0x26>
 800499e:	f04f 34ff 	mov.w	r4, #4294967295
 80049a2:	4620      	mov	r0, r4
 80049a4:	bd70      	pop	{r4, r5, r6, pc}
 80049a6:	1cc4      	adds	r4, r0, #3
 80049a8:	f024 0403 	bic.w	r4, r4, #3
 80049ac:	42a0      	cmp	r0, r4
 80049ae:	d0f8      	beq.n	80049a2 <sbrk_aligned+0x22>
 80049b0:	1a21      	subs	r1, r4, r0
 80049b2:	4628      	mov	r0, r5
 80049b4:	f000 fc50 	bl	8005258 <_sbrk_r>
 80049b8:	3001      	adds	r0, #1
 80049ba:	d1f2      	bne.n	80049a2 <sbrk_aligned+0x22>
 80049bc:	e7ef      	b.n	800499e <sbrk_aligned+0x1e>
 80049be:	bf00      	nop
 80049c0:	2000067c 	.word	0x2000067c

080049c4 <_malloc_r>:
 80049c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c8:	1ccd      	adds	r5, r1, #3
 80049ca:	f025 0503 	bic.w	r5, r5, #3
 80049ce:	3508      	adds	r5, #8
 80049d0:	2d0c      	cmp	r5, #12
 80049d2:	bf38      	it	cc
 80049d4:	250c      	movcc	r5, #12
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	4606      	mov	r6, r0
 80049da:	db01      	blt.n	80049e0 <_malloc_r+0x1c>
 80049dc:	42a9      	cmp	r1, r5
 80049de:	d904      	bls.n	80049ea <_malloc_r+0x26>
 80049e0:	230c      	movs	r3, #12
 80049e2:	6033      	str	r3, [r6, #0]
 80049e4:	2000      	movs	r0, #0
 80049e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ac0 <_malloc_r+0xfc>
 80049ee:	f000 f869 	bl	8004ac4 <__malloc_lock>
 80049f2:	f8d8 3000 	ldr.w	r3, [r8]
 80049f6:	461c      	mov	r4, r3
 80049f8:	bb44      	cbnz	r4, 8004a4c <_malloc_r+0x88>
 80049fa:	4629      	mov	r1, r5
 80049fc:	4630      	mov	r0, r6
 80049fe:	f7ff ffbf 	bl	8004980 <sbrk_aligned>
 8004a02:	1c43      	adds	r3, r0, #1
 8004a04:	4604      	mov	r4, r0
 8004a06:	d158      	bne.n	8004aba <_malloc_r+0xf6>
 8004a08:	f8d8 4000 	ldr.w	r4, [r8]
 8004a0c:	4627      	mov	r7, r4
 8004a0e:	2f00      	cmp	r7, #0
 8004a10:	d143      	bne.n	8004a9a <_malloc_r+0xd6>
 8004a12:	2c00      	cmp	r4, #0
 8004a14:	d04b      	beq.n	8004aae <_malloc_r+0xea>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	4639      	mov	r1, r7
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	eb04 0903 	add.w	r9, r4, r3
 8004a20:	f000 fc1a 	bl	8005258 <_sbrk_r>
 8004a24:	4581      	cmp	r9, r0
 8004a26:	d142      	bne.n	8004aae <_malloc_r+0xea>
 8004a28:	6821      	ldr	r1, [r4, #0]
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	1a6d      	subs	r5, r5, r1
 8004a2e:	4629      	mov	r1, r5
 8004a30:	f7ff ffa6 	bl	8004980 <sbrk_aligned>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d03a      	beq.n	8004aae <_malloc_r+0xea>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	442b      	add	r3, r5
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	bb62      	cbnz	r2, 8004aa0 <_malloc_r+0xdc>
 8004a46:	f8c8 7000 	str.w	r7, [r8]
 8004a4a:	e00f      	b.n	8004a6c <_malloc_r+0xa8>
 8004a4c:	6822      	ldr	r2, [r4, #0]
 8004a4e:	1b52      	subs	r2, r2, r5
 8004a50:	d420      	bmi.n	8004a94 <_malloc_r+0xd0>
 8004a52:	2a0b      	cmp	r2, #11
 8004a54:	d917      	bls.n	8004a86 <_malloc_r+0xc2>
 8004a56:	1961      	adds	r1, r4, r5
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	6025      	str	r5, [r4, #0]
 8004a5c:	bf18      	it	ne
 8004a5e:	6059      	strne	r1, [r3, #4]
 8004a60:	6863      	ldr	r3, [r4, #4]
 8004a62:	bf08      	it	eq
 8004a64:	f8c8 1000 	streq.w	r1, [r8]
 8004a68:	5162      	str	r2, [r4, r5]
 8004a6a:	604b      	str	r3, [r1, #4]
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f000 f82f 	bl	8004ad0 <__malloc_unlock>
 8004a72:	f104 000b 	add.w	r0, r4, #11
 8004a76:	1d23      	adds	r3, r4, #4
 8004a78:	f020 0007 	bic.w	r0, r0, #7
 8004a7c:	1ac2      	subs	r2, r0, r3
 8004a7e:	bf1c      	itt	ne
 8004a80:	1a1b      	subne	r3, r3, r0
 8004a82:	50a3      	strne	r3, [r4, r2]
 8004a84:	e7af      	b.n	80049e6 <_malloc_r+0x22>
 8004a86:	6862      	ldr	r2, [r4, #4]
 8004a88:	42a3      	cmp	r3, r4
 8004a8a:	bf0c      	ite	eq
 8004a8c:	f8c8 2000 	streq.w	r2, [r8]
 8004a90:	605a      	strne	r2, [r3, #4]
 8004a92:	e7eb      	b.n	8004a6c <_malloc_r+0xa8>
 8004a94:	4623      	mov	r3, r4
 8004a96:	6864      	ldr	r4, [r4, #4]
 8004a98:	e7ae      	b.n	80049f8 <_malloc_r+0x34>
 8004a9a:	463c      	mov	r4, r7
 8004a9c:	687f      	ldr	r7, [r7, #4]
 8004a9e:	e7b6      	b.n	8004a0e <_malloc_r+0x4a>
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	42a3      	cmp	r3, r4
 8004aa6:	d1fb      	bne.n	8004aa0 <_malloc_r+0xdc>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	6053      	str	r3, [r2, #4]
 8004aac:	e7de      	b.n	8004a6c <_malloc_r+0xa8>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	6033      	str	r3, [r6, #0]
 8004ab4:	f000 f80c 	bl	8004ad0 <__malloc_unlock>
 8004ab8:	e794      	b.n	80049e4 <_malloc_r+0x20>
 8004aba:	6005      	str	r5, [r0, #0]
 8004abc:	e7d6      	b.n	8004a6c <_malloc_r+0xa8>
 8004abe:	bf00      	nop
 8004ac0:	20000680 	.word	0x20000680

08004ac4 <__malloc_lock>:
 8004ac4:	4801      	ldr	r0, [pc, #4]	@ (8004acc <__malloc_lock+0x8>)
 8004ac6:	f7ff beea 	b.w	800489e <__retarget_lock_acquire_recursive>
 8004aca:	bf00      	nop
 8004acc:	20000678 	.word	0x20000678

08004ad0 <__malloc_unlock>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	@ (8004ad8 <__malloc_unlock+0x8>)
 8004ad2:	f7ff bee5 	b.w	80048a0 <__retarget_lock_release_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	20000678 	.word	0x20000678

08004adc <__ssputs_r>:
 8004adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	461f      	mov	r7, r3
 8004ae2:	688e      	ldr	r6, [r1, #8]
 8004ae4:	4682      	mov	sl, r0
 8004ae6:	42be      	cmp	r6, r7
 8004ae8:	460c      	mov	r4, r1
 8004aea:	4690      	mov	r8, r2
 8004aec:	680b      	ldr	r3, [r1, #0]
 8004aee:	d82d      	bhi.n	8004b4c <__ssputs_r+0x70>
 8004af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004af4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004af8:	d026      	beq.n	8004b48 <__ssputs_r+0x6c>
 8004afa:	6965      	ldr	r5, [r4, #20]
 8004afc:	6909      	ldr	r1, [r1, #16]
 8004afe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b02:	eba3 0901 	sub.w	r9, r3, r1
 8004b06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b0a:	1c7b      	adds	r3, r7, #1
 8004b0c:	444b      	add	r3, r9
 8004b0e:	106d      	asrs	r5, r5, #1
 8004b10:	429d      	cmp	r5, r3
 8004b12:	bf38      	it	cc
 8004b14:	461d      	movcc	r5, r3
 8004b16:	0553      	lsls	r3, r2, #21
 8004b18:	d527      	bpl.n	8004b6a <__ssputs_r+0x8e>
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	f7ff ff52 	bl	80049c4 <_malloc_r>
 8004b20:	4606      	mov	r6, r0
 8004b22:	b360      	cbz	r0, 8004b7e <__ssputs_r+0xa2>
 8004b24:	464a      	mov	r2, r9
 8004b26:	6921      	ldr	r1, [r4, #16]
 8004b28:	f000 fbb4 	bl	8005294 <memcpy>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	6126      	str	r6, [r4, #16]
 8004b3a:	444e      	add	r6, r9
 8004b3c:	6026      	str	r6, [r4, #0]
 8004b3e:	463e      	mov	r6, r7
 8004b40:	6165      	str	r5, [r4, #20]
 8004b42:	eba5 0509 	sub.w	r5, r5, r9
 8004b46:	60a5      	str	r5, [r4, #8]
 8004b48:	42be      	cmp	r6, r7
 8004b4a:	d900      	bls.n	8004b4e <__ssputs_r+0x72>
 8004b4c:	463e      	mov	r6, r7
 8004b4e:	4632      	mov	r2, r6
 8004b50:	4641      	mov	r1, r8
 8004b52:	6820      	ldr	r0, [r4, #0]
 8004b54:	f000 fb66 	bl	8005224 <memmove>
 8004b58:	2000      	movs	r0, #0
 8004b5a:	68a3      	ldr	r3, [r4, #8]
 8004b5c:	1b9b      	subs	r3, r3, r6
 8004b5e:	60a3      	str	r3, [r4, #8]
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	4433      	add	r3, r6
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6a:	462a      	mov	r2, r5
 8004b6c:	f000 fba7 	bl	80052be <_realloc_r>
 8004b70:	4606      	mov	r6, r0
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d1e0      	bne.n	8004b38 <__ssputs_r+0x5c>
 8004b76:	4650      	mov	r0, sl
 8004b78:	6921      	ldr	r1, [r4, #16]
 8004b7a:	f7ff feb1 	bl	80048e0 <_free_r>
 8004b7e:	230c      	movs	r3, #12
 8004b80:	f8ca 3000 	str.w	r3, [sl]
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	e7e9      	b.n	8004b66 <__ssputs_r+0x8a>
	...

08004b94 <_svfiprintf_r>:
 8004b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	4698      	mov	r8, r3
 8004b9a:	898b      	ldrh	r3, [r1, #12]
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	061b      	lsls	r3, r3, #24
 8004ba0:	460d      	mov	r5, r1
 8004ba2:	4614      	mov	r4, r2
 8004ba4:	b09d      	sub	sp, #116	@ 0x74
 8004ba6:	d510      	bpl.n	8004bca <_svfiprintf_r+0x36>
 8004ba8:	690b      	ldr	r3, [r1, #16]
 8004baa:	b973      	cbnz	r3, 8004bca <_svfiprintf_r+0x36>
 8004bac:	2140      	movs	r1, #64	@ 0x40
 8004bae:	f7ff ff09 	bl	80049c4 <_malloc_r>
 8004bb2:	6028      	str	r0, [r5, #0]
 8004bb4:	6128      	str	r0, [r5, #16]
 8004bb6:	b930      	cbnz	r0, 8004bc6 <_svfiprintf_r+0x32>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	b01d      	add	sp, #116	@ 0x74
 8004bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc6:	2340      	movs	r3, #64	@ 0x40
 8004bc8:	616b      	str	r3, [r5, #20]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bce:	2320      	movs	r3, #32
 8004bd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bd4:	2330      	movs	r3, #48	@ 0x30
 8004bd6:	f04f 0901 	mov.w	r9, #1
 8004bda:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004d78 <_svfiprintf_r+0x1e4>
 8004be2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004be6:	4623      	mov	r3, r4
 8004be8:	469a      	mov	sl, r3
 8004bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bee:	b10a      	cbz	r2, 8004bf4 <_svfiprintf_r+0x60>
 8004bf0:	2a25      	cmp	r2, #37	@ 0x25
 8004bf2:	d1f9      	bne.n	8004be8 <_svfiprintf_r+0x54>
 8004bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8004bf8:	d00b      	beq.n	8004c12 <_svfiprintf_r+0x7e>
 8004bfa:	465b      	mov	r3, fp
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	4629      	mov	r1, r5
 8004c00:	4638      	mov	r0, r7
 8004c02:	f7ff ff6b 	bl	8004adc <__ssputs_r>
 8004c06:	3001      	adds	r0, #1
 8004c08:	f000 80a7 	beq.w	8004d5a <_svfiprintf_r+0x1c6>
 8004c0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c0e:	445a      	add	r2, fp
 8004c10:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c12:	f89a 3000 	ldrb.w	r3, [sl]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 809f 	beq.w	8004d5a <_svfiprintf_r+0x1c6>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c26:	f10a 0a01 	add.w	sl, sl, #1
 8004c2a:	9304      	str	r3, [sp, #16]
 8004c2c:	9307      	str	r3, [sp, #28]
 8004c2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c32:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c34:	4654      	mov	r4, sl
 8004c36:	2205      	movs	r2, #5
 8004c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c3c:	484e      	ldr	r0, [pc, #312]	@ (8004d78 <_svfiprintf_r+0x1e4>)
 8004c3e:	f000 fb1b 	bl	8005278 <memchr>
 8004c42:	9a04      	ldr	r2, [sp, #16]
 8004c44:	b9d8      	cbnz	r0, 8004c7e <_svfiprintf_r+0xea>
 8004c46:	06d0      	lsls	r0, r2, #27
 8004c48:	bf44      	itt	mi
 8004c4a:	2320      	movmi	r3, #32
 8004c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c50:	0711      	lsls	r1, r2, #28
 8004c52:	bf44      	itt	mi
 8004c54:	232b      	movmi	r3, #43	@ 0x2b
 8004c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c60:	d015      	beq.n	8004c8e <_svfiprintf_r+0xfa>
 8004c62:	4654      	mov	r4, sl
 8004c64:	2000      	movs	r0, #0
 8004c66:	f04f 0c0a 	mov.w	ip, #10
 8004c6a:	9a07      	ldr	r2, [sp, #28]
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c72:	3b30      	subs	r3, #48	@ 0x30
 8004c74:	2b09      	cmp	r3, #9
 8004c76:	d94b      	bls.n	8004d10 <_svfiprintf_r+0x17c>
 8004c78:	b1b0      	cbz	r0, 8004ca8 <_svfiprintf_r+0x114>
 8004c7a:	9207      	str	r2, [sp, #28]
 8004c7c:	e014      	b.n	8004ca8 <_svfiprintf_r+0x114>
 8004c7e:	eba0 0308 	sub.w	r3, r0, r8
 8004c82:	fa09 f303 	lsl.w	r3, r9, r3
 8004c86:	4313      	orrs	r3, r2
 8004c88:	46a2      	mov	sl, r4
 8004c8a:	9304      	str	r3, [sp, #16]
 8004c8c:	e7d2      	b.n	8004c34 <_svfiprintf_r+0xa0>
 8004c8e:	9b03      	ldr	r3, [sp, #12]
 8004c90:	1d19      	adds	r1, r3, #4
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	9103      	str	r1, [sp, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bfbb      	ittet	lt
 8004c9a:	425b      	neglt	r3, r3
 8004c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8004ca0:	9307      	strge	r3, [sp, #28]
 8004ca2:	9307      	strlt	r3, [sp, #28]
 8004ca4:	bfb8      	it	lt
 8004ca6:	9204      	strlt	r2, [sp, #16]
 8004ca8:	7823      	ldrb	r3, [r4, #0]
 8004caa:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cac:	d10a      	bne.n	8004cc4 <_svfiprintf_r+0x130>
 8004cae:	7863      	ldrb	r3, [r4, #1]
 8004cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cb2:	d132      	bne.n	8004d1a <_svfiprintf_r+0x186>
 8004cb4:	9b03      	ldr	r3, [sp, #12]
 8004cb6:	3402      	adds	r4, #2
 8004cb8:	1d1a      	adds	r2, r3, #4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	9203      	str	r2, [sp, #12]
 8004cbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cc2:	9305      	str	r3, [sp, #20]
 8004cc4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004d7c <_svfiprintf_r+0x1e8>
 8004cc8:	2203      	movs	r2, #3
 8004cca:	4650      	mov	r0, sl
 8004ccc:	7821      	ldrb	r1, [r4, #0]
 8004cce:	f000 fad3 	bl	8005278 <memchr>
 8004cd2:	b138      	cbz	r0, 8004ce4 <_svfiprintf_r+0x150>
 8004cd4:	2240      	movs	r2, #64	@ 0x40
 8004cd6:	9b04      	ldr	r3, [sp, #16]
 8004cd8:	eba0 000a 	sub.w	r0, r0, sl
 8004cdc:	4082      	lsls	r2, r0
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	3401      	adds	r4, #1
 8004ce2:	9304      	str	r3, [sp, #16]
 8004ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ce8:	2206      	movs	r2, #6
 8004cea:	4825      	ldr	r0, [pc, #148]	@ (8004d80 <_svfiprintf_r+0x1ec>)
 8004cec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cf0:	f000 fac2 	bl	8005278 <memchr>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d036      	beq.n	8004d66 <_svfiprintf_r+0x1d2>
 8004cf8:	4b22      	ldr	r3, [pc, #136]	@ (8004d84 <_svfiprintf_r+0x1f0>)
 8004cfa:	bb1b      	cbnz	r3, 8004d44 <_svfiprintf_r+0x1b0>
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	3307      	adds	r3, #7
 8004d00:	f023 0307 	bic.w	r3, r3, #7
 8004d04:	3308      	adds	r3, #8
 8004d06:	9303      	str	r3, [sp, #12]
 8004d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d0a:	4433      	add	r3, r6
 8004d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d0e:	e76a      	b.n	8004be6 <_svfiprintf_r+0x52>
 8004d10:	460c      	mov	r4, r1
 8004d12:	2001      	movs	r0, #1
 8004d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d18:	e7a8      	b.n	8004c6c <_svfiprintf_r+0xd8>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f04f 0c0a 	mov.w	ip, #10
 8004d20:	4619      	mov	r1, r3
 8004d22:	3401      	adds	r4, #1
 8004d24:	9305      	str	r3, [sp, #20]
 8004d26:	4620      	mov	r0, r4
 8004d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d2c:	3a30      	subs	r2, #48	@ 0x30
 8004d2e:	2a09      	cmp	r2, #9
 8004d30:	d903      	bls.n	8004d3a <_svfiprintf_r+0x1a6>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0c6      	beq.n	8004cc4 <_svfiprintf_r+0x130>
 8004d36:	9105      	str	r1, [sp, #20]
 8004d38:	e7c4      	b.n	8004cc4 <_svfiprintf_r+0x130>
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d42:	e7f0      	b.n	8004d26 <_svfiprintf_r+0x192>
 8004d44:	ab03      	add	r3, sp, #12
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	462a      	mov	r2, r5
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d88 <_svfiprintf_r+0x1f4>)
 8004d4e:	a904      	add	r1, sp, #16
 8004d50:	f3af 8000 	nop.w
 8004d54:	1c42      	adds	r2, r0, #1
 8004d56:	4606      	mov	r6, r0
 8004d58:	d1d6      	bne.n	8004d08 <_svfiprintf_r+0x174>
 8004d5a:	89ab      	ldrh	r3, [r5, #12]
 8004d5c:	065b      	lsls	r3, r3, #25
 8004d5e:	f53f af2d 	bmi.w	8004bbc <_svfiprintf_r+0x28>
 8004d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d64:	e72c      	b.n	8004bc0 <_svfiprintf_r+0x2c>
 8004d66:	ab03      	add	r3, sp, #12
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	462a      	mov	r2, r5
 8004d6c:	4638      	mov	r0, r7
 8004d6e:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <_svfiprintf_r+0x1f4>)
 8004d70:	a904      	add	r1, sp, #16
 8004d72:	f000 f87d 	bl	8004e70 <_printf_i>
 8004d76:	e7ed      	b.n	8004d54 <_svfiprintf_r+0x1c0>
 8004d78:	0800a475 	.word	0x0800a475
 8004d7c:	0800a47b 	.word	0x0800a47b
 8004d80:	0800a47f 	.word	0x0800a47f
 8004d84:	00000000 	.word	0x00000000
 8004d88:	08004add 	.word	0x08004add

08004d8c <_printf_common>:
 8004d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d90:	4616      	mov	r6, r2
 8004d92:	4698      	mov	r8, r3
 8004d94:	688a      	ldr	r2, [r1, #8]
 8004d96:	690b      	ldr	r3, [r1, #16]
 8004d98:	4607      	mov	r7, r0
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	bfb8      	it	lt
 8004d9e:	4613      	movlt	r3, r2
 8004da0:	6033      	str	r3, [r6, #0]
 8004da2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004da6:	460c      	mov	r4, r1
 8004da8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004dac:	b10a      	cbz	r2, 8004db2 <_printf_common+0x26>
 8004dae:	3301      	adds	r3, #1
 8004db0:	6033      	str	r3, [r6, #0]
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	0699      	lsls	r1, r3, #26
 8004db6:	bf42      	ittt	mi
 8004db8:	6833      	ldrmi	r3, [r6, #0]
 8004dba:	3302      	addmi	r3, #2
 8004dbc:	6033      	strmi	r3, [r6, #0]
 8004dbe:	6825      	ldr	r5, [r4, #0]
 8004dc0:	f015 0506 	ands.w	r5, r5, #6
 8004dc4:	d106      	bne.n	8004dd4 <_printf_common+0x48>
 8004dc6:	f104 0a19 	add.w	sl, r4, #25
 8004dca:	68e3      	ldr	r3, [r4, #12]
 8004dcc:	6832      	ldr	r2, [r6, #0]
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	42ab      	cmp	r3, r5
 8004dd2:	dc2b      	bgt.n	8004e2c <_printf_common+0xa0>
 8004dd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dd8:	6822      	ldr	r2, [r4, #0]
 8004dda:	3b00      	subs	r3, #0
 8004ddc:	bf18      	it	ne
 8004dde:	2301      	movne	r3, #1
 8004de0:	0692      	lsls	r2, r2, #26
 8004de2:	d430      	bmi.n	8004e46 <_printf_common+0xba>
 8004de4:	4641      	mov	r1, r8
 8004de6:	4638      	mov	r0, r7
 8004de8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dec:	47c8      	blx	r9
 8004dee:	3001      	adds	r0, #1
 8004df0:	d023      	beq.n	8004e3a <_printf_common+0xae>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	6922      	ldr	r2, [r4, #16]
 8004df6:	f003 0306 	and.w	r3, r3, #6
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	bf14      	ite	ne
 8004dfe:	2500      	movne	r5, #0
 8004e00:	6833      	ldreq	r3, [r6, #0]
 8004e02:	f04f 0600 	mov.w	r6, #0
 8004e06:	bf08      	it	eq
 8004e08:	68e5      	ldreq	r5, [r4, #12]
 8004e0a:	f104 041a 	add.w	r4, r4, #26
 8004e0e:	bf08      	it	eq
 8004e10:	1aed      	subeq	r5, r5, r3
 8004e12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e16:	bf08      	it	eq
 8004e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	bfc4      	itt	gt
 8004e20:	1a9b      	subgt	r3, r3, r2
 8004e22:	18ed      	addgt	r5, r5, r3
 8004e24:	42b5      	cmp	r5, r6
 8004e26:	d11a      	bne.n	8004e5e <_printf_common+0xd2>
 8004e28:	2000      	movs	r0, #0
 8004e2a:	e008      	b.n	8004e3e <_printf_common+0xb2>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4652      	mov	r2, sl
 8004e30:	4641      	mov	r1, r8
 8004e32:	4638      	mov	r0, r7
 8004e34:	47c8      	blx	r9
 8004e36:	3001      	adds	r0, #1
 8004e38:	d103      	bne.n	8004e42 <_printf_common+0xb6>
 8004e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e42:	3501      	adds	r5, #1
 8004e44:	e7c1      	b.n	8004dca <_printf_common+0x3e>
 8004e46:	2030      	movs	r0, #48	@ 0x30
 8004e48:	18e1      	adds	r1, r4, r3
 8004e4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e54:	4422      	add	r2, r4
 8004e56:	3302      	adds	r3, #2
 8004e58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e5c:	e7c2      	b.n	8004de4 <_printf_common+0x58>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	4622      	mov	r2, r4
 8004e62:	4641      	mov	r1, r8
 8004e64:	4638      	mov	r0, r7
 8004e66:	47c8      	blx	r9
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d0e6      	beq.n	8004e3a <_printf_common+0xae>
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	e7d9      	b.n	8004e24 <_printf_common+0x98>

08004e70 <_printf_i>:
 8004e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e74:	7e0f      	ldrb	r7, [r1, #24]
 8004e76:	4691      	mov	r9, r2
 8004e78:	2f78      	cmp	r7, #120	@ 0x78
 8004e7a:	4680      	mov	r8, r0
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	469a      	mov	sl, r3
 8004e80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e86:	d807      	bhi.n	8004e98 <_printf_i+0x28>
 8004e88:	2f62      	cmp	r7, #98	@ 0x62
 8004e8a:	d80a      	bhi.n	8004ea2 <_printf_i+0x32>
 8004e8c:	2f00      	cmp	r7, #0
 8004e8e:	f000 80d3 	beq.w	8005038 <_printf_i+0x1c8>
 8004e92:	2f58      	cmp	r7, #88	@ 0x58
 8004e94:	f000 80ba 	beq.w	800500c <_printf_i+0x19c>
 8004e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ea0:	e03a      	b.n	8004f18 <_printf_i+0xa8>
 8004ea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ea6:	2b15      	cmp	r3, #21
 8004ea8:	d8f6      	bhi.n	8004e98 <_printf_i+0x28>
 8004eaa:	a101      	add	r1, pc, #4	@ (adr r1, 8004eb0 <_printf_i+0x40>)
 8004eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004eb0:	08004f09 	.word	0x08004f09
 8004eb4:	08004f1d 	.word	0x08004f1d
 8004eb8:	08004e99 	.word	0x08004e99
 8004ebc:	08004e99 	.word	0x08004e99
 8004ec0:	08004e99 	.word	0x08004e99
 8004ec4:	08004e99 	.word	0x08004e99
 8004ec8:	08004f1d 	.word	0x08004f1d
 8004ecc:	08004e99 	.word	0x08004e99
 8004ed0:	08004e99 	.word	0x08004e99
 8004ed4:	08004e99 	.word	0x08004e99
 8004ed8:	08004e99 	.word	0x08004e99
 8004edc:	0800501f 	.word	0x0800501f
 8004ee0:	08004f47 	.word	0x08004f47
 8004ee4:	08004fd9 	.word	0x08004fd9
 8004ee8:	08004e99 	.word	0x08004e99
 8004eec:	08004e99 	.word	0x08004e99
 8004ef0:	08005041 	.word	0x08005041
 8004ef4:	08004e99 	.word	0x08004e99
 8004ef8:	08004f47 	.word	0x08004f47
 8004efc:	08004e99 	.word	0x08004e99
 8004f00:	08004e99 	.word	0x08004e99
 8004f04:	08004fe1 	.word	0x08004fe1
 8004f08:	6833      	ldr	r3, [r6, #0]
 8004f0a:	1d1a      	adds	r2, r3, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6032      	str	r2, [r6, #0]
 8004f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e09e      	b.n	800505a <_printf_i+0x1ea>
 8004f1c:	6833      	ldr	r3, [r6, #0]
 8004f1e:	6820      	ldr	r0, [r4, #0]
 8004f20:	1d19      	adds	r1, r3, #4
 8004f22:	6031      	str	r1, [r6, #0]
 8004f24:	0606      	lsls	r6, r0, #24
 8004f26:	d501      	bpl.n	8004f2c <_printf_i+0xbc>
 8004f28:	681d      	ldr	r5, [r3, #0]
 8004f2a:	e003      	b.n	8004f34 <_printf_i+0xc4>
 8004f2c:	0645      	lsls	r5, r0, #25
 8004f2e:	d5fb      	bpl.n	8004f28 <_printf_i+0xb8>
 8004f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f34:	2d00      	cmp	r5, #0
 8004f36:	da03      	bge.n	8004f40 <_printf_i+0xd0>
 8004f38:	232d      	movs	r3, #45	@ 0x2d
 8004f3a:	426d      	negs	r5, r5
 8004f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f40:	230a      	movs	r3, #10
 8004f42:	4859      	ldr	r0, [pc, #356]	@ (80050a8 <_printf_i+0x238>)
 8004f44:	e011      	b.n	8004f6a <_printf_i+0xfa>
 8004f46:	6821      	ldr	r1, [r4, #0]
 8004f48:	6833      	ldr	r3, [r6, #0]
 8004f4a:	0608      	lsls	r0, r1, #24
 8004f4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f50:	d402      	bmi.n	8004f58 <_printf_i+0xe8>
 8004f52:	0649      	lsls	r1, r1, #25
 8004f54:	bf48      	it	mi
 8004f56:	b2ad      	uxthmi	r5, r5
 8004f58:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f5a:	6033      	str	r3, [r6, #0]
 8004f5c:	bf14      	ite	ne
 8004f5e:	230a      	movne	r3, #10
 8004f60:	2308      	moveq	r3, #8
 8004f62:	4851      	ldr	r0, [pc, #324]	@ (80050a8 <_printf_i+0x238>)
 8004f64:	2100      	movs	r1, #0
 8004f66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f6a:	6866      	ldr	r6, [r4, #4]
 8004f6c:	2e00      	cmp	r6, #0
 8004f6e:	bfa8      	it	ge
 8004f70:	6821      	ldrge	r1, [r4, #0]
 8004f72:	60a6      	str	r6, [r4, #8]
 8004f74:	bfa4      	itt	ge
 8004f76:	f021 0104 	bicge.w	r1, r1, #4
 8004f7a:	6021      	strge	r1, [r4, #0]
 8004f7c:	b90d      	cbnz	r5, 8004f82 <_printf_i+0x112>
 8004f7e:	2e00      	cmp	r6, #0
 8004f80:	d04b      	beq.n	800501a <_printf_i+0x1aa>
 8004f82:	4616      	mov	r6, r2
 8004f84:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f88:	fb03 5711 	mls	r7, r3, r1, r5
 8004f8c:	5dc7      	ldrb	r7, [r0, r7]
 8004f8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f92:	462f      	mov	r7, r5
 8004f94:	42bb      	cmp	r3, r7
 8004f96:	460d      	mov	r5, r1
 8004f98:	d9f4      	bls.n	8004f84 <_printf_i+0x114>
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d10b      	bne.n	8004fb6 <_printf_i+0x146>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	07df      	lsls	r7, r3, #31
 8004fa2:	d508      	bpl.n	8004fb6 <_printf_i+0x146>
 8004fa4:	6923      	ldr	r3, [r4, #16]
 8004fa6:	6861      	ldr	r1, [r4, #4]
 8004fa8:	4299      	cmp	r1, r3
 8004faa:	bfde      	ittt	le
 8004fac:	2330      	movle	r3, #48	@ 0x30
 8004fae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fb6:	1b92      	subs	r2, r2, r6
 8004fb8:	6122      	str	r2, [r4, #16]
 8004fba:	464b      	mov	r3, r9
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	f8cd a000 	str.w	sl, [sp]
 8004fc4:	aa03      	add	r2, sp, #12
 8004fc6:	f7ff fee1 	bl	8004d8c <_printf_common>
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d14a      	bne.n	8005064 <_printf_i+0x1f4>
 8004fce:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd2:	b004      	add	sp, #16
 8004fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	f043 0320 	orr.w	r3, r3, #32
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	2778      	movs	r7, #120	@ 0x78
 8004fe2:	4832      	ldr	r0, [pc, #200]	@ (80050ac <_printf_i+0x23c>)
 8004fe4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	6831      	ldr	r1, [r6, #0]
 8004fec:	061f      	lsls	r7, r3, #24
 8004fee:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ff2:	d402      	bmi.n	8004ffa <_printf_i+0x18a>
 8004ff4:	065f      	lsls	r7, r3, #25
 8004ff6:	bf48      	it	mi
 8004ff8:	b2ad      	uxthmi	r5, r5
 8004ffa:	6031      	str	r1, [r6, #0]
 8004ffc:	07d9      	lsls	r1, r3, #31
 8004ffe:	bf44      	itt	mi
 8005000:	f043 0320 	orrmi.w	r3, r3, #32
 8005004:	6023      	strmi	r3, [r4, #0]
 8005006:	b11d      	cbz	r5, 8005010 <_printf_i+0x1a0>
 8005008:	2310      	movs	r3, #16
 800500a:	e7ab      	b.n	8004f64 <_printf_i+0xf4>
 800500c:	4826      	ldr	r0, [pc, #152]	@ (80050a8 <_printf_i+0x238>)
 800500e:	e7e9      	b.n	8004fe4 <_printf_i+0x174>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	f023 0320 	bic.w	r3, r3, #32
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	e7f6      	b.n	8005008 <_printf_i+0x198>
 800501a:	4616      	mov	r6, r2
 800501c:	e7bd      	b.n	8004f9a <_printf_i+0x12a>
 800501e:	6833      	ldr	r3, [r6, #0]
 8005020:	6825      	ldr	r5, [r4, #0]
 8005022:	1d18      	adds	r0, r3, #4
 8005024:	6961      	ldr	r1, [r4, #20]
 8005026:	6030      	str	r0, [r6, #0]
 8005028:	062e      	lsls	r6, r5, #24
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	d501      	bpl.n	8005032 <_printf_i+0x1c2>
 800502e:	6019      	str	r1, [r3, #0]
 8005030:	e002      	b.n	8005038 <_printf_i+0x1c8>
 8005032:	0668      	lsls	r0, r5, #25
 8005034:	d5fb      	bpl.n	800502e <_printf_i+0x1be>
 8005036:	8019      	strh	r1, [r3, #0]
 8005038:	2300      	movs	r3, #0
 800503a:	4616      	mov	r6, r2
 800503c:	6123      	str	r3, [r4, #16]
 800503e:	e7bc      	b.n	8004fba <_printf_i+0x14a>
 8005040:	6833      	ldr	r3, [r6, #0]
 8005042:	2100      	movs	r1, #0
 8005044:	1d1a      	adds	r2, r3, #4
 8005046:	6032      	str	r2, [r6, #0]
 8005048:	681e      	ldr	r6, [r3, #0]
 800504a:	6862      	ldr	r2, [r4, #4]
 800504c:	4630      	mov	r0, r6
 800504e:	f000 f913 	bl	8005278 <memchr>
 8005052:	b108      	cbz	r0, 8005058 <_printf_i+0x1e8>
 8005054:	1b80      	subs	r0, r0, r6
 8005056:	6060      	str	r0, [r4, #4]
 8005058:	6863      	ldr	r3, [r4, #4]
 800505a:	6123      	str	r3, [r4, #16]
 800505c:	2300      	movs	r3, #0
 800505e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005062:	e7aa      	b.n	8004fba <_printf_i+0x14a>
 8005064:	4632      	mov	r2, r6
 8005066:	4649      	mov	r1, r9
 8005068:	4640      	mov	r0, r8
 800506a:	6923      	ldr	r3, [r4, #16]
 800506c:	47d0      	blx	sl
 800506e:	3001      	adds	r0, #1
 8005070:	d0ad      	beq.n	8004fce <_printf_i+0x15e>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	079b      	lsls	r3, r3, #30
 8005076:	d413      	bmi.n	80050a0 <_printf_i+0x230>
 8005078:	68e0      	ldr	r0, [r4, #12]
 800507a:	9b03      	ldr	r3, [sp, #12]
 800507c:	4298      	cmp	r0, r3
 800507e:	bfb8      	it	lt
 8005080:	4618      	movlt	r0, r3
 8005082:	e7a6      	b.n	8004fd2 <_printf_i+0x162>
 8005084:	2301      	movs	r3, #1
 8005086:	4632      	mov	r2, r6
 8005088:	4649      	mov	r1, r9
 800508a:	4640      	mov	r0, r8
 800508c:	47d0      	blx	sl
 800508e:	3001      	adds	r0, #1
 8005090:	d09d      	beq.n	8004fce <_printf_i+0x15e>
 8005092:	3501      	adds	r5, #1
 8005094:	68e3      	ldr	r3, [r4, #12]
 8005096:	9903      	ldr	r1, [sp, #12]
 8005098:	1a5b      	subs	r3, r3, r1
 800509a:	42ab      	cmp	r3, r5
 800509c:	dcf2      	bgt.n	8005084 <_printf_i+0x214>
 800509e:	e7eb      	b.n	8005078 <_printf_i+0x208>
 80050a0:	2500      	movs	r5, #0
 80050a2:	f104 0619 	add.w	r6, r4, #25
 80050a6:	e7f5      	b.n	8005094 <_printf_i+0x224>
 80050a8:	0800a486 	.word	0x0800a486
 80050ac:	0800a497 	.word	0x0800a497

080050b0 <__sflush_r>:
 80050b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	0716      	lsls	r6, r2, #28
 80050b8:	4605      	mov	r5, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	d454      	bmi.n	8005168 <__sflush_r+0xb8>
 80050be:	684b      	ldr	r3, [r1, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	dc02      	bgt.n	80050ca <__sflush_r+0x1a>
 80050c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	dd48      	ble.n	800515c <__sflush_r+0xac>
 80050ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050cc:	2e00      	cmp	r6, #0
 80050ce:	d045      	beq.n	800515c <__sflush_r+0xac>
 80050d0:	2300      	movs	r3, #0
 80050d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050d6:	682f      	ldr	r7, [r5, #0]
 80050d8:	6a21      	ldr	r1, [r4, #32]
 80050da:	602b      	str	r3, [r5, #0]
 80050dc:	d030      	beq.n	8005140 <__sflush_r+0x90>
 80050de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	0759      	lsls	r1, r3, #29
 80050e4:	d505      	bpl.n	80050f2 <__sflush_r+0x42>
 80050e6:	6863      	ldr	r3, [r4, #4]
 80050e8:	1ad2      	subs	r2, r2, r3
 80050ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050ec:	b10b      	cbz	r3, 80050f2 <__sflush_r+0x42>
 80050ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050f0:	1ad2      	subs	r2, r2, r3
 80050f2:	2300      	movs	r3, #0
 80050f4:	4628      	mov	r0, r5
 80050f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050f8:	6a21      	ldr	r1, [r4, #32]
 80050fa:	47b0      	blx	r6
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	d106      	bne.n	8005110 <__sflush_r+0x60>
 8005102:	6829      	ldr	r1, [r5, #0]
 8005104:	291d      	cmp	r1, #29
 8005106:	d82b      	bhi.n	8005160 <__sflush_r+0xb0>
 8005108:	4a28      	ldr	r2, [pc, #160]	@ (80051ac <__sflush_r+0xfc>)
 800510a:	410a      	asrs	r2, r1
 800510c:	07d6      	lsls	r6, r2, #31
 800510e:	d427      	bmi.n	8005160 <__sflush_r+0xb0>
 8005110:	2200      	movs	r2, #0
 8005112:	6062      	str	r2, [r4, #4]
 8005114:	6922      	ldr	r2, [r4, #16]
 8005116:	04d9      	lsls	r1, r3, #19
 8005118:	6022      	str	r2, [r4, #0]
 800511a:	d504      	bpl.n	8005126 <__sflush_r+0x76>
 800511c:	1c42      	adds	r2, r0, #1
 800511e:	d101      	bne.n	8005124 <__sflush_r+0x74>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	b903      	cbnz	r3, 8005126 <__sflush_r+0x76>
 8005124:	6560      	str	r0, [r4, #84]	@ 0x54
 8005126:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005128:	602f      	str	r7, [r5, #0]
 800512a:	b1b9      	cbz	r1, 800515c <__sflush_r+0xac>
 800512c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005130:	4299      	cmp	r1, r3
 8005132:	d002      	beq.n	800513a <__sflush_r+0x8a>
 8005134:	4628      	mov	r0, r5
 8005136:	f7ff fbd3 	bl	80048e0 <_free_r>
 800513a:	2300      	movs	r3, #0
 800513c:	6363      	str	r3, [r4, #52]	@ 0x34
 800513e:	e00d      	b.n	800515c <__sflush_r+0xac>
 8005140:	2301      	movs	r3, #1
 8005142:	4628      	mov	r0, r5
 8005144:	47b0      	blx	r6
 8005146:	4602      	mov	r2, r0
 8005148:	1c50      	adds	r0, r2, #1
 800514a:	d1c9      	bne.n	80050e0 <__sflush_r+0x30>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0c6      	beq.n	80050e0 <__sflush_r+0x30>
 8005152:	2b1d      	cmp	r3, #29
 8005154:	d001      	beq.n	800515a <__sflush_r+0xaa>
 8005156:	2b16      	cmp	r3, #22
 8005158:	d11d      	bne.n	8005196 <__sflush_r+0xe6>
 800515a:	602f      	str	r7, [r5, #0]
 800515c:	2000      	movs	r0, #0
 800515e:	e021      	b.n	80051a4 <__sflush_r+0xf4>
 8005160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005164:	b21b      	sxth	r3, r3
 8005166:	e01a      	b.n	800519e <__sflush_r+0xee>
 8005168:	690f      	ldr	r7, [r1, #16]
 800516a:	2f00      	cmp	r7, #0
 800516c:	d0f6      	beq.n	800515c <__sflush_r+0xac>
 800516e:	0793      	lsls	r3, r2, #30
 8005170:	bf18      	it	ne
 8005172:	2300      	movne	r3, #0
 8005174:	680e      	ldr	r6, [r1, #0]
 8005176:	bf08      	it	eq
 8005178:	694b      	ldreq	r3, [r1, #20]
 800517a:	1bf6      	subs	r6, r6, r7
 800517c:	600f      	str	r7, [r1, #0]
 800517e:	608b      	str	r3, [r1, #8]
 8005180:	2e00      	cmp	r6, #0
 8005182:	ddeb      	ble.n	800515c <__sflush_r+0xac>
 8005184:	4633      	mov	r3, r6
 8005186:	463a      	mov	r2, r7
 8005188:	4628      	mov	r0, r5
 800518a:	6a21      	ldr	r1, [r4, #32]
 800518c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005190:	47e0      	blx	ip
 8005192:	2800      	cmp	r0, #0
 8005194:	dc07      	bgt.n	80051a6 <__sflush_r+0xf6>
 8005196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800519a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800519e:	f04f 30ff 	mov.w	r0, #4294967295
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a6:	4407      	add	r7, r0
 80051a8:	1a36      	subs	r6, r6, r0
 80051aa:	e7e9      	b.n	8005180 <__sflush_r+0xd0>
 80051ac:	dfbffffe 	.word	0xdfbffffe

080051b0 <_fflush_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	690b      	ldr	r3, [r1, #16]
 80051b4:	4605      	mov	r5, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	b913      	cbnz	r3, 80051c0 <_fflush_r+0x10>
 80051ba:	2500      	movs	r5, #0
 80051bc:	4628      	mov	r0, r5
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	b118      	cbz	r0, 80051ca <_fflush_r+0x1a>
 80051c2:	6a03      	ldr	r3, [r0, #32]
 80051c4:	b90b      	cbnz	r3, 80051ca <_fflush_r+0x1a>
 80051c6:	f7ff fa57 	bl	8004678 <__sinit>
 80051ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f3      	beq.n	80051ba <_fflush_r+0xa>
 80051d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051d4:	07d0      	lsls	r0, r2, #31
 80051d6:	d404      	bmi.n	80051e2 <_fflush_r+0x32>
 80051d8:	0599      	lsls	r1, r3, #22
 80051da:	d402      	bmi.n	80051e2 <_fflush_r+0x32>
 80051dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051de:	f7ff fb5e 	bl	800489e <__retarget_lock_acquire_recursive>
 80051e2:	4628      	mov	r0, r5
 80051e4:	4621      	mov	r1, r4
 80051e6:	f7ff ff63 	bl	80050b0 <__sflush_r>
 80051ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051ec:	4605      	mov	r5, r0
 80051ee:	07da      	lsls	r2, r3, #31
 80051f0:	d4e4      	bmi.n	80051bc <_fflush_r+0xc>
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	059b      	lsls	r3, r3, #22
 80051f6:	d4e1      	bmi.n	80051bc <_fflush_r+0xc>
 80051f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051fa:	f7ff fb51 	bl	80048a0 <__retarget_lock_release_recursive>
 80051fe:	e7dd      	b.n	80051bc <_fflush_r+0xc>

08005200 <fiprintf>:
 8005200:	b40e      	push	{r1, r2, r3}
 8005202:	b503      	push	{r0, r1, lr}
 8005204:	4601      	mov	r1, r0
 8005206:	ab03      	add	r3, sp, #12
 8005208:	4805      	ldr	r0, [pc, #20]	@ (8005220 <fiprintf+0x20>)
 800520a:	f853 2b04 	ldr.w	r2, [r3], #4
 800520e:	6800      	ldr	r0, [r0, #0]
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	f000 f8a9 	bl	8005368 <_vfiprintf_r>
 8005216:	b002      	add	sp, #8
 8005218:	f85d eb04 	ldr.w	lr, [sp], #4
 800521c:	b003      	add	sp, #12
 800521e:	4770      	bx	lr
 8005220:	20000038 	.word	0x20000038

08005224 <memmove>:
 8005224:	4288      	cmp	r0, r1
 8005226:	b510      	push	{r4, lr}
 8005228:	eb01 0402 	add.w	r4, r1, r2
 800522c:	d902      	bls.n	8005234 <memmove+0x10>
 800522e:	4284      	cmp	r4, r0
 8005230:	4623      	mov	r3, r4
 8005232:	d807      	bhi.n	8005244 <memmove+0x20>
 8005234:	1e43      	subs	r3, r0, #1
 8005236:	42a1      	cmp	r1, r4
 8005238:	d008      	beq.n	800524c <memmove+0x28>
 800523a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800523e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005242:	e7f8      	b.n	8005236 <memmove+0x12>
 8005244:	4601      	mov	r1, r0
 8005246:	4402      	add	r2, r0
 8005248:	428a      	cmp	r2, r1
 800524a:	d100      	bne.n	800524e <memmove+0x2a>
 800524c:	bd10      	pop	{r4, pc}
 800524e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005256:	e7f7      	b.n	8005248 <memmove+0x24>

08005258 <_sbrk_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	2300      	movs	r3, #0
 800525c:	4d05      	ldr	r5, [pc, #20]	@ (8005274 <_sbrk_r+0x1c>)
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	f7fd fba0 	bl	80029a8 <_sbrk>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_sbrk_r+0x1a>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_sbrk_r+0x1a>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	20000674 	.word	0x20000674

08005278 <memchr>:
 8005278:	4603      	mov	r3, r0
 800527a:	b510      	push	{r4, lr}
 800527c:	b2c9      	uxtb	r1, r1
 800527e:	4402      	add	r2, r0
 8005280:	4293      	cmp	r3, r2
 8005282:	4618      	mov	r0, r3
 8005284:	d101      	bne.n	800528a <memchr+0x12>
 8005286:	2000      	movs	r0, #0
 8005288:	e003      	b.n	8005292 <memchr+0x1a>
 800528a:	7804      	ldrb	r4, [r0, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	428c      	cmp	r4, r1
 8005290:	d1f6      	bne.n	8005280 <memchr+0x8>
 8005292:	bd10      	pop	{r4, pc}

08005294 <memcpy>:
 8005294:	440a      	add	r2, r1
 8005296:	4291      	cmp	r1, r2
 8005298:	f100 33ff 	add.w	r3, r0, #4294967295
 800529c:	d100      	bne.n	80052a0 <memcpy+0xc>
 800529e:	4770      	bx	lr
 80052a0:	b510      	push	{r4, lr}
 80052a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052a6:	4291      	cmp	r1, r2
 80052a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052ac:	d1f9      	bne.n	80052a2 <memcpy+0xe>
 80052ae:	bd10      	pop	{r4, pc}

080052b0 <abort>:
 80052b0:	2006      	movs	r0, #6
 80052b2:	b508      	push	{r3, lr}
 80052b4:	f000 fa2c 	bl	8005710 <raise>
 80052b8:	2001      	movs	r0, #1
 80052ba:	f7fd fb00 	bl	80028be <_exit>

080052be <_realloc_r>:
 80052be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c2:	4680      	mov	r8, r0
 80052c4:	4615      	mov	r5, r2
 80052c6:	460c      	mov	r4, r1
 80052c8:	b921      	cbnz	r1, 80052d4 <_realloc_r+0x16>
 80052ca:	4611      	mov	r1, r2
 80052cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052d0:	f7ff bb78 	b.w	80049c4 <_malloc_r>
 80052d4:	b92a      	cbnz	r2, 80052e2 <_realloc_r+0x24>
 80052d6:	f7ff fb03 	bl	80048e0 <_free_r>
 80052da:	2400      	movs	r4, #0
 80052dc:	4620      	mov	r0, r4
 80052de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e2:	f000 fa31 	bl	8005748 <_malloc_usable_size_r>
 80052e6:	4285      	cmp	r5, r0
 80052e8:	4606      	mov	r6, r0
 80052ea:	d802      	bhi.n	80052f2 <_realloc_r+0x34>
 80052ec:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052f0:	d8f4      	bhi.n	80052dc <_realloc_r+0x1e>
 80052f2:	4629      	mov	r1, r5
 80052f4:	4640      	mov	r0, r8
 80052f6:	f7ff fb65 	bl	80049c4 <_malloc_r>
 80052fa:	4607      	mov	r7, r0
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d0ec      	beq.n	80052da <_realloc_r+0x1c>
 8005300:	42b5      	cmp	r5, r6
 8005302:	462a      	mov	r2, r5
 8005304:	4621      	mov	r1, r4
 8005306:	bf28      	it	cs
 8005308:	4632      	movcs	r2, r6
 800530a:	f7ff ffc3 	bl	8005294 <memcpy>
 800530e:	4621      	mov	r1, r4
 8005310:	4640      	mov	r0, r8
 8005312:	f7ff fae5 	bl	80048e0 <_free_r>
 8005316:	463c      	mov	r4, r7
 8005318:	e7e0      	b.n	80052dc <_realloc_r+0x1e>

0800531a <__sfputc_r>:
 800531a:	6893      	ldr	r3, [r2, #8]
 800531c:	b410      	push	{r4}
 800531e:	3b01      	subs	r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	6093      	str	r3, [r2, #8]
 8005324:	da07      	bge.n	8005336 <__sfputc_r+0x1c>
 8005326:	6994      	ldr	r4, [r2, #24]
 8005328:	42a3      	cmp	r3, r4
 800532a:	db01      	blt.n	8005330 <__sfputc_r+0x16>
 800532c:	290a      	cmp	r1, #10
 800532e:	d102      	bne.n	8005336 <__sfputc_r+0x1c>
 8005330:	bc10      	pop	{r4}
 8005332:	f000 b931 	b.w	8005598 <__swbuf_r>
 8005336:	6813      	ldr	r3, [r2, #0]
 8005338:	1c58      	adds	r0, r3, #1
 800533a:	6010      	str	r0, [r2, #0]
 800533c:	7019      	strb	r1, [r3, #0]
 800533e:	4608      	mov	r0, r1
 8005340:	bc10      	pop	{r4}
 8005342:	4770      	bx	lr

08005344 <__sfputs_r>:
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005346:	4606      	mov	r6, r0
 8005348:	460f      	mov	r7, r1
 800534a:	4614      	mov	r4, r2
 800534c:	18d5      	adds	r5, r2, r3
 800534e:	42ac      	cmp	r4, r5
 8005350:	d101      	bne.n	8005356 <__sfputs_r+0x12>
 8005352:	2000      	movs	r0, #0
 8005354:	e007      	b.n	8005366 <__sfputs_r+0x22>
 8005356:	463a      	mov	r2, r7
 8005358:	4630      	mov	r0, r6
 800535a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800535e:	f7ff ffdc 	bl	800531a <__sfputc_r>
 8005362:	1c43      	adds	r3, r0, #1
 8005364:	d1f3      	bne.n	800534e <__sfputs_r+0xa>
 8005366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005368 <_vfiprintf_r>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	460d      	mov	r5, r1
 800536e:	4614      	mov	r4, r2
 8005370:	4698      	mov	r8, r3
 8005372:	4606      	mov	r6, r0
 8005374:	b09d      	sub	sp, #116	@ 0x74
 8005376:	b118      	cbz	r0, 8005380 <_vfiprintf_r+0x18>
 8005378:	6a03      	ldr	r3, [r0, #32]
 800537a:	b90b      	cbnz	r3, 8005380 <_vfiprintf_r+0x18>
 800537c:	f7ff f97c 	bl	8004678 <__sinit>
 8005380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005382:	07d9      	lsls	r1, r3, #31
 8005384:	d405      	bmi.n	8005392 <_vfiprintf_r+0x2a>
 8005386:	89ab      	ldrh	r3, [r5, #12]
 8005388:	059a      	lsls	r2, r3, #22
 800538a:	d402      	bmi.n	8005392 <_vfiprintf_r+0x2a>
 800538c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800538e:	f7ff fa86 	bl	800489e <__retarget_lock_acquire_recursive>
 8005392:	89ab      	ldrh	r3, [r5, #12]
 8005394:	071b      	lsls	r3, r3, #28
 8005396:	d501      	bpl.n	800539c <_vfiprintf_r+0x34>
 8005398:	692b      	ldr	r3, [r5, #16]
 800539a:	b99b      	cbnz	r3, 80053c4 <_vfiprintf_r+0x5c>
 800539c:	4629      	mov	r1, r5
 800539e:	4630      	mov	r0, r6
 80053a0:	f000 f938 	bl	8005614 <__swsetup_r>
 80053a4:	b170      	cbz	r0, 80053c4 <_vfiprintf_r+0x5c>
 80053a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053a8:	07dc      	lsls	r4, r3, #31
 80053aa:	d504      	bpl.n	80053b6 <_vfiprintf_r+0x4e>
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295
 80053b0:	b01d      	add	sp, #116	@ 0x74
 80053b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b6:	89ab      	ldrh	r3, [r5, #12]
 80053b8:	0598      	lsls	r0, r3, #22
 80053ba:	d4f7      	bmi.n	80053ac <_vfiprintf_r+0x44>
 80053bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053be:	f7ff fa6f 	bl	80048a0 <__retarget_lock_release_recursive>
 80053c2:	e7f3      	b.n	80053ac <_vfiprintf_r+0x44>
 80053c4:	2300      	movs	r3, #0
 80053c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80053c8:	2320      	movs	r3, #32
 80053ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053ce:	2330      	movs	r3, #48	@ 0x30
 80053d0:	f04f 0901 	mov.w	r9, #1
 80053d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005584 <_vfiprintf_r+0x21c>
 80053dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053e0:	4623      	mov	r3, r4
 80053e2:	469a      	mov	sl, r3
 80053e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e8:	b10a      	cbz	r2, 80053ee <_vfiprintf_r+0x86>
 80053ea:	2a25      	cmp	r2, #37	@ 0x25
 80053ec:	d1f9      	bne.n	80053e2 <_vfiprintf_r+0x7a>
 80053ee:	ebba 0b04 	subs.w	fp, sl, r4
 80053f2:	d00b      	beq.n	800540c <_vfiprintf_r+0xa4>
 80053f4:	465b      	mov	r3, fp
 80053f6:	4622      	mov	r2, r4
 80053f8:	4629      	mov	r1, r5
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7ff ffa2 	bl	8005344 <__sfputs_r>
 8005400:	3001      	adds	r0, #1
 8005402:	f000 80a7 	beq.w	8005554 <_vfiprintf_r+0x1ec>
 8005406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005408:	445a      	add	r2, fp
 800540a:	9209      	str	r2, [sp, #36]	@ 0x24
 800540c:	f89a 3000 	ldrb.w	r3, [sl]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 809f 	beq.w	8005554 <_vfiprintf_r+0x1ec>
 8005416:	2300      	movs	r3, #0
 8005418:	f04f 32ff 	mov.w	r2, #4294967295
 800541c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005420:	f10a 0a01 	add.w	sl, sl, #1
 8005424:	9304      	str	r3, [sp, #16]
 8005426:	9307      	str	r3, [sp, #28]
 8005428:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800542c:	931a      	str	r3, [sp, #104]	@ 0x68
 800542e:	4654      	mov	r4, sl
 8005430:	2205      	movs	r2, #5
 8005432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005436:	4853      	ldr	r0, [pc, #332]	@ (8005584 <_vfiprintf_r+0x21c>)
 8005438:	f7ff ff1e 	bl	8005278 <memchr>
 800543c:	9a04      	ldr	r2, [sp, #16]
 800543e:	b9d8      	cbnz	r0, 8005478 <_vfiprintf_r+0x110>
 8005440:	06d1      	lsls	r1, r2, #27
 8005442:	bf44      	itt	mi
 8005444:	2320      	movmi	r3, #32
 8005446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800544a:	0713      	lsls	r3, r2, #28
 800544c:	bf44      	itt	mi
 800544e:	232b      	movmi	r3, #43	@ 0x2b
 8005450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005454:	f89a 3000 	ldrb.w	r3, [sl]
 8005458:	2b2a      	cmp	r3, #42	@ 0x2a
 800545a:	d015      	beq.n	8005488 <_vfiprintf_r+0x120>
 800545c:	4654      	mov	r4, sl
 800545e:	2000      	movs	r0, #0
 8005460:	f04f 0c0a 	mov.w	ip, #10
 8005464:	9a07      	ldr	r2, [sp, #28]
 8005466:	4621      	mov	r1, r4
 8005468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800546c:	3b30      	subs	r3, #48	@ 0x30
 800546e:	2b09      	cmp	r3, #9
 8005470:	d94b      	bls.n	800550a <_vfiprintf_r+0x1a2>
 8005472:	b1b0      	cbz	r0, 80054a2 <_vfiprintf_r+0x13a>
 8005474:	9207      	str	r2, [sp, #28]
 8005476:	e014      	b.n	80054a2 <_vfiprintf_r+0x13a>
 8005478:	eba0 0308 	sub.w	r3, r0, r8
 800547c:	fa09 f303 	lsl.w	r3, r9, r3
 8005480:	4313      	orrs	r3, r2
 8005482:	46a2      	mov	sl, r4
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	e7d2      	b.n	800542e <_vfiprintf_r+0xc6>
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	1d19      	adds	r1, r3, #4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	9103      	str	r1, [sp, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	bfbb      	ittet	lt
 8005494:	425b      	neglt	r3, r3
 8005496:	f042 0202 	orrlt.w	r2, r2, #2
 800549a:	9307      	strge	r3, [sp, #28]
 800549c:	9307      	strlt	r3, [sp, #28]
 800549e:	bfb8      	it	lt
 80054a0:	9204      	strlt	r2, [sp, #16]
 80054a2:	7823      	ldrb	r3, [r4, #0]
 80054a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80054a6:	d10a      	bne.n	80054be <_vfiprintf_r+0x156>
 80054a8:	7863      	ldrb	r3, [r4, #1]
 80054aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ac:	d132      	bne.n	8005514 <_vfiprintf_r+0x1ac>
 80054ae:	9b03      	ldr	r3, [sp, #12]
 80054b0:	3402      	adds	r4, #2
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	9203      	str	r2, [sp, #12]
 80054b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054bc:	9305      	str	r3, [sp, #20]
 80054be:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005588 <_vfiprintf_r+0x220>
 80054c2:	2203      	movs	r2, #3
 80054c4:	4650      	mov	r0, sl
 80054c6:	7821      	ldrb	r1, [r4, #0]
 80054c8:	f7ff fed6 	bl	8005278 <memchr>
 80054cc:	b138      	cbz	r0, 80054de <_vfiprintf_r+0x176>
 80054ce:	2240      	movs	r2, #64	@ 0x40
 80054d0:	9b04      	ldr	r3, [sp, #16]
 80054d2:	eba0 000a 	sub.w	r0, r0, sl
 80054d6:	4082      	lsls	r2, r0
 80054d8:	4313      	orrs	r3, r2
 80054da:	3401      	adds	r4, #1
 80054dc:	9304      	str	r3, [sp, #16]
 80054de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e2:	2206      	movs	r2, #6
 80054e4:	4829      	ldr	r0, [pc, #164]	@ (800558c <_vfiprintf_r+0x224>)
 80054e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054ea:	f7ff fec5 	bl	8005278 <memchr>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d03f      	beq.n	8005572 <_vfiprintf_r+0x20a>
 80054f2:	4b27      	ldr	r3, [pc, #156]	@ (8005590 <_vfiprintf_r+0x228>)
 80054f4:	bb1b      	cbnz	r3, 800553e <_vfiprintf_r+0x1d6>
 80054f6:	9b03      	ldr	r3, [sp, #12]
 80054f8:	3307      	adds	r3, #7
 80054fa:	f023 0307 	bic.w	r3, r3, #7
 80054fe:	3308      	adds	r3, #8
 8005500:	9303      	str	r3, [sp, #12]
 8005502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005504:	443b      	add	r3, r7
 8005506:	9309      	str	r3, [sp, #36]	@ 0x24
 8005508:	e76a      	b.n	80053e0 <_vfiprintf_r+0x78>
 800550a:	460c      	mov	r4, r1
 800550c:	2001      	movs	r0, #1
 800550e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005512:	e7a8      	b.n	8005466 <_vfiprintf_r+0xfe>
 8005514:	2300      	movs	r3, #0
 8005516:	f04f 0c0a 	mov.w	ip, #10
 800551a:	4619      	mov	r1, r3
 800551c:	3401      	adds	r4, #1
 800551e:	9305      	str	r3, [sp, #20]
 8005520:	4620      	mov	r0, r4
 8005522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005526:	3a30      	subs	r2, #48	@ 0x30
 8005528:	2a09      	cmp	r2, #9
 800552a:	d903      	bls.n	8005534 <_vfiprintf_r+0x1cc>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0c6      	beq.n	80054be <_vfiprintf_r+0x156>
 8005530:	9105      	str	r1, [sp, #20]
 8005532:	e7c4      	b.n	80054be <_vfiprintf_r+0x156>
 8005534:	4604      	mov	r4, r0
 8005536:	2301      	movs	r3, #1
 8005538:	fb0c 2101 	mla	r1, ip, r1, r2
 800553c:	e7f0      	b.n	8005520 <_vfiprintf_r+0x1b8>
 800553e:	ab03      	add	r3, sp, #12
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	462a      	mov	r2, r5
 8005544:	4630      	mov	r0, r6
 8005546:	4b13      	ldr	r3, [pc, #76]	@ (8005594 <_vfiprintf_r+0x22c>)
 8005548:	a904      	add	r1, sp, #16
 800554a:	f3af 8000 	nop.w
 800554e:	4607      	mov	r7, r0
 8005550:	1c78      	adds	r0, r7, #1
 8005552:	d1d6      	bne.n	8005502 <_vfiprintf_r+0x19a>
 8005554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005556:	07d9      	lsls	r1, r3, #31
 8005558:	d405      	bmi.n	8005566 <_vfiprintf_r+0x1fe>
 800555a:	89ab      	ldrh	r3, [r5, #12]
 800555c:	059a      	lsls	r2, r3, #22
 800555e:	d402      	bmi.n	8005566 <_vfiprintf_r+0x1fe>
 8005560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005562:	f7ff f99d 	bl	80048a0 <__retarget_lock_release_recursive>
 8005566:	89ab      	ldrh	r3, [r5, #12]
 8005568:	065b      	lsls	r3, r3, #25
 800556a:	f53f af1f 	bmi.w	80053ac <_vfiprintf_r+0x44>
 800556e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005570:	e71e      	b.n	80053b0 <_vfiprintf_r+0x48>
 8005572:	ab03      	add	r3, sp, #12
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	462a      	mov	r2, r5
 8005578:	4630      	mov	r0, r6
 800557a:	4b06      	ldr	r3, [pc, #24]	@ (8005594 <_vfiprintf_r+0x22c>)
 800557c:	a904      	add	r1, sp, #16
 800557e:	f7ff fc77 	bl	8004e70 <_printf_i>
 8005582:	e7e4      	b.n	800554e <_vfiprintf_r+0x1e6>
 8005584:	0800a475 	.word	0x0800a475
 8005588:	0800a47b 	.word	0x0800a47b
 800558c:	0800a47f 	.word	0x0800a47f
 8005590:	00000000 	.word	0x00000000
 8005594:	08005345 	.word	0x08005345

08005598 <__swbuf_r>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	460e      	mov	r6, r1
 800559c:	4614      	mov	r4, r2
 800559e:	4605      	mov	r5, r0
 80055a0:	b118      	cbz	r0, 80055aa <__swbuf_r+0x12>
 80055a2:	6a03      	ldr	r3, [r0, #32]
 80055a4:	b90b      	cbnz	r3, 80055aa <__swbuf_r+0x12>
 80055a6:	f7ff f867 	bl	8004678 <__sinit>
 80055aa:	69a3      	ldr	r3, [r4, #24]
 80055ac:	60a3      	str	r3, [r4, #8]
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	071a      	lsls	r2, r3, #28
 80055b2:	d501      	bpl.n	80055b8 <__swbuf_r+0x20>
 80055b4:	6923      	ldr	r3, [r4, #16]
 80055b6:	b943      	cbnz	r3, 80055ca <__swbuf_r+0x32>
 80055b8:	4621      	mov	r1, r4
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 f82a 	bl	8005614 <__swsetup_r>
 80055c0:	b118      	cbz	r0, 80055ca <__swbuf_r+0x32>
 80055c2:	f04f 37ff 	mov.w	r7, #4294967295
 80055c6:	4638      	mov	r0, r7
 80055c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	6922      	ldr	r2, [r4, #16]
 80055ce:	b2f6      	uxtb	r6, r6
 80055d0:	1a98      	subs	r0, r3, r2
 80055d2:	6963      	ldr	r3, [r4, #20]
 80055d4:	4637      	mov	r7, r6
 80055d6:	4283      	cmp	r3, r0
 80055d8:	dc05      	bgt.n	80055e6 <__swbuf_r+0x4e>
 80055da:	4621      	mov	r1, r4
 80055dc:	4628      	mov	r0, r5
 80055de:	f7ff fde7 	bl	80051b0 <_fflush_r>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d1ed      	bne.n	80055c2 <__swbuf_r+0x2a>
 80055e6:	68a3      	ldr	r3, [r4, #8]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	60a3      	str	r3, [r4, #8]
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	6022      	str	r2, [r4, #0]
 80055f2:	701e      	strb	r6, [r3, #0]
 80055f4:	6962      	ldr	r2, [r4, #20]
 80055f6:	1c43      	adds	r3, r0, #1
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d004      	beq.n	8005606 <__swbuf_r+0x6e>
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	07db      	lsls	r3, r3, #31
 8005600:	d5e1      	bpl.n	80055c6 <__swbuf_r+0x2e>
 8005602:	2e0a      	cmp	r6, #10
 8005604:	d1df      	bne.n	80055c6 <__swbuf_r+0x2e>
 8005606:	4621      	mov	r1, r4
 8005608:	4628      	mov	r0, r5
 800560a:	f7ff fdd1 	bl	80051b0 <_fflush_r>
 800560e:	2800      	cmp	r0, #0
 8005610:	d0d9      	beq.n	80055c6 <__swbuf_r+0x2e>
 8005612:	e7d6      	b.n	80055c2 <__swbuf_r+0x2a>

08005614 <__swsetup_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4b29      	ldr	r3, [pc, #164]	@ (80056bc <__swsetup_r+0xa8>)
 8005618:	4605      	mov	r5, r0
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	460c      	mov	r4, r1
 800561e:	b118      	cbz	r0, 8005628 <__swsetup_r+0x14>
 8005620:	6a03      	ldr	r3, [r0, #32]
 8005622:	b90b      	cbnz	r3, 8005628 <__swsetup_r+0x14>
 8005624:	f7ff f828 	bl	8004678 <__sinit>
 8005628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800562c:	0719      	lsls	r1, r3, #28
 800562e:	d422      	bmi.n	8005676 <__swsetup_r+0x62>
 8005630:	06da      	lsls	r2, r3, #27
 8005632:	d407      	bmi.n	8005644 <__swsetup_r+0x30>
 8005634:	2209      	movs	r2, #9
 8005636:	602a      	str	r2, [r5, #0]
 8005638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	e033      	b.n	80056ac <__swsetup_r+0x98>
 8005644:	0758      	lsls	r0, r3, #29
 8005646:	d512      	bpl.n	800566e <__swsetup_r+0x5a>
 8005648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800564a:	b141      	cbz	r1, 800565e <__swsetup_r+0x4a>
 800564c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005650:	4299      	cmp	r1, r3
 8005652:	d002      	beq.n	800565a <__swsetup_r+0x46>
 8005654:	4628      	mov	r0, r5
 8005656:	f7ff f943 	bl	80048e0 <_free_r>
 800565a:	2300      	movs	r3, #0
 800565c:	6363      	str	r3, [r4, #52]	@ 0x34
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005664:	81a3      	strh	r3, [r4, #12]
 8005666:	2300      	movs	r3, #0
 8005668:	6063      	str	r3, [r4, #4]
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	89a3      	ldrh	r3, [r4, #12]
 8005670:	f043 0308 	orr.w	r3, r3, #8
 8005674:	81a3      	strh	r3, [r4, #12]
 8005676:	6923      	ldr	r3, [r4, #16]
 8005678:	b94b      	cbnz	r3, 800568e <__swsetup_r+0x7a>
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005684:	d003      	beq.n	800568e <__swsetup_r+0x7a>
 8005686:	4621      	mov	r1, r4
 8005688:	4628      	mov	r0, r5
 800568a:	f000 f88a 	bl	80057a2 <__smakebuf_r>
 800568e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005692:	f013 0201 	ands.w	r2, r3, #1
 8005696:	d00a      	beq.n	80056ae <__swsetup_r+0x9a>
 8005698:	2200      	movs	r2, #0
 800569a:	60a2      	str	r2, [r4, #8]
 800569c:	6962      	ldr	r2, [r4, #20]
 800569e:	4252      	negs	r2, r2
 80056a0:	61a2      	str	r2, [r4, #24]
 80056a2:	6922      	ldr	r2, [r4, #16]
 80056a4:	b942      	cbnz	r2, 80056b8 <__swsetup_r+0xa4>
 80056a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80056aa:	d1c5      	bne.n	8005638 <__swsetup_r+0x24>
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
 80056ae:	0799      	lsls	r1, r3, #30
 80056b0:	bf58      	it	pl
 80056b2:	6962      	ldrpl	r2, [r4, #20]
 80056b4:	60a2      	str	r2, [r4, #8]
 80056b6:	e7f4      	b.n	80056a2 <__swsetup_r+0x8e>
 80056b8:	2000      	movs	r0, #0
 80056ba:	e7f7      	b.n	80056ac <__swsetup_r+0x98>
 80056bc:	20000038 	.word	0x20000038

080056c0 <_raise_r>:
 80056c0:	291f      	cmp	r1, #31
 80056c2:	b538      	push	{r3, r4, r5, lr}
 80056c4:	4605      	mov	r5, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	d904      	bls.n	80056d4 <_raise_r+0x14>
 80056ca:	2316      	movs	r3, #22
 80056cc:	6003      	str	r3, [r0, #0]
 80056ce:	f04f 30ff 	mov.w	r0, #4294967295
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80056d6:	b112      	cbz	r2, 80056de <_raise_r+0x1e>
 80056d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80056dc:	b94b      	cbnz	r3, 80056f2 <_raise_r+0x32>
 80056de:	4628      	mov	r0, r5
 80056e0:	f000 f830 	bl	8005744 <_getpid_r>
 80056e4:	4622      	mov	r2, r4
 80056e6:	4601      	mov	r1, r0
 80056e8:	4628      	mov	r0, r5
 80056ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056ee:	f000 b817 	b.w	8005720 <_kill_r>
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d00a      	beq.n	800570c <_raise_r+0x4c>
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	d103      	bne.n	8005702 <_raise_r+0x42>
 80056fa:	2316      	movs	r3, #22
 80056fc:	6003      	str	r3, [r0, #0]
 80056fe:	2001      	movs	r0, #1
 8005700:	e7e7      	b.n	80056d2 <_raise_r+0x12>
 8005702:	2100      	movs	r1, #0
 8005704:	4620      	mov	r0, r4
 8005706:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800570a:	4798      	blx	r3
 800570c:	2000      	movs	r0, #0
 800570e:	e7e0      	b.n	80056d2 <_raise_r+0x12>

08005710 <raise>:
 8005710:	4b02      	ldr	r3, [pc, #8]	@ (800571c <raise+0xc>)
 8005712:	4601      	mov	r1, r0
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	f7ff bfd3 	b.w	80056c0 <_raise_r>
 800571a:	bf00      	nop
 800571c:	20000038 	.word	0x20000038

08005720 <_kill_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	2300      	movs	r3, #0
 8005724:	4d06      	ldr	r5, [pc, #24]	@ (8005740 <_kill_r+0x20>)
 8005726:	4604      	mov	r4, r0
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	f7fd f8b6 	bl	800289e <_kill>
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	d102      	bne.n	800573c <_kill_r+0x1c>
 8005736:	682b      	ldr	r3, [r5, #0]
 8005738:	b103      	cbz	r3, 800573c <_kill_r+0x1c>
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	bd38      	pop	{r3, r4, r5, pc}
 800573e:	bf00      	nop
 8005740:	20000674 	.word	0x20000674

08005744 <_getpid_r>:
 8005744:	f7fd b8a4 	b.w	8002890 <_getpid>

08005748 <_malloc_usable_size_r>:
 8005748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800574c:	1f18      	subs	r0, r3, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	bfbc      	itt	lt
 8005752:	580b      	ldrlt	r3, [r1, r0]
 8005754:	18c0      	addlt	r0, r0, r3
 8005756:	4770      	bx	lr

08005758 <__swhatbuf_r>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	460c      	mov	r4, r1
 800575c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005760:	4615      	mov	r5, r2
 8005762:	2900      	cmp	r1, #0
 8005764:	461e      	mov	r6, r3
 8005766:	b096      	sub	sp, #88	@ 0x58
 8005768:	da0c      	bge.n	8005784 <__swhatbuf_r+0x2c>
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	2100      	movs	r1, #0
 800576e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005772:	bf14      	ite	ne
 8005774:	2340      	movne	r3, #64	@ 0x40
 8005776:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800577a:	2000      	movs	r0, #0
 800577c:	6031      	str	r1, [r6, #0]
 800577e:	602b      	str	r3, [r5, #0]
 8005780:	b016      	add	sp, #88	@ 0x58
 8005782:	bd70      	pop	{r4, r5, r6, pc}
 8005784:	466a      	mov	r2, sp
 8005786:	f000 f849 	bl	800581c <_fstat_r>
 800578a:	2800      	cmp	r0, #0
 800578c:	dbed      	blt.n	800576a <__swhatbuf_r+0x12>
 800578e:	9901      	ldr	r1, [sp, #4]
 8005790:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005794:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005798:	4259      	negs	r1, r3
 800579a:	4159      	adcs	r1, r3
 800579c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057a0:	e7eb      	b.n	800577a <__swhatbuf_r+0x22>

080057a2 <__smakebuf_r>:
 80057a2:	898b      	ldrh	r3, [r1, #12]
 80057a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057a6:	079d      	lsls	r5, r3, #30
 80057a8:	4606      	mov	r6, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	d507      	bpl.n	80057be <__smakebuf_r+0x1c>
 80057ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	2301      	movs	r3, #1
 80057b8:	6163      	str	r3, [r4, #20]
 80057ba:	b003      	add	sp, #12
 80057bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057be:	466a      	mov	r2, sp
 80057c0:	ab01      	add	r3, sp, #4
 80057c2:	f7ff ffc9 	bl	8005758 <__swhatbuf_r>
 80057c6:	9f00      	ldr	r7, [sp, #0]
 80057c8:	4605      	mov	r5, r0
 80057ca:	4639      	mov	r1, r7
 80057cc:	4630      	mov	r0, r6
 80057ce:	f7ff f8f9 	bl	80049c4 <_malloc_r>
 80057d2:	b948      	cbnz	r0, 80057e8 <__smakebuf_r+0x46>
 80057d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d8:	059a      	lsls	r2, r3, #22
 80057da:	d4ee      	bmi.n	80057ba <__smakebuf_r+0x18>
 80057dc:	f023 0303 	bic.w	r3, r3, #3
 80057e0:	f043 0302 	orr.w	r3, r3, #2
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	e7e2      	b.n	80057ae <__smakebuf_r+0xc>
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80057ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	9b01      	ldr	r3, [sp, #4]
 80057f6:	6020      	str	r0, [r4, #0]
 80057f8:	b15b      	cbz	r3, 8005812 <__smakebuf_r+0x70>
 80057fa:	4630      	mov	r0, r6
 80057fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005800:	f000 f81e 	bl	8005840 <_isatty_r>
 8005804:	b128      	cbz	r0, 8005812 <__smakebuf_r+0x70>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	f023 0303 	bic.w	r3, r3, #3
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	431d      	orrs	r5, r3
 8005816:	81a5      	strh	r5, [r4, #12]
 8005818:	e7cf      	b.n	80057ba <__smakebuf_r+0x18>
	...

0800581c <_fstat_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	2300      	movs	r3, #0
 8005820:	4d06      	ldr	r5, [pc, #24]	@ (800583c <_fstat_r+0x20>)
 8005822:	4604      	mov	r4, r0
 8005824:	4608      	mov	r0, r1
 8005826:	4611      	mov	r1, r2
 8005828:	602b      	str	r3, [r5, #0]
 800582a:	f7fd f897 	bl	800295c <_fstat>
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	d102      	bne.n	8005838 <_fstat_r+0x1c>
 8005832:	682b      	ldr	r3, [r5, #0]
 8005834:	b103      	cbz	r3, 8005838 <_fstat_r+0x1c>
 8005836:	6023      	str	r3, [r4, #0]
 8005838:	bd38      	pop	{r3, r4, r5, pc}
 800583a:	bf00      	nop
 800583c:	20000674 	.word	0x20000674

08005840 <_isatty_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	2300      	movs	r3, #0
 8005844:	4d05      	ldr	r5, [pc, #20]	@ (800585c <_isatty_r+0x1c>)
 8005846:	4604      	mov	r4, r0
 8005848:	4608      	mov	r0, r1
 800584a:	602b      	str	r3, [r5, #0]
 800584c:	f7fd f895 	bl	800297a <_isatty>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d102      	bne.n	800585a <_isatty_r+0x1a>
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	b103      	cbz	r3, 800585a <_isatty_r+0x1a>
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	20000674 	.word	0x20000674

08005860 <cos>:
 8005860:	b530      	push	{r4, r5, lr}
 8005862:	4d20      	ldr	r5, [pc, #128]	@ (80058e4 <cos+0x84>)
 8005864:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8005868:	42ac      	cmp	r4, r5
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	b087      	sub	sp, #28
 8005870:	d806      	bhi.n	8005880 <cos+0x20>
 8005872:	2200      	movs	r2, #0
 8005874:	2300      	movs	r3, #0
 8005876:	b007      	add	sp, #28
 8005878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800587c:	f000 b87c 	b.w	8005978 <__kernel_cos>
 8005880:	4d19      	ldr	r5, [pc, #100]	@ (80058e8 <cos+0x88>)
 8005882:	42ac      	cmp	r4, r5
 8005884:	d903      	bls.n	800588e <cos+0x2e>
 8005886:	f7fa fc67 	bl	8000158 <__aeabi_dsub>
 800588a:	b007      	add	sp, #28
 800588c:	bd30      	pop	{r4, r5, pc}
 800588e:	aa02      	add	r2, sp, #8
 8005890:	f000 f9ea 	bl	8005c68 <__ieee754_rem_pio2>
 8005894:	f000 0003 	and.w	r0, r0, #3
 8005898:	2801      	cmp	r0, #1
 800589a:	d009      	beq.n	80058b0 <cos+0x50>
 800589c:	2802      	cmp	r0, #2
 800589e:	d011      	beq.n	80058c4 <cos+0x64>
 80058a0:	b9b8      	cbnz	r0, 80058d2 <cos+0x72>
 80058a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058aa:	f000 f865 	bl	8005978 <__kernel_cos>
 80058ae:	e7ec      	b.n	800588a <cos+0x2a>
 80058b0:	9000      	str	r0, [sp, #0]
 80058b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ba:	f000 f91d 	bl	8005af8 <__kernel_sin>
 80058be:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80058c2:	e7e2      	b.n	800588a <cos+0x2a>
 80058c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058cc:	f000 f854 	bl	8005978 <__kernel_cos>
 80058d0:	e7f5      	b.n	80058be <cos+0x5e>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058de:	f000 f90b 	bl	8005af8 <__kernel_sin>
 80058e2:	e7d2      	b.n	800588a <cos+0x2a>
 80058e4:	3fe921fb 	.word	0x3fe921fb
 80058e8:	7fefffff 	.word	0x7fefffff

080058ec <sin>:
 80058ec:	b530      	push	{r4, r5, lr}
 80058ee:	4d20      	ldr	r5, [pc, #128]	@ (8005970 <sin+0x84>)
 80058f0:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80058f4:	42ac      	cmp	r4, r5
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	b087      	sub	sp, #28
 80058fc:	d806      	bhi.n	800590c <sin+0x20>
 80058fe:	2300      	movs	r3, #0
 8005900:	2200      	movs	r2, #0
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	2300      	movs	r3, #0
 8005906:	f000 f8f7 	bl	8005af8 <__kernel_sin>
 800590a:	e004      	b.n	8005916 <sin+0x2a>
 800590c:	4d19      	ldr	r5, [pc, #100]	@ (8005974 <sin+0x88>)
 800590e:	42ac      	cmp	r4, r5
 8005910:	d903      	bls.n	800591a <sin+0x2e>
 8005912:	f7fa fc21 	bl	8000158 <__aeabi_dsub>
 8005916:	b007      	add	sp, #28
 8005918:	bd30      	pop	{r4, r5, pc}
 800591a:	aa02      	add	r2, sp, #8
 800591c:	f000 f9a4 	bl	8005c68 <__ieee754_rem_pio2>
 8005920:	f000 0003 	and.w	r0, r0, #3
 8005924:	2801      	cmp	r0, #1
 8005926:	d009      	beq.n	800593c <sin+0x50>
 8005928:	2802      	cmp	r0, #2
 800592a:	d00e      	beq.n	800594a <sin+0x5e>
 800592c:	b9c0      	cbnz	r0, 8005960 <sin+0x74>
 800592e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005932:	2301      	movs	r3, #1
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800593a:	e7e4      	b.n	8005906 <sin+0x1a>
 800593c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005944:	f000 f818 	bl	8005978 <__kernel_cos>
 8005948:	e7e5      	b.n	8005916 <sin+0x2a>
 800594a:	2301      	movs	r3, #1
 800594c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005956:	f000 f8cf 	bl	8005af8 <__kernel_sin>
 800595a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800595e:	e7da      	b.n	8005916 <sin+0x2a>
 8005960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005968:	f000 f806 	bl	8005978 <__kernel_cos>
 800596c:	e7f5      	b.n	800595a <sin+0x6e>
 800596e:	bf00      	nop
 8005970:	3fe921fb 	.word	0x3fe921fb
 8005974:	7fefffff 	.word	0x7fefffff

08005978 <__kernel_cos>:
 8005978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8005980:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8005984:	4680      	mov	r8, r0
 8005986:	4689      	mov	r9, r1
 8005988:	e9cd 2300 	strd	r2, r3, [sp]
 800598c:	d204      	bcs.n	8005998 <__kernel_cos+0x20>
 800598e:	f7fb f835 	bl	80009fc <__aeabi_d2iz>
 8005992:	2800      	cmp	r0, #0
 8005994:	f000 8086 	beq.w	8005aa4 <__kernel_cos+0x12c>
 8005998:	4642      	mov	r2, r8
 800599a:	464b      	mov	r3, r9
 800599c:	4640      	mov	r0, r8
 800599e:	4649      	mov	r1, r9
 80059a0:	f7fa fd92 	bl	80004c8 <__aeabi_dmul>
 80059a4:	2200      	movs	r2, #0
 80059a6:	4b4e      	ldr	r3, [pc, #312]	@ (8005ae0 <__kernel_cos+0x168>)
 80059a8:	4604      	mov	r4, r0
 80059aa:	460d      	mov	r5, r1
 80059ac:	f7fa fd8c 	bl	80004c8 <__aeabi_dmul>
 80059b0:	a33f      	add	r3, pc, #252	@ (adr r3, 8005ab0 <__kernel_cos+0x138>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	4682      	mov	sl, r0
 80059b8:	468b      	mov	fp, r1
 80059ba:	4620      	mov	r0, r4
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fa fd83 	bl	80004c8 <__aeabi_dmul>
 80059c2:	a33d      	add	r3, pc, #244	@ (adr r3, 8005ab8 <__kernel_cos+0x140>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f7fa fbc8 	bl	800015c <__adddf3>
 80059cc:	4622      	mov	r2, r4
 80059ce:	462b      	mov	r3, r5
 80059d0:	f7fa fd7a 	bl	80004c8 <__aeabi_dmul>
 80059d4:	a33a      	add	r3, pc, #232	@ (adr r3, 8005ac0 <__kernel_cos+0x148>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f7fa fbbd 	bl	8000158 <__aeabi_dsub>
 80059de:	4622      	mov	r2, r4
 80059e0:	462b      	mov	r3, r5
 80059e2:	f7fa fd71 	bl	80004c8 <__aeabi_dmul>
 80059e6:	a338      	add	r3, pc, #224	@ (adr r3, 8005ac8 <__kernel_cos+0x150>)
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f7fa fbb6 	bl	800015c <__adddf3>
 80059f0:	4622      	mov	r2, r4
 80059f2:	462b      	mov	r3, r5
 80059f4:	f7fa fd68 	bl	80004c8 <__aeabi_dmul>
 80059f8:	a335      	add	r3, pc, #212	@ (adr r3, 8005ad0 <__kernel_cos+0x158>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f7fa fbab 	bl	8000158 <__aeabi_dsub>
 8005a02:	4622      	mov	r2, r4
 8005a04:	462b      	mov	r3, r5
 8005a06:	f7fa fd5f 	bl	80004c8 <__aeabi_dmul>
 8005a0a:	a333      	add	r3, pc, #204	@ (adr r3, 8005ad8 <__kernel_cos+0x160>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fba4 	bl	800015c <__adddf3>
 8005a14:	4622      	mov	r2, r4
 8005a16:	462b      	mov	r3, r5
 8005a18:	f7fa fd56 	bl	80004c8 <__aeabi_dmul>
 8005a1c:	4622      	mov	r2, r4
 8005a1e:	462b      	mov	r3, r5
 8005a20:	f7fa fd52 	bl	80004c8 <__aeabi_dmul>
 8005a24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a28:	4604      	mov	r4, r0
 8005a2a:	460d      	mov	r5, r1
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	4649      	mov	r1, r9
 8005a30:	f7fa fd4a 	bl	80004c8 <__aeabi_dmul>
 8005a34:	460b      	mov	r3, r1
 8005a36:	4602      	mov	r2, r0
 8005a38:	4629      	mov	r1, r5
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f7fa fb8c 	bl	8000158 <__aeabi_dsub>
 8005a40:	4b28      	ldr	r3, [pc, #160]	@ (8005ae4 <__kernel_cos+0x16c>)
 8005a42:	4680      	mov	r8, r0
 8005a44:	429e      	cmp	r6, r3
 8005a46:	4689      	mov	r9, r1
 8005a48:	d80e      	bhi.n	8005a68 <__kernel_cos+0xf0>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4650      	mov	r0, sl
 8005a50:	4659      	mov	r1, fp
 8005a52:	f7fa fb81 	bl	8000158 <__aeabi_dsub>
 8005a56:	4602      	mov	r2, r0
 8005a58:	2000      	movs	r0, #0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4922      	ldr	r1, [pc, #136]	@ (8005ae8 <__kernel_cos+0x170>)
 8005a5e:	f7fa fb7b 	bl	8000158 <__aeabi_dsub>
 8005a62:	b003      	add	sp, #12
 8005a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a68:	2400      	movs	r4, #0
 8005a6a:	4b20      	ldr	r3, [pc, #128]	@ (8005aec <__kernel_cos+0x174>)
 8005a6c:	4622      	mov	r2, r4
 8005a6e:	429e      	cmp	r6, r3
 8005a70:	bf8c      	ite	hi
 8005a72:	4d1f      	ldrhi	r5, [pc, #124]	@ (8005af0 <__kernel_cos+0x178>)
 8005a74:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8005a78:	462b      	mov	r3, r5
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	491a      	ldr	r1, [pc, #104]	@ (8005ae8 <__kernel_cos+0x170>)
 8005a7e:	f7fa fb6b 	bl	8000158 <__aeabi_dsub>
 8005a82:	4622      	mov	r2, r4
 8005a84:	4606      	mov	r6, r0
 8005a86:	460f      	mov	r7, r1
 8005a88:	462b      	mov	r3, r5
 8005a8a:	4650      	mov	r0, sl
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	f7fa fb63 	bl	8000158 <__aeabi_dsub>
 8005a92:	4642      	mov	r2, r8
 8005a94:	464b      	mov	r3, r9
 8005a96:	f7fa fb5f 	bl	8000158 <__aeabi_dsub>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	e7dc      	b.n	8005a5e <__kernel_cos+0xe6>
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	4910      	ldr	r1, [pc, #64]	@ (8005ae8 <__kernel_cos+0x170>)
 8005aa8:	e7db      	b.n	8005a62 <__kernel_cos+0xea>
 8005aaa:	bf00      	nop
 8005aac:	f3af 8000 	nop.w
 8005ab0:	be8838d4 	.word	0xbe8838d4
 8005ab4:	bda8fae9 	.word	0xbda8fae9
 8005ab8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005abc:	3e21ee9e 	.word	0x3e21ee9e
 8005ac0:	809c52ad 	.word	0x809c52ad
 8005ac4:	3e927e4f 	.word	0x3e927e4f
 8005ac8:	19cb1590 	.word	0x19cb1590
 8005acc:	3efa01a0 	.word	0x3efa01a0
 8005ad0:	16c15177 	.word	0x16c15177
 8005ad4:	3f56c16c 	.word	0x3f56c16c
 8005ad8:	5555554c 	.word	0x5555554c
 8005adc:	3fa55555 	.word	0x3fa55555
 8005ae0:	3fe00000 	.word	0x3fe00000
 8005ae4:	3fd33332 	.word	0x3fd33332
 8005ae8:	3ff00000 	.word	0x3ff00000
 8005aec:	3fe90000 	.word	0x3fe90000
 8005af0:	3fd20000 	.word	0x3fd20000
 8005af4:	00000000 	.word	0x00000000

08005af8 <__kernel_sin>:
 8005af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	461f      	mov	r7, r3
 8005afe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005b02:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005b06:	4604      	mov	r4, r0
 8005b08:	460d      	mov	r5, r1
 8005b0a:	4616      	mov	r6, r2
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	d203      	bcs.n	8005b18 <__kernel_sin+0x20>
 8005b10:	f7fa ff74 	bl	80009fc <__aeabi_d2iz>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d051      	beq.n	8005bbc <__kernel_sin+0xc4>
 8005b18:	4622      	mov	r2, r4
 8005b1a:	462b      	mov	r3, r5
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f7fa fcd2 	bl	80004c8 <__aeabi_dmul>
 8005b24:	4682      	mov	sl, r0
 8005b26:	468b      	mov	fp, r1
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	4629      	mov	r1, r5
 8005b30:	f7fa fcca 	bl	80004c8 <__aeabi_dmul>
 8005b34:	a33e      	add	r3, pc, #248	@ (adr r3, 8005c30 <__kernel_sin+0x138>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	4680      	mov	r8, r0
 8005b3c:	4689      	mov	r9, r1
 8005b3e:	4650      	mov	r0, sl
 8005b40:	4659      	mov	r1, fp
 8005b42:	f7fa fcc1 	bl	80004c8 <__aeabi_dmul>
 8005b46:	a33c      	add	r3, pc, #240	@ (adr r3, 8005c38 <__kernel_sin+0x140>)
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f7fa fb04 	bl	8000158 <__aeabi_dsub>
 8005b50:	4652      	mov	r2, sl
 8005b52:	465b      	mov	r3, fp
 8005b54:	f7fa fcb8 	bl	80004c8 <__aeabi_dmul>
 8005b58:	a339      	add	r3, pc, #228	@ (adr r3, 8005c40 <__kernel_sin+0x148>)
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f7fa fafd 	bl	800015c <__adddf3>
 8005b62:	4652      	mov	r2, sl
 8005b64:	465b      	mov	r3, fp
 8005b66:	f7fa fcaf 	bl	80004c8 <__aeabi_dmul>
 8005b6a:	a337      	add	r3, pc, #220	@ (adr r3, 8005c48 <__kernel_sin+0x150>)
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f7fa faf2 	bl	8000158 <__aeabi_dsub>
 8005b74:	4652      	mov	r2, sl
 8005b76:	465b      	mov	r3, fp
 8005b78:	f7fa fca6 	bl	80004c8 <__aeabi_dmul>
 8005b7c:	a334      	add	r3, pc, #208	@ (adr r3, 8005c50 <__kernel_sin+0x158>)
 8005b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b82:	f7fa faeb 	bl	800015c <__adddf3>
 8005b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b88:	e9cd 0100 	strd	r0, r1, [sp]
 8005b8c:	b9db      	cbnz	r3, 8005bc6 <__kernel_sin+0xce>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4650      	mov	r0, sl
 8005b94:	4659      	mov	r1, fp
 8005b96:	f7fa fc97 	bl	80004c8 <__aeabi_dmul>
 8005b9a:	a32f      	add	r3, pc, #188	@ (adr r3, 8005c58 <__kernel_sin+0x160>)
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f7fa fada 	bl	8000158 <__aeabi_dsub>
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	f7fa fc8e 	bl	80004c8 <__aeabi_dmul>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	f7fa fad2 	bl	800015c <__adddf3>
 8005bb8:	4604      	mov	r4, r0
 8005bba:	460d      	mov	r5, r1
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	b005      	add	sp, #20
 8005bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	4630      	mov	r0, r6
 8005bca:	4639      	mov	r1, r7
 8005bcc:	4b24      	ldr	r3, [pc, #144]	@ (8005c60 <__kernel_sin+0x168>)
 8005bce:	f7fa fc7b 	bl	80004c8 <__aeabi_dmul>
 8005bd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bda:	4640      	mov	r0, r8
 8005bdc:	4649      	mov	r1, r9
 8005bde:	f7fa fc73 	bl	80004c8 <__aeabi_dmul>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bea:	f7fa fab5 	bl	8000158 <__aeabi_dsub>
 8005bee:	4652      	mov	r2, sl
 8005bf0:	465b      	mov	r3, fp
 8005bf2:	f7fa fc69 	bl	80004c8 <__aeabi_dmul>
 8005bf6:	4632      	mov	r2, r6
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	f7fa faad 	bl	8000158 <__aeabi_dsub>
 8005bfe:	a316      	add	r3, pc, #88	@ (adr r3, 8005c58 <__kernel_sin+0x160>)
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	4606      	mov	r6, r0
 8005c06:	460f      	mov	r7, r1
 8005c08:	4640      	mov	r0, r8
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	f7fa fc5c 	bl	80004c8 <__aeabi_dmul>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4630      	mov	r0, r6
 8005c16:	4639      	mov	r1, r7
 8005c18:	f7fa faa0 	bl	800015c <__adddf3>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4620      	mov	r0, r4
 8005c22:	4629      	mov	r1, r5
 8005c24:	f7fa fa98 	bl	8000158 <__aeabi_dsub>
 8005c28:	e7c6      	b.n	8005bb8 <__kernel_sin+0xc0>
 8005c2a:	bf00      	nop
 8005c2c:	f3af 8000 	nop.w
 8005c30:	5acfd57c 	.word	0x5acfd57c
 8005c34:	3de5d93a 	.word	0x3de5d93a
 8005c38:	8a2b9ceb 	.word	0x8a2b9ceb
 8005c3c:	3e5ae5e6 	.word	0x3e5ae5e6
 8005c40:	57b1fe7d 	.word	0x57b1fe7d
 8005c44:	3ec71de3 	.word	0x3ec71de3
 8005c48:	19c161d5 	.word	0x19c161d5
 8005c4c:	3f2a01a0 	.word	0x3f2a01a0
 8005c50:	1110f8a6 	.word	0x1110f8a6
 8005c54:	3f811111 	.word	0x3f811111
 8005c58:	55555549 	.word	0x55555549
 8005c5c:	3fc55555 	.word	0x3fc55555
 8005c60:	3fe00000 	.word	0x3fe00000
 8005c64:	00000000 	.word	0x00000000

08005c68 <__ieee754_rem_pio2>:
 8005c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	4bc4      	ldr	r3, [pc, #784]	@ (8005f80 <__ieee754_rem_pio2+0x318>)
 8005c6e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8005c72:	b08d      	sub	sp, #52	@ 0x34
 8005c74:	4598      	cmp	r8, r3
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	4614      	mov	r4, r2
 8005c7c:	9104      	str	r1, [sp, #16]
 8005c7e:	d807      	bhi.n	8005c90 <__ieee754_rem_pio2+0x28>
 8005c80:	e9c2 6700 	strd	r6, r7, [r2]
 8005c84:	2300      	movs	r3, #0
 8005c86:	2200      	movs	r2, #0
 8005c88:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005c8c:	2500      	movs	r5, #0
 8005c8e:	e026      	b.n	8005cde <__ieee754_rem_pio2+0x76>
 8005c90:	4bbc      	ldr	r3, [pc, #752]	@ (8005f84 <__ieee754_rem_pio2+0x31c>)
 8005c92:	4598      	cmp	r8, r3
 8005c94:	d876      	bhi.n	8005d84 <__ieee754_rem_pio2+0x11c>
 8005c96:	9b04      	ldr	r3, [sp, #16]
 8005c98:	4dbb      	ldr	r5, [pc, #748]	@ (8005f88 <__ieee754_rem_pio2+0x320>)
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	a3aa      	add	r3, pc, #680	@ (adr r3, 8005f48 <__ieee754_rem_pio2+0x2e0>)
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	dd38      	ble.n	8005d16 <__ieee754_rem_pio2+0xae>
 8005ca4:	f7fa fa58 	bl	8000158 <__aeabi_dsub>
 8005ca8:	45a8      	cmp	r8, r5
 8005caa:	4606      	mov	r6, r0
 8005cac:	460f      	mov	r7, r1
 8005cae:	d01a      	beq.n	8005ce6 <__ieee754_rem_pio2+0x7e>
 8005cb0:	a3a7      	add	r3, pc, #668	@ (adr r3, 8005f50 <__ieee754_rem_pio2+0x2e8>)
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f7fa fa4f 	bl	8000158 <__aeabi_dsub>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	4689      	mov	r9, r1
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	4639      	mov	r1, r7
 8005cc6:	f7fa fa47 	bl	8000158 <__aeabi_dsub>
 8005cca:	a3a1      	add	r3, pc, #644	@ (adr r3, 8005f50 <__ieee754_rem_pio2+0x2e8>)
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	f7fa fa42 	bl	8000158 <__aeabi_dsub>
 8005cd4:	2501      	movs	r5, #1
 8005cd6:	e9c4 8900 	strd	r8, r9, [r4]
 8005cda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005cde:	4628      	mov	r0, r5
 8005ce0:	b00d      	add	sp, #52	@ 0x34
 8005ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce6:	a39c      	add	r3, pc, #624	@ (adr r3, 8005f58 <__ieee754_rem_pio2+0x2f0>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa fa34 	bl	8000158 <__aeabi_dsub>
 8005cf0:	a39b      	add	r3, pc, #620	@ (adr r3, 8005f60 <__ieee754_rem_pio2+0x2f8>)
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	f7fa fa2d 	bl	8000158 <__aeabi_dsub>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4680      	mov	r8, r0
 8005d04:	4689      	mov	r9, r1
 8005d06:	4630      	mov	r0, r6
 8005d08:	4639      	mov	r1, r7
 8005d0a:	f7fa fa25 	bl	8000158 <__aeabi_dsub>
 8005d0e:	a394      	add	r3, pc, #592	@ (adr r3, 8005f60 <__ieee754_rem_pio2+0x2f8>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	e7dc      	b.n	8005cd0 <__ieee754_rem_pio2+0x68>
 8005d16:	f7fa fa21 	bl	800015c <__adddf3>
 8005d1a:	45a8      	cmp	r8, r5
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	460f      	mov	r7, r1
 8005d20:	d018      	beq.n	8005d54 <__ieee754_rem_pio2+0xec>
 8005d22:	a38b      	add	r3, pc, #556	@ (adr r3, 8005f50 <__ieee754_rem_pio2+0x2e8>)
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f7fa fa18 	bl	800015c <__adddf3>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4680      	mov	r8, r0
 8005d32:	4689      	mov	r9, r1
 8005d34:	4630      	mov	r0, r6
 8005d36:	4639      	mov	r1, r7
 8005d38:	f7fa fa0e 	bl	8000158 <__aeabi_dsub>
 8005d3c:	a384      	add	r3, pc, #528	@ (adr r3, 8005f50 <__ieee754_rem_pio2+0x2e8>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f7fa fa0b 	bl	800015c <__adddf3>
 8005d46:	f04f 35ff 	mov.w	r5, #4294967295
 8005d4a:	e9c4 8900 	strd	r8, r9, [r4]
 8005d4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d52:	e7c4      	b.n	8005cde <__ieee754_rem_pio2+0x76>
 8005d54:	a380      	add	r3, pc, #512	@ (adr r3, 8005f58 <__ieee754_rem_pio2+0x2f0>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f7fa f9ff 	bl	800015c <__adddf3>
 8005d5e:	a380      	add	r3, pc, #512	@ (adr r3, 8005f60 <__ieee754_rem_pio2+0x2f8>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	4606      	mov	r6, r0
 8005d66:	460f      	mov	r7, r1
 8005d68:	f7fa f9f8 	bl	800015c <__adddf3>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4680      	mov	r8, r0
 8005d72:	4689      	mov	r9, r1
 8005d74:	4630      	mov	r0, r6
 8005d76:	4639      	mov	r1, r7
 8005d78:	f7fa f9ee 	bl	8000158 <__aeabi_dsub>
 8005d7c:	a378      	add	r3, pc, #480	@ (adr r3, 8005f60 <__ieee754_rem_pio2+0x2f8>)
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	e7de      	b.n	8005d42 <__ieee754_rem_pio2+0xda>
 8005d84:	4b81      	ldr	r3, [pc, #516]	@ (8005f8c <__ieee754_rem_pio2+0x324>)
 8005d86:	4598      	cmp	r8, r3
 8005d88:	f200 80cf 	bhi.w	8005f2a <__ieee754_rem_pio2+0x2c2>
 8005d8c:	f000 f962 	bl	8006054 <fabs>
 8005d90:	a375      	add	r3, pc, #468	@ (adr r3, 8005f68 <__ieee754_rem_pio2+0x300>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	4606      	mov	r6, r0
 8005d98:	460f      	mov	r7, r1
 8005d9a:	f7fa fb95 	bl	80004c8 <__aeabi_dmul>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	4b7b      	ldr	r3, [pc, #492]	@ (8005f90 <__ieee754_rem_pio2+0x328>)
 8005da2:	f7fa f9db 	bl	800015c <__adddf3>
 8005da6:	f7fa fe29 	bl	80009fc <__aeabi_d2iz>
 8005daa:	4605      	mov	r5, r0
 8005dac:	f7fa fb22 	bl	80003f4 <__aeabi_i2d>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005db8:	a363      	add	r3, pc, #396	@ (adr r3, 8005f48 <__ieee754_rem_pio2+0x2e0>)
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	f7fa fb83 	bl	80004c8 <__aeabi_dmul>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	4639      	mov	r1, r7
 8005dca:	f7fa f9c5 	bl	8000158 <__aeabi_dsub>
 8005dce:	a360      	add	r3, pc, #384	@ (adr r3, 8005f50 <__ieee754_rem_pio2+0x2e8>)
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	4682      	mov	sl, r0
 8005dd6:	468b      	mov	fp, r1
 8005dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ddc:	f7fa fb74 	bl	80004c8 <__aeabi_dmul>
 8005de0:	2d1f      	cmp	r5, #31
 8005de2:	4606      	mov	r6, r0
 8005de4:	460f      	mov	r7, r1
 8005de6:	dc0c      	bgt.n	8005e02 <__ieee754_rem_pio2+0x19a>
 8005de8:	4b6a      	ldr	r3, [pc, #424]	@ (8005f94 <__ieee754_rem_pio2+0x32c>)
 8005dea:	1e6a      	subs	r2, r5, #1
 8005dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df0:	4543      	cmp	r3, r8
 8005df2:	d006      	beq.n	8005e02 <__ieee754_rem_pio2+0x19a>
 8005df4:	4632      	mov	r2, r6
 8005df6:	463b      	mov	r3, r7
 8005df8:	4650      	mov	r0, sl
 8005dfa:	4659      	mov	r1, fp
 8005dfc:	f7fa f9ac 	bl	8000158 <__aeabi_dsub>
 8005e00:	e00e      	b.n	8005e20 <__ieee754_rem_pio2+0x1b8>
 8005e02:	463b      	mov	r3, r7
 8005e04:	4632      	mov	r2, r6
 8005e06:	4650      	mov	r0, sl
 8005e08:	4659      	mov	r1, fp
 8005e0a:	f7fa f9a5 	bl	8000158 <__aeabi_dsub>
 8005e0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005e12:	9305      	str	r3, [sp, #20]
 8005e14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005e18:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	dc02      	bgt.n	8005e26 <__ieee754_rem_pio2+0x1be>
 8005e20:	e9c4 0100 	strd	r0, r1, [r4]
 8005e24:	e039      	b.n	8005e9a <__ieee754_rem_pio2+0x232>
 8005e26:	a34c      	add	r3, pc, #304	@ (adr r3, 8005f58 <__ieee754_rem_pio2+0x2f0>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e30:	f7fa fb4a 	bl	80004c8 <__aeabi_dmul>
 8005e34:	4606      	mov	r6, r0
 8005e36:	460f      	mov	r7, r1
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4650      	mov	r0, sl
 8005e3e:	4659      	mov	r1, fp
 8005e40:	f7fa f98a 	bl	8000158 <__aeabi_dsub>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4680      	mov	r8, r0
 8005e4a:	4689      	mov	r9, r1
 8005e4c:	4650      	mov	r0, sl
 8005e4e:	4659      	mov	r1, fp
 8005e50:	f7fa f982 	bl	8000158 <__aeabi_dsub>
 8005e54:	4632      	mov	r2, r6
 8005e56:	463b      	mov	r3, r7
 8005e58:	f7fa f97e 	bl	8000158 <__aeabi_dsub>
 8005e5c:	a340      	add	r3, pc, #256	@ (adr r3, 8005f60 <__ieee754_rem_pio2+0x2f8>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	4606      	mov	r6, r0
 8005e64:	460f      	mov	r7, r1
 8005e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e6a:	f7fa fb2d 	bl	80004c8 <__aeabi_dmul>
 8005e6e:	4632      	mov	r2, r6
 8005e70:	463b      	mov	r3, r7
 8005e72:	f7fa f971 	bl	8000158 <__aeabi_dsub>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	460f      	mov	r7, r1
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4649      	mov	r1, r9
 8005e82:	f7fa f969 	bl	8000158 <__aeabi_dsub>
 8005e86:	9a05      	ldr	r2, [sp, #20]
 8005e88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b31      	cmp	r3, #49	@ 0x31
 8005e90:	dc20      	bgt.n	8005ed4 <__ieee754_rem_pio2+0x26c>
 8005e92:	46c2      	mov	sl, r8
 8005e94:	46cb      	mov	fp, r9
 8005e96:	e9c4 0100 	strd	r0, r1, [r4]
 8005e9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005e9e:	4650      	mov	r0, sl
 8005ea0:	4642      	mov	r2, r8
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	f7fa f957 	bl	8000158 <__aeabi_dsub>
 8005eaa:	463b      	mov	r3, r7
 8005eac:	4632      	mov	r2, r6
 8005eae:	f7fa f953 	bl	8000158 <__aeabi_dsub>
 8005eb2:	9b04      	ldr	r3, [sp, #16]
 8005eb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f6bf af10 	bge.w	8005cde <__ieee754_rem_pio2+0x76>
 8005ebe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005ec2:	6063      	str	r3, [r4, #4]
 8005ec4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ec8:	f8c4 8000 	str.w	r8, [r4]
 8005ecc:	60a0      	str	r0, [r4, #8]
 8005ece:	60e3      	str	r3, [r4, #12]
 8005ed0:	426d      	negs	r5, r5
 8005ed2:	e704      	b.n	8005cde <__ieee754_rem_pio2+0x76>
 8005ed4:	a326      	add	r3, pc, #152	@ (adr r3, 8005f70 <__ieee754_rem_pio2+0x308>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ede:	f7fa faf3 	bl	80004c8 <__aeabi_dmul>
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	460f      	mov	r7, r1
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4640      	mov	r0, r8
 8005eec:	4649      	mov	r1, r9
 8005eee:	f7fa f933 	bl	8000158 <__aeabi_dsub>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4682      	mov	sl, r0
 8005ef8:	468b      	mov	fp, r1
 8005efa:	4640      	mov	r0, r8
 8005efc:	4649      	mov	r1, r9
 8005efe:	f7fa f92b 	bl	8000158 <__aeabi_dsub>
 8005f02:	4632      	mov	r2, r6
 8005f04:	463b      	mov	r3, r7
 8005f06:	f7fa f927 	bl	8000158 <__aeabi_dsub>
 8005f0a:	a31b      	add	r3, pc, #108	@ (adr r3, 8005f78 <__ieee754_rem_pio2+0x310>)
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	4606      	mov	r6, r0
 8005f12:	460f      	mov	r7, r1
 8005f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f18:	f7fa fad6 	bl	80004c8 <__aeabi_dmul>
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	463b      	mov	r3, r7
 8005f20:	f7fa f91a 	bl	8000158 <__aeabi_dsub>
 8005f24:	4606      	mov	r6, r0
 8005f26:	460f      	mov	r7, r1
 8005f28:	e764      	b.n	8005df4 <__ieee754_rem_pio2+0x18c>
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005f98 <__ieee754_rem_pio2+0x330>)
 8005f2c:	4598      	cmp	r8, r3
 8005f2e:	d935      	bls.n	8005f9c <__ieee754_rem_pio2+0x334>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	f7fa f910 	bl	8000158 <__aeabi_dsub>
 8005f38:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f3c:	e9c4 0100 	strd	r0, r1, [r4]
 8005f40:	e6a4      	b.n	8005c8c <__ieee754_rem_pio2+0x24>
 8005f42:	bf00      	nop
 8005f44:	f3af 8000 	nop.w
 8005f48:	54400000 	.word	0x54400000
 8005f4c:	3ff921fb 	.word	0x3ff921fb
 8005f50:	1a626331 	.word	0x1a626331
 8005f54:	3dd0b461 	.word	0x3dd0b461
 8005f58:	1a600000 	.word	0x1a600000
 8005f5c:	3dd0b461 	.word	0x3dd0b461
 8005f60:	2e037073 	.word	0x2e037073
 8005f64:	3ba3198a 	.word	0x3ba3198a
 8005f68:	6dc9c883 	.word	0x6dc9c883
 8005f6c:	3fe45f30 	.word	0x3fe45f30
 8005f70:	2e000000 	.word	0x2e000000
 8005f74:	3ba3198a 	.word	0x3ba3198a
 8005f78:	252049c1 	.word	0x252049c1
 8005f7c:	397b839a 	.word	0x397b839a
 8005f80:	3fe921fb 	.word	0x3fe921fb
 8005f84:	4002d97b 	.word	0x4002d97b
 8005f88:	3ff921fb 	.word	0x3ff921fb
 8005f8c:	413921fb 	.word	0x413921fb
 8005f90:	3fe00000 	.word	0x3fe00000
 8005f94:	0800a4a8 	.word	0x0800a4a8
 8005f98:	7fefffff 	.word	0x7fefffff
 8005f9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005fa0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005fa4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005fa8:	460f      	mov	r7, r1
 8005faa:	f7fa fd27 	bl	80009fc <__aeabi_d2iz>
 8005fae:	f7fa fa21 	bl	80003f4 <__aeabi_i2d>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	4639      	mov	r1, r7
 8005fba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005fbe:	f7fa f8cb 	bl	8000158 <__aeabi_dsub>
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4b21      	ldr	r3, [pc, #132]	@ (800604c <__ieee754_rem_pio2+0x3e4>)
 8005fc6:	f7fa fa7f 	bl	80004c8 <__aeabi_dmul>
 8005fca:	460f      	mov	r7, r1
 8005fcc:	4606      	mov	r6, r0
 8005fce:	f7fa fd15 	bl	80009fc <__aeabi_d2iz>
 8005fd2:	f7fa fa0f 	bl	80003f4 <__aeabi_i2d>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4630      	mov	r0, r6
 8005fdc:	4639      	mov	r1, r7
 8005fde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005fe2:	f7fa f8b9 	bl	8000158 <__aeabi_dsub>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4b18      	ldr	r3, [pc, #96]	@ (800604c <__ieee754_rem_pio2+0x3e4>)
 8005fea:	f7fa fa6d 	bl	80004c8 <__aeabi_dmul>
 8005fee:	f04f 0803 	mov.w	r8, #3
 8005ff2:	2600      	movs	r6, #0
 8005ff4:	2700      	movs	r7, #0
 8005ff6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005ffa:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005ffe:	4632      	mov	r2, r6
 8006000:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006004:	463b      	mov	r3, r7
 8006006:	46c2      	mov	sl, r8
 8006008:	f108 38ff 	add.w	r8, r8, #4294967295
 800600c:	f7fa fcc4 	bl	8000998 <__aeabi_dcmpeq>
 8006010:	2800      	cmp	r0, #0
 8006012:	d1f4      	bne.n	8005ffe <__ieee754_rem_pio2+0x396>
 8006014:	4b0e      	ldr	r3, [pc, #56]	@ (8006050 <__ieee754_rem_pio2+0x3e8>)
 8006016:	462a      	mov	r2, r5
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	2302      	movs	r3, #2
 800601c:	4621      	mov	r1, r4
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	a806      	add	r0, sp, #24
 8006022:	4653      	mov	r3, sl
 8006024:	f000 f81a 	bl	800605c <__kernel_rem_pio2>
 8006028:	9b04      	ldr	r3, [sp, #16]
 800602a:	4605      	mov	r5, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	f6bf ae56 	bge.w	8005cde <__ieee754_rem_pio2+0x76>
 8006032:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006036:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800603a:	e9c4 2300 	strd	r2, r3, [r4]
 800603e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006042:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006046:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800604a:	e741      	b.n	8005ed0 <__ieee754_rem_pio2+0x268>
 800604c:	41700000 	.word	0x41700000
 8006050:	0800a528 	.word	0x0800a528

08006054 <fabs>:
 8006054:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006058:	4619      	mov	r1, r3
 800605a:	4770      	bx	lr

0800605c <__kernel_rem_pio2>:
 800605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006060:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006064:	9308      	str	r3, [sp, #32]
 8006066:	9104      	str	r1, [sp, #16]
 8006068:	4bb6      	ldr	r3, [pc, #728]	@ (8006344 <__kernel_rem_pio2+0x2e8>)
 800606a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800606c:	f112 0f14 	cmn.w	r2, #20
 8006070:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006074:	bfa8      	it	ge
 8006076:	1ed4      	subge	r4, r2, #3
 8006078:	9302      	str	r3, [sp, #8]
 800607a:	9b08      	ldr	r3, [sp, #32]
 800607c:	bfb8      	it	lt
 800607e:	2400      	movlt	r4, #0
 8006080:	f103 33ff 	add.w	r3, r3, #4294967295
 8006084:	9306      	str	r3, [sp, #24]
 8006086:	bfa4      	itt	ge
 8006088:	2318      	movge	r3, #24
 800608a:	fb94 f4f3 	sdivge	r4, r4, r3
 800608e:	f06f 0317 	mvn.w	r3, #23
 8006092:	fb04 3303 	mla	r3, r4, r3, r3
 8006096:	eb03 0a02 	add.w	sl, r3, r2
 800609a:	9a06      	ldr	r2, [sp, #24]
 800609c:	9b02      	ldr	r3, [sp, #8]
 800609e:	1aa7      	subs	r7, r4, r2
 80060a0:	eb03 0802 	add.w	r8, r3, r2
 80060a4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80060a6:	2500      	movs	r5, #0
 80060a8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80060ac:	2200      	movs	r2, #0
 80060ae:	2300      	movs	r3, #0
 80060b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80060b2:	ae20      	add	r6, sp, #128	@ 0x80
 80060b4:	4545      	cmp	r5, r8
 80060b6:	dd14      	ble.n	80060e2 <__kernel_rem_pio2+0x86>
 80060b8:	f04f 0800 	mov.w	r8, #0
 80060bc:	9a08      	ldr	r2, [sp, #32]
 80060be:	ab20      	add	r3, sp, #128	@ 0x80
 80060c0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80060c4:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 80060c8:	9b02      	ldr	r3, [sp, #8]
 80060ca:	4598      	cmp	r8, r3
 80060cc:	dc35      	bgt.n	800613a <__kernel_rem_pio2+0xde>
 80060ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d0:	2200      	movs	r2, #0
 80060d2:	f1a3 0908 	sub.w	r9, r3, #8
 80060d6:	2300      	movs	r3, #0
 80060d8:	462f      	mov	r7, r5
 80060da:	2600      	movs	r6, #0
 80060dc:	e9cd 2300 	strd	r2, r3, [sp]
 80060e0:	e01f      	b.n	8006122 <__kernel_rem_pio2+0xc6>
 80060e2:	42ef      	cmn	r7, r5
 80060e4:	d40b      	bmi.n	80060fe <__kernel_rem_pio2+0xa2>
 80060e6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80060ea:	e9cd 2300 	strd	r2, r3, [sp]
 80060ee:	f7fa f981 	bl	80003f4 <__aeabi_i2d>
 80060f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060f6:	e8e6 0102 	strd	r0, r1, [r6], #8
 80060fa:	3501      	adds	r5, #1
 80060fc:	e7da      	b.n	80060b4 <__kernel_rem_pio2+0x58>
 80060fe:	4610      	mov	r0, r2
 8006100:	4619      	mov	r1, r3
 8006102:	e7f8      	b.n	80060f6 <__kernel_rem_pio2+0x9a>
 8006104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006108:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800610c:	f7fa f9dc 	bl	80004c8 <__aeabi_dmul>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006118:	f7fa f820 	bl	800015c <__adddf3>
 800611c:	e9cd 0100 	strd	r0, r1, [sp]
 8006120:	3601      	adds	r6, #1
 8006122:	9b06      	ldr	r3, [sp, #24]
 8006124:	3f08      	subs	r7, #8
 8006126:	429e      	cmp	r6, r3
 8006128:	ddec      	ble.n	8006104 <__kernel_rem_pio2+0xa8>
 800612a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800612e:	f108 0801 	add.w	r8, r8, #1
 8006132:	e8eb 2302 	strd	r2, r3, [fp], #8
 8006136:	3508      	adds	r5, #8
 8006138:	e7c6      	b.n	80060c8 <__kernel_rem_pio2+0x6c>
 800613a:	9b02      	ldr	r3, [sp, #8]
 800613c:	aa0c      	add	r2, sp, #48	@ 0x30
 800613e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006142:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006144:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8006146:	f8dd b008 	ldr.w	fp, [sp, #8]
 800614a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800614e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006150:	ab98      	add	r3, sp, #608	@ 0x260
 8006152:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006156:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800615a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800615c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006160:	ae0c      	add	r6, sp, #48	@ 0x30
 8006162:	4698      	mov	r8, r3
 8006164:	46b1      	mov	r9, r6
 8006166:	465f      	mov	r7, fp
 8006168:	9307      	str	r3, [sp, #28]
 800616a:	2f00      	cmp	r7, #0
 800616c:	f1a8 0808 	sub.w	r8, r8, #8
 8006170:	dc71      	bgt.n	8006256 <__kernel_rem_pio2+0x1fa>
 8006172:	4652      	mov	r2, sl
 8006174:	4620      	mov	r0, r4
 8006176:	4629      	mov	r1, r5
 8006178:	f000 fa96 	bl	80066a8 <scalbn>
 800617c:	2200      	movs	r2, #0
 800617e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006182:	4604      	mov	r4, r0
 8006184:	460d      	mov	r5, r1
 8006186:	f7fa f99f 	bl	80004c8 <__aeabi_dmul>
 800618a:	f000 fb05 	bl	8006798 <floor>
 800618e:	2200      	movs	r2, #0
 8006190:	4b6d      	ldr	r3, [pc, #436]	@ (8006348 <__kernel_rem_pio2+0x2ec>)
 8006192:	f7fa f999 	bl	80004c8 <__aeabi_dmul>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4620      	mov	r0, r4
 800619c:	4629      	mov	r1, r5
 800619e:	f7f9 ffdb 	bl	8000158 <__aeabi_dsub>
 80061a2:	460d      	mov	r5, r1
 80061a4:	4604      	mov	r4, r0
 80061a6:	f7fa fc29 	bl	80009fc <__aeabi_d2iz>
 80061aa:	9005      	str	r0, [sp, #20]
 80061ac:	f7fa f922 	bl	80003f4 <__aeabi_i2d>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4620      	mov	r0, r4
 80061b6:	4629      	mov	r1, r5
 80061b8:	f7f9 ffce 	bl	8000158 <__aeabi_dsub>
 80061bc:	f1ba 0f00 	cmp.w	sl, #0
 80061c0:	4680      	mov	r8, r0
 80061c2:	4689      	mov	r9, r1
 80061c4:	dd6d      	ble.n	80062a2 <__kernel_rem_pio2+0x246>
 80061c6:	f10b 31ff 	add.w	r1, fp, #4294967295
 80061ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80061cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061d0:	9c05      	ldr	r4, [sp, #20]
 80061d2:	f1ca 0018 	rsb	r0, sl, #24
 80061d6:	fa43 f200 	asr.w	r2, r3, r0
 80061da:	4414      	add	r4, r2
 80061dc:	4082      	lsls	r2, r0
 80061de:	1a9b      	subs	r3, r3, r2
 80061e0:	aa0c      	add	r2, sp, #48	@ 0x30
 80061e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80061e6:	f1ca 0217 	rsb	r2, sl, #23
 80061ea:	9405      	str	r4, [sp, #20]
 80061ec:	4113      	asrs	r3, r2
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	9b00      	ldr	r3, [sp, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	dd64      	ble.n	80062c0 <__kernel_rem_pio2+0x264>
 80061f6:	2200      	movs	r2, #0
 80061f8:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80061fc:	4614      	mov	r4, r2
 80061fe:	9b05      	ldr	r3, [sp, #20]
 8006200:	3301      	adds	r3, #1
 8006202:	9305      	str	r3, [sp, #20]
 8006204:	4593      	cmp	fp, r2
 8006206:	f300 80ab 	bgt.w	8006360 <__kernel_rem_pio2+0x304>
 800620a:	f1ba 0f00 	cmp.w	sl, #0
 800620e:	dd07      	ble.n	8006220 <__kernel_rem_pio2+0x1c4>
 8006210:	f1ba 0f01 	cmp.w	sl, #1
 8006214:	f000 80b2 	beq.w	800637c <__kernel_rem_pio2+0x320>
 8006218:	f1ba 0f02 	cmp.w	sl, #2
 800621c:	f000 80b9 	beq.w	8006392 <__kernel_rem_pio2+0x336>
 8006220:	9b00      	ldr	r3, [sp, #0]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d14c      	bne.n	80062c0 <__kernel_rem_pio2+0x264>
 8006226:	4642      	mov	r2, r8
 8006228:	464b      	mov	r3, r9
 800622a:	2000      	movs	r0, #0
 800622c:	4947      	ldr	r1, [pc, #284]	@ (800634c <__kernel_rem_pio2+0x2f0>)
 800622e:	f7f9 ff93 	bl	8000158 <__aeabi_dsub>
 8006232:	4680      	mov	r8, r0
 8006234:	4689      	mov	r9, r1
 8006236:	2c00      	cmp	r4, #0
 8006238:	d042      	beq.n	80062c0 <__kernel_rem_pio2+0x264>
 800623a:	4652      	mov	r2, sl
 800623c:	2000      	movs	r0, #0
 800623e:	4943      	ldr	r1, [pc, #268]	@ (800634c <__kernel_rem_pio2+0x2f0>)
 8006240:	f000 fa32 	bl	80066a8 <scalbn>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4640      	mov	r0, r8
 800624a:	4649      	mov	r1, r9
 800624c:	f7f9 ff84 	bl	8000158 <__aeabi_dsub>
 8006250:	4680      	mov	r8, r0
 8006252:	4689      	mov	r9, r1
 8006254:	e034      	b.n	80062c0 <__kernel_rem_pio2+0x264>
 8006256:	2200      	movs	r2, #0
 8006258:	4b3d      	ldr	r3, [pc, #244]	@ (8006350 <__kernel_rem_pio2+0x2f4>)
 800625a:	4620      	mov	r0, r4
 800625c:	4629      	mov	r1, r5
 800625e:	f7fa f933 	bl	80004c8 <__aeabi_dmul>
 8006262:	f7fa fbcb 	bl	80009fc <__aeabi_d2iz>
 8006266:	f7fa f8c5 	bl	80003f4 <__aeabi_i2d>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	e9cd 2300 	strd	r2, r3, [sp]
 8006272:	2200      	movs	r2, #0
 8006274:	4b37      	ldr	r3, [pc, #220]	@ (8006354 <__kernel_rem_pio2+0x2f8>)
 8006276:	f7fa f927 	bl	80004c8 <__aeabi_dmul>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4620      	mov	r0, r4
 8006280:	4629      	mov	r1, r5
 8006282:	f7f9 ff69 	bl	8000158 <__aeabi_dsub>
 8006286:	f7fa fbb9 	bl	80009fc <__aeabi_d2iz>
 800628a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800628e:	f849 0b04 	str.w	r0, [r9], #4
 8006292:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006296:	f7f9 ff61 	bl	800015c <__adddf3>
 800629a:	3f01      	subs	r7, #1
 800629c:	4604      	mov	r4, r0
 800629e:	460d      	mov	r5, r1
 80062a0:	e763      	b.n	800616a <__kernel_rem_pio2+0x10e>
 80062a2:	d106      	bne.n	80062b2 <__kernel_rem_pio2+0x256>
 80062a4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80062a8:	aa0c      	add	r2, sp, #48	@ 0x30
 80062aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ae:	15db      	asrs	r3, r3, #23
 80062b0:	e79d      	b.n	80061ee <__kernel_rem_pio2+0x192>
 80062b2:	2200      	movs	r2, #0
 80062b4:	4b28      	ldr	r3, [pc, #160]	@ (8006358 <__kernel_rem_pio2+0x2fc>)
 80062b6:	f7fa fb8d 	bl	80009d4 <__aeabi_dcmpge>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d13f      	bne.n	800633e <__kernel_rem_pio2+0x2e2>
 80062be:	9000      	str	r0, [sp, #0]
 80062c0:	2200      	movs	r2, #0
 80062c2:	2300      	movs	r3, #0
 80062c4:	4640      	mov	r0, r8
 80062c6:	4649      	mov	r1, r9
 80062c8:	f7fa fb66 	bl	8000998 <__aeabi_dcmpeq>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f000 80af 	beq.w	8006430 <__kernel_rem_pio2+0x3d4>
 80062d2:	2200      	movs	r2, #0
 80062d4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80062d8:	9902      	ldr	r1, [sp, #8]
 80062da:	428b      	cmp	r3, r1
 80062dc:	da61      	bge.n	80063a2 <__kernel_rem_pio2+0x346>
 80062de:	2a00      	cmp	r2, #0
 80062e0:	d076      	beq.n	80063d0 <__kernel_rem_pio2+0x374>
 80062e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062e6:	ab0c      	add	r3, sp, #48	@ 0x30
 80062e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80062ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f6      	beq.n	80062e2 <__kernel_rem_pio2+0x286>
 80062f4:	4652      	mov	r2, sl
 80062f6:	2000      	movs	r0, #0
 80062f8:	4914      	ldr	r1, [pc, #80]	@ (800634c <__kernel_rem_pio2+0x2f0>)
 80062fa:	f000 f9d5 	bl	80066a8 <scalbn>
 80062fe:	465d      	mov	r5, fp
 8006300:	4606      	mov	r6, r0
 8006302:	460f      	mov	r7, r1
 8006304:	f04f 0900 	mov.w	r9, #0
 8006308:	ab70      	add	r3, sp, #448	@ 0x1c0
 800630a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8006350 <__kernel_rem_pio2+0x2f4>
 800630e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8006312:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8006316:	2d00      	cmp	r5, #0
 8006318:	f280 80c0 	bge.w	800649c <__kernel_rem_pio2+0x440>
 800631c:	465d      	mov	r5, fp
 800631e:	2d00      	cmp	r5, #0
 8006320:	f2c0 80f0 	blt.w	8006504 <__kernel_rem_pio2+0x4a8>
 8006324:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <__kernel_rem_pio2+0x300>)
 8006326:	f04f 0900 	mov.w	r9, #0
 800632a:	9306      	str	r3, [sp, #24]
 800632c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800632e:	f04f 0a00 	mov.w	sl, #0
 8006332:	2700      	movs	r7, #0
 8006334:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8006338:	ebab 0605 	sub.w	r6, fp, r5
 800633c:	e0d6      	b.n	80064ec <__kernel_rem_pio2+0x490>
 800633e:	2302      	movs	r3, #2
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	e758      	b.n	80061f6 <__kernel_rem_pio2+0x19a>
 8006344:	0800a670 	.word	0x0800a670
 8006348:	40200000 	.word	0x40200000
 800634c:	3ff00000 	.word	0x3ff00000
 8006350:	3e700000 	.word	0x3e700000
 8006354:	41700000 	.word	0x41700000
 8006358:	3fe00000 	.word	0x3fe00000
 800635c:	0800a630 	.word	0x0800a630
 8006360:	f856 3b04 	ldr.w	r3, [r6], #4
 8006364:	b944      	cbnz	r4, 8006378 <__kernel_rem_pio2+0x31c>
 8006366:	b123      	cbz	r3, 8006372 <__kernel_rem_pio2+0x316>
 8006368:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800636c:	f846 3c04 	str.w	r3, [r6, #-4]
 8006370:	2301      	movs	r3, #1
 8006372:	461c      	mov	r4, r3
 8006374:	3201      	adds	r2, #1
 8006376:	e745      	b.n	8006204 <__kernel_rem_pio2+0x1a8>
 8006378:	1acb      	subs	r3, r1, r3
 800637a:	e7f7      	b.n	800636c <__kernel_rem_pio2+0x310>
 800637c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006380:	ab0c      	add	r3, sp, #48	@ 0x30
 8006382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006386:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800638a:	a90c      	add	r1, sp, #48	@ 0x30
 800638c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006390:	e746      	b.n	8006220 <__kernel_rem_pio2+0x1c4>
 8006392:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006396:	ab0c      	add	r3, sp, #48	@ 0x30
 8006398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800639c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80063a0:	e7f3      	b.n	800638a <__kernel_rem_pio2+0x32e>
 80063a2:	a90c      	add	r1, sp, #48	@ 0x30
 80063a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	430a      	orrs	r2, r1
 80063ac:	e794      	b.n	80062d8 <__kernel_rem_pio2+0x27c>
 80063ae:	3401      	adds	r4, #1
 80063b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	d0fa      	beq.n	80063ae <__kernel_rem_pio2+0x352>
 80063b8:	9b08      	ldr	r3, [sp, #32]
 80063ba:	aa20      	add	r2, sp, #128	@ 0x80
 80063bc:	445b      	add	r3, fp
 80063be:	f10b 0801 	add.w	r8, fp, #1
 80063c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80063c6:	445c      	add	r4, fp
 80063c8:	4544      	cmp	r4, r8
 80063ca:	da04      	bge.n	80063d6 <__kernel_rem_pio2+0x37a>
 80063cc:	46a3      	mov	fp, r4
 80063ce:	e6bf      	b.n	8006150 <__kernel_rem_pio2+0xf4>
 80063d0:	2401      	movs	r4, #1
 80063d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063d4:	e7ec      	b.n	80063b0 <__kernel_rem_pio2+0x354>
 80063d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063d8:	46ab      	mov	fp, r5
 80063da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80063de:	f7fa f809 	bl	80003f4 <__aeabi_i2d>
 80063e2:	f04f 0900 	mov.w	r9, #0
 80063e6:	2600      	movs	r6, #0
 80063e8:	2700      	movs	r7, #0
 80063ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ec:	e9c5 0100 	strd	r0, r1, [r5]
 80063f0:	3b08      	subs	r3, #8
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	9b06      	ldr	r3, [sp, #24]
 80063f6:	4599      	cmp	r9, r3
 80063f8:	dd07      	ble.n	800640a <__kernel_rem_pio2+0x3ae>
 80063fa:	9b07      	ldr	r3, [sp, #28]
 80063fc:	f108 0801 	add.w	r8, r8, #1
 8006400:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8006404:	3508      	adds	r5, #8
 8006406:	9307      	str	r3, [sp, #28]
 8006408:	e7de      	b.n	80063c8 <__kernel_rem_pio2+0x36c>
 800640a:	9900      	ldr	r1, [sp, #0]
 800640c:	f109 0901 	add.w	r9, r9, #1
 8006410:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006414:	9100      	str	r1, [sp, #0]
 8006416:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800641a:	f7fa f855 	bl	80004c8 <__aeabi_dmul>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4630      	mov	r0, r6
 8006424:	4639      	mov	r1, r7
 8006426:	f7f9 fe99 	bl	800015c <__adddf3>
 800642a:	4606      	mov	r6, r0
 800642c:	460f      	mov	r7, r1
 800642e:	e7e1      	b.n	80063f4 <__kernel_rem_pio2+0x398>
 8006430:	f1ca 0200 	rsb	r2, sl, #0
 8006434:	4640      	mov	r0, r8
 8006436:	4649      	mov	r1, r9
 8006438:	f000 f936 	bl	80066a8 <scalbn>
 800643c:	2200      	movs	r2, #0
 800643e:	4b97      	ldr	r3, [pc, #604]	@ (800669c <__kernel_rem_pio2+0x640>)
 8006440:	4604      	mov	r4, r0
 8006442:	460d      	mov	r5, r1
 8006444:	f7fa fac6 	bl	80009d4 <__aeabi_dcmpge>
 8006448:	b300      	cbz	r0, 800648c <__kernel_rem_pio2+0x430>
 800644a:	2200      	movs	r2, #0
 800644c:	4b94      	ldr	r3, [pc, #592]	@ (80066a0 <__kernel_rem_pio2+0x644>)
 800644e:	4620      	mov	r0, r4
 8006450:	4629      	mov	r1, r5
 8006452:	f7fa f839 	bl	80004c8 <__aeabi_dmul>
 8006456:	f7fa fad1 	bl	80009fc <__aeabi_d2iz>
 800645a:	4606      	mov	r6, r0
 800645c:	f7f9 ffca 	bl	80003f4 <__aeabi_i2d>
 8006460:	2200      	movs	r2, #0
 8006462:	4b8e      	ldr	r3, [pc, #568]	@ (800669c <__kernel_rem_pio2+0x640>)
 8006464:	f7fa f830 	bl	80004c8 <__aeabi_dmul>
 8006468:	460b      	mov	r3, r1
 800646a:	4602      	mov	r2, r0
 800646c:	4629      	mov	r1, r5
 800646e:	4620      	mov	r0, r4
 8006470:	f7f9 fe72 	bl	8000158 <__aeabi_dsub>
 8006474:	f7fa fac2 	bl	80009fc <__aeabi_d2iz>
 8006478:	ab0c      	add	r3, sp, #48	@ 0x30
 800647a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800647e:	f10b 0b01 	add.w	fp, fp, #1
 8006482:	f10a 0a18 	add.w	sl, sl, #24
 8006486:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800648a:	e733      	b.n	80062f4 <__kernel_rem_pio2+0x298>
 800648c:	4620      	mov	r0, r4
 800648e:	4629      	mov	r1, r5
 8006490:	f7fa fab4 	bl	80009fc <__aeabi_d2iz>
 8006494:	ab0c      	add	r3, sp, #48	@ 0x30
 8006496:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800649a:	e72b      	b.n	80062f4 <__kernel_rem_pio2+0x298>
 800649c:	ab0c      	add	r3, sp, #48	@ 0x30
 800649e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064a2:	f7f9 ffa7 	bl	80003f4 <__aeabi_i2d>
 80064a6:	4632      	mov	r2, r6
 80064a8:	463b      	mov	r3, r7
 80064aa:	f7fa f80d 	bl	80004c8 <__aeabi_dmul>
 80064ae:	464a      	mov	r2, r9
 80064b0:	e868 0102 	strd	r0, r1, [r8], #-8
 80064b4:	4653      	mov	r3, sl
 80064b6:	4630      	mov	r0, r6
 80064b8:	4639      	mov	r1, r7
 80064ba:	f7fa f805 	bl	80004c8 <__aeabi_dmul>
 80064be:	3d01      	subs	r5, #1
 80064c0:	4606      	mov	r6, r0
 80064c2:	460f      	mov	r7, r1
 80064c4:	e727      	b.n	8006316 <__kernel_rem_pio2+0x2ba>
 80064c6:	f8dd c018 	ldr.w	ip, [sp, #24]
 80064ca:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80064ce:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80064d2:	f8cd c018 	str.w	ip, [sp, #24]
 80064d6:	f7f9 fff7 	bl	80004c8 <__aeabi_dmul>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4648      	mov	r0, r9
 80064e0:	4651      	mov	r1, sl
 80064e2:	f7f9 fe3b 	bl	800015c <__adddf3>
 80064e6:	4681      	mov	r9, r0
 80064e8:	468a      	mov	sl, r1
 80064ea:	3701      	adds	r7, #1
 80064ec:	9b02      	ldr	r3, [sp, #8]
 80064ee:	429f      	cmp	r7, r3
 80064f0:	dc01      	bgt.n	80064f6 <__kernel_rem_pio2+0x49a>
 80064f2:	42be      	cmp	r6, r7
 80064f4:	dae7      	bge.n	80064c6 <__kernel_rem_pio2+0x46a>
 80064f6:	ab48      	add	r3, sp, #288	@ 0x120
 80064f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80064fc:	e9c6 9a00 	strd	r9, sl, [r6]
 8006500:	3d01      	subs	r5, #1
 8006502:	e70c      	b.n	800631e <__kernel_rem_pio2+0x2c2>
 8006504:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8006506:	2b02      	cmp	r3, #2
 8006508:	dc09      	bgt.n	800651e <__kernel_rem_pio2+0x4c2>
 800650a:	2b00      	cmp	r3, #0
 800650c:	dc2c      	bgt.n	8006568 <__kernel_rem_pio2+0x50c>
 800650e:	d04e      	beq.n	80065ae <__kernel_rem_pio2+0x552>
 8006510:	9b05      	ldr	r3, [sp, #20]
 8006512:	f003 0007 	and.w	r0, r3, #7
 8006516:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8006520:	2b03      	cmp	r3, #3
 8006522:	d1f5      	bne.n	8006510 <__kernel_rem_pio2+0x4b4>
 8006524:	ab48      	add	r3, sp, #288	@ 0x120
 8006526:	441c      	add	r4, r3
 8006528:	4625      	mov	r5, r4
 800652a:	46da      	mov	sl, fp
 800652c:	f1ba 0f00 	cmp.w	sl, #0
 8006530:	dc63      	bgt.n	80065fa <__kernel_rem_pio2+0x59e>
 8006532:	4625      	mov	r5, r4
 8006534:	46da      	mov	sl, fp
 8006536:	f1ba 0f01 	cmp.w	sl, #1
 800653a:	dc7b      	bgt.n	8006634 <__kernel_rem_pio2+0x5d8>
 800653c:	2000      	movs	r0, #0
 800653e:	2100      	movs	r1, #0
 8006540:	f1bb 0f01 	cmp.w	fp, #1
 8006544:	f300 8093 	bgt.w	800666e <__kernel_rem_pio2+0x612>
 8006548:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800654c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006550:	9b00      	ldr	r3, [sp, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	f040 8092 	bne.w	800667c <__kernel_rem_pio2+0x620>
 8006558:	9b04      	ldr	r3, [sp, #16]
 800655a:	e9c3 7800 	strd	r7, r8, [r3]
 800655e:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006562:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006566:	e7d3      	b.n	8006510 <__kernel_rem_pio2+0x4b4>
 8006568:	465d      	mov	r5, fp
 800656a:	2000      	movs	r0, #0
 800656c:	2100      	movs	r1, #0
 800656e:	ab48      	add	r3, sp, #288	@ 0x120
 8006570:	441c      	add	r4, r3
 8006572:	2d00      	cmp	r5, #0
 8006574:	da32      	bge.n	80065dc <__kernel_rem_pio2+0x580>
 8006576:	9b00      	ldr	r3, [sp, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d035      	beq.n	80065e8 <__kernel_rem_pio2+0x58c>
 800657c:	4602      	mov	r2, r0
 800657e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006582:	9c04      	ldr	r4, [sp, #16]
 8006584:	2501      	movs	r5, #1
 8006586:	e9c4 2300 	strd	r2, r3, [r4]
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006592:	f7f9 fde1 	bl	8000158 <__aeabi_dsub>
 8006596:	ac48      	add	r4, sp, #288	@ 0x120
 8006598:	45ab      	cmp	fp, r5
 800659a:	da28      	bge.n	80065ee <__kernel_rem_pio2+0x592>
 800659c:	9b00      	ldr	r3, [sp, #0]
 800659e:	b113      	cbz	r3, 80065a6 <__kernel_rem_pio2+0x54a>
 80065a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80065a4:	4619      	mov	r1, r3
 80065a6:	9b04      	ldr	r3, [sp, #16]
 80065a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80065ac:	e7b0      	b.n	8006510 <__kernel_rem_pio2+0x4b4>
 80065ae:	2000      	movs	r0, #0
 80065b0:	2100      	movs	r1, #0
 80065b2:	ab48      	add	r3, sp, #288	@ 0x120
 80065b4:	441c      	add	r4, r3
 80065b6:	f1bb 0f00 	cmp.w	fp, #0
 80065ba:	da08      	bge.n	80065ce <__kernel_rem_pio2+0x572>
 80065bc:	9b00      	ldr	r3, [sp, #0]
 80065be:	b113      	cbz	r3, 80065c6 <__kernel_rem_pio2+0x56a>
 80065c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80065c4:	4619      	mov	r1, r3
 80065c6:	9b04      	ldr	r3, [sp, #16]
 80065c8:	e9c3 0100 	strd	r0, r1, [r3]
 80065cc:	e7a0      	b.n	8006510 <__kernel_rem_pio2+0x4b4>
 80065ce:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80065d2:	f7f9 fdc3 	bl	800015c <__adddf3>
 80065d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065da:	e7ec      	b.n	80065b6 <__kernel_rem_pio2+0x55a>
 80065dc:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80065e0:	f7f9 fdbc 	bl	800015c <__adddf3>
 80065e4:	3d01      	subs	r5, #1
 80065e6:	e7c4      	b.n	8006572 <__kernel_rem_pio2+0x516>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	e7c9      	b.n	8006582 <__kernel_rem_pio2+0x526>
 80065ee:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 80065f2:	f7f9 fdb3 	bl	800015c <__adddf3>
 80065f6:	3501      	adds	r5, #1
 80065f8:	e7ce      	b.n	8006598 <__kernel_rem_pio2+0x53c>
 80065fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065fe:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8006602:	4640      	mov	r0, r8
 8006604:	4649      	mov	r1, r9
 8006606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800660a:	f7f9 fda7 	bl	800015c <__adddf3>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4606      	mov	r6, r0
 8006614:	460f      	mov	r7, r1
 8006616:	4640      	mov	r0, r8
 8006618:	4649      	mov	r1, r9
 800661a:	f7f9 fd9d 	bl	8000158 <__aeabi_dsub>
 800661e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006622:	f7f9 fd9b 	bl	800015c <__adddf3>
 8006626:	e865 0102 	strd	r0, r1, [r5], #-8
 800662a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800662e:	e9c5 6700 	strd	r6, r7, [r5]
 8006632:	e77b      	b.n	800652c <__kernel_rem_pio2+0x4d0>
 8006634:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006638:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800663c:	4640      	mov	r0, r8
 800663e:	4649      	mov	r1, r9
 8006640:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006644:	f7f9 fd8a 	bl	800015c <__adddf3>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4606      	mov	r6, r0
 800664e:	460f      	mov	r7, r1
 8006650:	4640      	mov	r0, r8
 8006652:	4649      	mov	r1, r9
 8006654:	f7f9 fd80 	bl	8000158 <__aeabi_dsub>
 8006658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800665c:	f7f9 fd7e 	bl	800015c <__adddf3>
 8006660:	e865 0102 	strd	r0, r1, [r5], #-8
 8006664:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006668:	e9c5 6700 	strd	r6, r7, [r5]
 800666c:	e763      	b.n	8006536 <__kernel_rem_pio2+0x4da>
 800666e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8006672:	f7f9 fd73 	bl	800015c <__adddf3>
 8006676:	f10b 3bff 	add.w	fp, fp, #4294967295
 800667a:	e761      	b.n	8006540 <__kernel_rem_pio2+0x4e4>
 800667c:	9b04      	ldr	r3, [sp, #16]
 800667e:	9a04      	ldr	r2, [sp, #16]
 8006680:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006684:	601f      	str	r7, [r3, #0]
 8006686:	605c      	str	r4, [r3, #4]
 8006688:	609d      	str	r5, [r3, #8]
 800668a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800668e:	60d3      	str	r3, [r2, #12]
 8006690:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006694:	6110      	str	r0, [r2, #16]
 8006696:	6153      	str	r3, [r2, #20]
 8006698:	e73a      	b.n	8006510 <__kernel_rem_pio2+0x4b4>
 800669a:	bf00      	nop
 800669c:	41700000 	.word	0x41700000
 80066a0:	3e700000 	.word	0x3e700000
 80066a4:	00000000 	.word	0x00000000

080066a8 <scalbn>:
 80066a8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80066ac:	4616      	mov	r6, r2
 80066ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066b2:	4683      	mov	fp, r0
 80066b4:	468c      	mov	ip, r1
 80066b6:	460b      	mov	r3, r1
 80066b8:	b982      	cbnz	r2, 80066dc <scalbn+0x34>
 80066ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80066be:	4303      	orrs	r3, r0
 80066c0:	d039      	beq.n	8006736 <scalbn+0x8e>
 80066c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006780 <scalbn+0xd8>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	f7f9 feff 	bl	80004c8 <__aeabi_dmul>
 80066ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006784 <scalbn+0xdc>)
 80066cc:	4683      	mov	fp, r0
 80066ce:	429e      	cmp	r6, r3
 80066d0:	468c      	mov	ip, r1
 80066d2:	da0d      	bge.n	80066f0 <scalbn+0x48>
 80066d4:	a326      	add	r3, pc, #152	@ (adr r3, 8006770 <scalbn+0xc8>)
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	e01b      	b.n	8006714 <scalbn+0x6c>
 80066dc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80066e0:	42ba      	cmp	r2, r7
 80066e2:	d109      	bne.n	80066f8 <scalbn+0x50>
 80066e4:	4602      	mov	r2, r0
 80066e6:	f7f9 fd39 	bl	800015c <__adddf3>
 80066ea:	4683      	mov	fp, r0
 80066ec:	468c      	mov	ip, r1
 80066ee:	e022      	b.n	8006736 <scalbn+0x8e>
 80066f0:	460b      	mov	r3, r1
 80066f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066f6:	3a36      	subs	r2, #54	@ 0x36
 80066f8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80066fc:	428e      	cmp	r6, r1
 80066fe:	dd0c      	ble.n	800671a <scalbn+0x72>
 8006700:	a31d      	add	r3, pc, #116	@ (adr r3, 8006778 <scalbn+0xd0>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	461c      	mov	r4, r3
 8006708:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800670c:	f361 74df 	bfi	r4, r1, #31, #1
 8006710:	4621      	mov	r1, r4
 8006712:	481d      	ldr	r0, [pc, #116]	@ (8006788 <scalbn+0xe0>)
 8006714:	f7f9 fed8 	bl	80004c8 <__aeabi_dmul>
 8006718:	e7e7      	b.n	80066ea <scalbn+0x42>
 800671a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800671e:	4432      	add	r2, r6
 8006720:	428a      	cmp	r2, r1
 8006722:	dced      	bgt.n	8006700 <scalbn+0x58>
 8006724:	2a00      	cmp	r2, #0
 8006726:	dd0a      	ble.n	800673e <scalbn+0x96>
 8006728:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800672c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006730:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006734:	46ac      	mov	ip, r5
 8006736:	4658      	mov	r0, fp
 8006738:	4661      	mov	r1, ip
 800673a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800673e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006742:	da09      	bge.n	8006758 <scalbn+0xb0>
 8006744:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8006748:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800674c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8006750:	480e      	ldr	r0, [pc, #56]	@ (800678c <scalbn+0xe4>)
 8006752:	f041 011f 	orr.w	r1, r1, #31
 8006756:	e7bd      	b.n	80066d4 <scalbn+0x2c>
 8006758:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800675c:	3236      	adds	r2, #54	@ 0x36
 800675e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006762:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006766:	4658      	mov	r0, fp
 8006768:	4629      	mov	r1, r5
 800676a:	2200      	movs	r2, #0
 800676c:	4b08      	ldr	r3, [pc, #32]	@ (8006790 <scalbn+0xe8>)
 800676e:	e7d1      	b.n	8006714 <scalbn+0x6c>
 8006770:	c2f8f359 	.word	0xc2f8f359
 8006774:	01a56e1f 	.word	0x01a56e1f
 8006778:	8800759c 	.word	0x8800759c
 800677c:	7e37e43c 	.word	0x7e37e43c
 8006780:	43500000 	.word	0x43500000
 8006784:	ffff3cb0 	.word	0xffff3cb0
 8006788:	8800759c 	.word	0x8800759c
 800678c:	c2f8f359 	.word	0xc2f8f359
 8006790:	3c900000 	.word	0x3c900000
 8006794:	00000000 	.word	0x00000000

08006798 <floor>:
 8006798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800679c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80067a0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80067a4:	2e13      	cmp	r6, #19
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	460c      	mov	r4, r1
 80067ac:	4605      	mov	r5, r0
 80067ae:	4680      	mov	r8, r0
 80067b0:	dc35      	bgt.n	800681e <floor+0x86>
 80067b2:	2e00      	cmp	r6, #0
 80067b4:	da17      	bge.n	80067e6 <floor+0x4e>
 80067b6:	a334      	add	r3, pc, #208	@ (adr r3, 8006888 <floor+0xf0>)
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f7f9 fcce 	bl	800015c <__adddf3>
 80067c0:	2200      	movs	r2, #0
 80067c2:	2300      	movs	r3, #0
 80067c4:	f7fa f910 	bl	80009e8 <__aeabi_dcmpgt>
 80067c8:	b150      	cbz	r0, 80067e0 <floor+0x48>
 80067ca:	2c00      	cmp	r4, #0
 80067cc:	da57      	bge.n	800687e <floor+0xe6>
 80067ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80067d2:	432c      	orrs	r4, r5
 80067d4:	2500      	movs	r5, #0
 80067d6:	42ac      	cmp	r4, r5
 80067d8:	4c2d      	ldr	r4, [pc, #180]	@ (8006890 <floor+0xf8>)
 80067da:	bf08      	it	eq
 80067dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80067e0:	4623      	mov	r3, r4
 80067e2:	462a      	mov	r2, r5
 80067e4:	e024      	b.n	8006830 <floor+0x98>
 80067e6:	4f2b      	ldr	r7, [pc, #172]	@ (8006894 <floor+0xfc>)
 80067e8:	4137      	asrs	r7, r6
 80067ea:	ea01 0c07 	and.w	ip, r1, r7
 80067ee:	ea5c 0c00 	orrs.w	ip, ip, r0
 80067f2:	d01d      	beq.n	8006830 <floor+0x98>
 80067f4:	a324      	add	r3, pc, #144	@ (adr r3, 8006888 <floor+0xf0>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f7f9 fcaf 	bl	800015c <__adddf3>
 80067fe:	2200      	movs	r2, #0
 8006800:	2300      	movs	r3, #0
 8006802:	f7fa f8f1 	bl	80009e8 <__aeabi_dcmpgt>
 8006806:	2800      	cmp	r0, #0
 8006808:	d0ea      	beq.n	80067e0 <floor+0x48>
 800680a:	2c00      	cmp	r4, #0
 800680c:	bfbe      	ittt	lt
 800680e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006812:	4133      	asrlt	r3, r6
 8006814:	18e4      	addlt	r4, r4, r3
 8006816:	2500      	movs	r5, #0
 8006818:	ea24 0407 	bic.w	r4, r4, r7
 800681c:	e7e0      	b.n	80067e0 <floor+0x48>
 800681e:	2e33      	cmp	r6, #51	@ 0x33
 8006820:	dd0a      	ble.n	8006838 <floor+0xa0>
 8006822:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006826:	d103      	bne.n	8006830 <floor+0x98>
 8006828:	f7f9 fc98 	bl	800015c <__adddf3>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4610      	mov	r0, r2
 8006832:	4619      	mov	r1, r3
 8006834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006838:	f04f 3cff 	mov.w	ip, #4294967295
 800683c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8006840:	fa2c f707 	lsr.w	r7, ip, r7
 8006844:	4207      	tst	r7, r0
 8006846:	d0f3      	beq.n	8006830 <floor+0x98>
 8006848:	a30f      	add	r3, pc, #60	@ (adr r3, 8006888 <floor+0xf0>)
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	f7f9 fc85 	bl	800015c <__adddf3>
 8006852:	2200      	movs	r2, #0
 8006854:	2300      	movs	r3, #0
 8006856:	f7fa f8c7 	bl	80009e8 <__aeabi_dcmpgt>
 800685a:	2800      	cmp	r0, #0
 800685c:	d0c0      	beq.n	80067e0 <floor+0x48>
 800685e:	2c00      	cmp	r4, #0
 8006860:	da0a      	bge.n	8006878 <floor+0xe0>
 8006862:	2e14      	cmp	r6, #20
 8006864:	d101      	bne.n	800686a <floor+0xd2>
 8006866:	3401      	adds	r4, #1
 8006868:	e006      	b.n	8006878 <floor+0xe0>
 800686a:	2301      	movs	r3, #1
 800686c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006870:	40b3      	lsls	r3, r6
 8006872:	441d      	add	r5, r3
 8006874:	4545      	cmp	r5, r8
 8006876:	d3f6      	bcc.n	8006866 <floor+0xce>
 8006878:	ea25 0507 	bic.w	r5, r5, r7
 800687c:	e7b0      	b.n	80067e0 <floor+0x48>
 800687e:	2500      	movs	r5, #0
 8006880:	462c      	mov	r4, r5
 8006882:	e7ad      	b.n	80067e0 <floor+0x48>
 8006884:	f3af 8000 	nop.w
 8006888:	8800759c 	.word	0x8800759c
 800688c:	7e37e43c 	.word	0x7e37e43c
 8006890:	bff00000 	.word	0xbff00000
 8006894:	000fffff 	.word	0x000fffff

08006898 <_init>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	bf00      	nop
 800689c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689e:	bc08      	pop	{r3}
 80068a0:	469e      	mov	lr, r3
 80068a2:	4770      	bx	lr

080068a4 <_fini>:
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a6:	bf00      	nop
 80068a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068aa:	bc08      	pop	{r3}
 80068ac:	469e      	mov	lr, r3
 80068ae:	4770      	bx	lr
